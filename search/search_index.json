{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Documentation Portal","text":"<p>Explore detailed information about codbex across three main areas:</p> <ol> <li> <p>Platform: Learn about the codbex Platform and its core features, including languages, engines, artefacts, SDK, widgets, services, and templates.</p> </li> <li> <p>Tooling: Discover the tools provided by codbex in the Workbench, Git perspective, Databases perspective, Terminal perspective, Processes Workspace perspective, and more.</p> </li> <li> <p>Modules: Dive into building applications with codbex, including Model Driven Architecture, Extensibility, Integrations, REST API, and more.</p> </li> </ol> <p>Feel free to click on each area to access specific documentation sections. Whether you're a developer, administrator, or user, codbex documentation provides comprehensive information to help you make the most of the platform's capabilities.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to the Getting Started guide!</p>"},{"location":"getting-started/#overview","title":"Overview","text":"<p>This guide outlines the process of using the codbex platform to create your initial 'Hello World' service. For more in-depth technical information on various aspects of the platform, its components, and capabilities, refer to the documentation listed in the references section below.</p>"},{"location":"getting-started/#hello-world","title":"Hello World","text":"<p>In this guide, we'll walk you through creating a simple \"Hello World\" service using the Request and Response APIs.</p>"},{"location":"getting-started/#setting-up-your-environment","title":"Setting Up Your Environment","text":"<p>Before we begin, ensure you have the necessary tools installed and your development environment configured.</p> <p>You can run the all in one platform as a Docker container as described here or build and run locally.</p>"},{"location":"getting-started/#access-the-instance","title":"Access the instance","text":"<p>In case of a local setup on your machine, you can access the web IDE at the following location: http://localhost/</p> <p>Default Credentials</p> <p>The default username is <code>admin</code> and the default password is <code>admin</code>. The credentials can be updated, as described in the configuration options.</p>"},{"location":"getting-started/#creating-your-first-service","title":"Creating Your First Service","text":"<p>Let's start by creating a basic \"Hello World\" service. We'll use the Request API to get the REST method from the incoming requests and the Response API to send a response back to the client.</p>"},{"location":"getting-started/#create-a-hello-world-service","title":"Create a <code>Hello World</code> service","text":"<p>Once you have a running codbex instance, you can start with your project:</p> <ol> <li>Right-click inside the <code>Projects</code> view.</li> <li> <p>From the menu select the New Project option.</p> <p></p> </li> <li> <p>Enter <code>hello-world</code> for the name of the project and click the Create button. </p> <p></p> </li> <li> <p>Right-click on the <code>hello-world</code> project in the <code>Projects</code> view and choose JavaScript service from the New dropdown:</p> </li> <li> <p>Select the New \u2192 JavaScript Service option:</p> <p></p> </li> <li> <p>Enter <code>hello-service.mjs</code> for the name of the JavaScript Service:</p> <p></p> </li> <li> <p>Double-click on the <code>hello-service.js</code> to open the file in the editor on the right.</p> <p></p> </li> </ol> <p>Info</p> <p>The file already contains a <code>Hello World</code> service implementation. As it's not specified otherwise, the service can be executed by performing any of the following HTTP methods: <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code> and <code>PATCH</code>.</p> <ul> <li> <p>Click on the Publish All button from the toolbar:</p> <p></p> </li> <li> <p>With the <code>service.js</code> selected in the <code>Projects</code> view, check the result of the execution of the server-side JavaScript Service in the <code>Preview</code> view:</p> <p></p> </li> </ul> <p>Note</p> <p>The JavaScript Service is published and available at the <code>http://localhost/services/js/hello-world/hello-service.mjs</code>URL. It can be accessed in a separate browser tab, consumed by a third-party application or API tools like <code>Postman</code> or <code>cURL</code>.</p>"},{"location":"getting-started/#explore-the-tooling","title":"Explore the Tooling","text":""},{"location":"getting-started/#overview-getting-started-with-tooling","title":"Overview: Getting Started with Tooling","text":"<p>This overview will guide you through the basics of the various tools and perspectives available within the platform's workbench. Whether you're managing databases, debugging applications, or designing integration flows, this comprehensive set of tools empowers you to streamline your development workflow and maximize productivity.</p>"},{"location":"getting-started/#workbench-basics","title":"Workbench Basics","text":"<ul> <li> <p>Workbench: The central hub where you perform your development tasks. It provides access to various perspectives and tools tailored to different aspects of application development.</p> </li> <li> <p>Import Area: Easily import existing projects or resources into your workspace.</p> </li> <li> <p>Search Area: Quickly find files, resources, or symbols within your project.</p> </li> <li> <p>Properties Area: View and edit properties of selected files or resources.</p> </li> <li> <p>Console View: Monitor application logs and execute commands directly within the platform.</p> </li> <li> <p>Code Editor (Monaco): Write, edit, and debug code using the powerful Monaco editor, which provides syntax highlighting, auto-completion, and other advanced features.</p> </li> <li> <p>Problems View: Identify and resolve issues in your codebase with real-time error and warning notifications.</p> </li> <li> <p>Preview View: Preview web pages, documents, or other content directly within the platform.</p> </li> <li> <p>Logs View: Monitor system logs and diagnostic information to troubleshoot issues.</p> </li> <li> <p>Loggers View: Configure logging settings for different components within your application.</p> </li> </ul>"},{"location":"getting-started/#git-perspective","title":"Git Perspective","text":"<ul> <li> <p>Git Projects View: Manage Git repositories, clone, pull, push, and share projects seamlessly.</p> </li> <li> <p>Local Branches View: View and manage local branches within your Git repository.</p> </li> <li> <p>Remote Branches View: Explore and interact with remote branches in your Git repository.</p> </li> <li> <p>History View: Track changes and revisions in your Git repository's history.</p> </li> <li> <p>Git Staging View: Stage, unstage, and commit changes to your Git repository.</p> </li> <li> <p>Diff Editor: Compare and merge differences between files or commits.</p> </li> </ul>"},{"location":"getting-started/#databases-perspective","title":"Databases Perspective","text":"<ul> <li> <p>Database Explorer: Interact with databases, execute queries, and manage database connections.</p> </li> <li> <p>NoSQL Datasources Support: Seamlessly work with NoSQL databases and data sources.</p> </li> <li> <p>SQL Console: Execute SQL queries and commands directly within the platform.</p> </li> <li> <p>Result View: View query results and data sets returned from database operations.</p> </li> <li> <p>Databases View: Manage database connections, configurations, and schemas.</p> </li> <li> <p>Transfer View: Transfer data between different databases and data sources seamlessly.</p> </li> <li> <p>Data Export and Import: Export and import data between databases using CSV and JSON formats.</p> </li> </ul>"},{"location":"getting-started/#debugger-perspective","title":"Debugger Perspective","text":"<ul> <li> <p>Debugger Basics: Debug applications using a suite of tools including breakpoints, call stack, variables, and watch expressions.</p> </li> <li> <p>Debugging Tools: Utilize debugging tools to identify and fix issues in your codebase.</p> </li> <li> <p>Breakpoints View: Set breakpoints to pause execution at specific points in your code.</p> </li> <li> <p>Call Stack View: View the call stack to understand the flow of execution.</p> </li> <li> <p>Variables View: Inspect and modify variable values during debugging sessions.</p> </li> </ul>"},{"location":"getting-started/#documents-perspective","title":"Documents Perspective","text":"<ul> <li> <p>Documents Explorer: Manage and organize documents within your project.</p> </li> <li> <p>Document Preview: Preview documents and files directly within the platform.</p> </li> <li> <p>File Upload and Management: Upload, organize, and manage files and documents within your project.</p> </li> </ul>"},{"location":"getting-started/#processes-workspace-perspective","title":"Processes Workspace Perspective","text":"<ul> <li> <p>Process Definitions View: Explore and manage BPMN process definitions.</p> </li> <li> <p>Process Instances View: Monitor and manage running instances of BPMN processes.</p> </li> <li> <p>Process Context View: View and manage process context data associated with BPMN processes.</p> </li> <li> <p>Process Viewer: Visualize BPMN process diagrams and instances.</p> </li> <li> <p>Process Inbox: Manage user tasks and interactions within BPMN processes.</p> </li> <li> <p>Dead-Letter Jobs View: Monitor and handle failed or erroneous process jobs.</p> </li> </ul>"},{"location":"getting-started/#terminal-perspective","title":"Terminal Perspective","text":"<ul> <li> <p>Terminal Basics: Access a command-line interface directly within the platform.</p> </li> <li> <p>Commands and Shortcuts: Execute commands, navigate directories, and perform various tasks using terminal commands.</p> </li> </ul>"},{"location":"getting-started/#modelling-applications","title":"Modelling Applications","text":""},{"location":"getting-started/#overview-getting-started-with-mdd","title":"Overview: Getting Started with MDD","text":"<p>This overview will guide you through the basics of the model driven techniques.</p>"},{"location":"getting-started/#model-driven-development-mdd","title":"Model-Driven Development (MDD)","text":"<p>The codbex platform offers a comprehensive set of MDD features, including entity data modeling, code generation, predefined modules, and application building blocks. By leveraging these features, organizations can streamline the development process, reduce development time and costs, and deliver high-quality applications that meet their business requirements.</p> <ul> <li> <p>General Overview: Understand the concept and benefits of Model-Driven Architecture (MDA) for application development.</p> </li> <li> <p>Entity Data Modeler (EDM): Design and define domain models using the Entity Data Modeler tool.</p> </li> </ul> <p></p>"},{"location":"getting-started/#business-processes-management","title":"Business Processes Management","text":"<p>The codbex platform offers a wide range of BPM features, including BPMN modeling, process execution, task management, and administrative tools. By leveraging these features, organizations can streamline their business processes, improve operational efficiency, and achieve better visibility and control over their business operations.</p> <ul> <li>BPMN Modeler (BPMN): Design and define business process models using the BPMN Modeler tool.</li> </ul> <p></p>"},{"location":"getting-started/#system-integrations-and-etl","title":"System Integrations and ETL","text":"<p>The codbex platform offers a rich set of ETL features, including visual route modeling, integration engine based on Apache Camel, extensive library of connectors, and comprehensive admin tools. These features empower users to design, deploy, and manage complex data integration workflows with ease, enabling organizations to efficiently extract, transform, and load data across their IT landscape.</p> <p></p>"},{"location":"getting-started/#form-designer","title":"Form Designer","text":"<p>The Form Designer in the codbex platform offers a flexible and intuitive solution for designing input forms, enabling users to create visually appealing and highly functional forms for their applications with ease. Whether building simple data entry forms or complex multi-step workflows, the Form Designer provides the tools and capabilities needed to design engaging and user-friendly interfaces for a wide range of business use cases.</p> <p></p>"},{"location":"getting-started/#extensibility-in-the-platform","title":"Extensibility in the Platform","text":"<ul> <li> <p>Overview: Explore the extensibility features of the platform, including extension points and extensions.</p> </li> <li> <p>Extension Points: Identify and leverage extension points to customize and extend platform functionality.</p> </li> <li> <p>Extensions: Develop and deploy extensions to enhance the capabilities of the platform.</p> </li> </ul>"},{"location":"configurations/","title":"Configurations","text":"<ul> <li>Basic Authentication</li> </ul>"},{"location":"configurations/basic-auth/","title":"Basic Authentication","text":"<p>These configuration options allow you to manage Basic authentication settings in the codbex platform. By default, Basic authentication is enabled with the username and password set to admin. However, you can customize these settings as needed.</p>"},{"location":"configurations/basic-auth/#basic","title":"Basic","text":"Parameter Description Default* DIRIGIBLE_BASIC_ENABLED Determines whether Basic authentication is enabled or not. When set to <code>true</code>, Basic authentication is enabled. <code>true</code> DIRIGIBLE_BASIC_USERNAME Base64 encoded property representing the username used for Basic authentication. This value is decoded to retrieve the actual username. By default, it is set to <code>admin</code>. <code>admin</code> DIRIGIBLE_BASIC_PASSWORD Base64 encoded property representing the password used for Basic authentication. This value is decoded to retrieve the actual password. By default, it is set to <code>admin</code>. <code>admin</code>"},{"location":"modules/","title":"Modules Documentation","text":"<p>Welcome to the Modules Documentation for codbex comprehensive enterprise system. This documentation serves as a detailed guide to understanding and utilizing the various modules within our integrated software solution. Each module is designed to address specific functional areas of the organization, offering powerful tools and features to streamline processes, enhance productivity, and drive business growth.</p> <p>From Finance and Accounting to Sales and Distribution, Human Resources, Supply Chain Management, Customer Relationship Management, and beyond, our enterprise system encompasses a wide range of modules tailored to meet the diverse needs of modern businesses. Each module is meticulously designed and meticulously developed to deliver unparalleled performance, reliability, and flexibility, empowering organizations to achieve their strategic objectives with confidence.</p> <p>Within this documentation, you will find comprehensive information on each module, including detailed descriptions of key functionalities, essential fields, core processes, and best practices for effective implementation. Whether you are a new user seeking to familiarize yourself with the system or an experienced user looking to optimize your workflow, this documentation provides valuable insights and resources to support your journey.</p>"},{"location":"modules/#finance-and-accounting","title":"Finance and Accounting:","text":"<ul> <li>General Ledger</li> <li>Accounts Payable</li> <li>Accounts Receivable</li> <li>Financial Reporting</li> <li>Budgeting and Forecasting</li> </ul>"},{"location":"modules/#human-resources-hr-and-payroll","title":"Human Resources (HR) and Payroll:","text":"<ul> <li>Employee Information Management</li> <li>Payroll Processing</li> <li>Time and Attendance</li> <li>Performance Management</li> <li>Recruitment and Onboarding</li> </ul>"},{"location":"modules/#supply-chain-management","title":"Supply Chain Management:","text":"<ul> <li>Procurement</li> <li>Inventory Management</li> <li>Order Management</li> <li>Supplier Relationship Management</li> <li>Logistics and Distribution</li> </ul>"},{"location":"modules/#customer-relationship-management-crm","title":"Customer Relationship Management (CRM):","text":"<ul> <li>Lead Management</li> <li>Opportunity Management</li> <li>Customer Database</li> <li>Sales and Marketing Automation</li> <li>Customer Support and Service</li> </ul>"},{"location":"modules/#manufacturing-and-production","title":"Manufacturing and Production:","text":"<ul> <li>Bill of Materials (BOM)</li> <li>Work Order Management</li> <li>Production Planning and Scheduling</li> <li>Quality Control</li> <li>Shop Floor Management</li> </ul>"},{"location":"modules/#sales-and-distribution","title":"Sales and Distribution:","text":"<ul> <li>Sales Order Processing</li> <li>Pricing and Discount Management</li> <li>Sales Forecasting</li> <li>Channel Management</li> <li>Territory Management</li> </ul>"},{"location":"modules/#project-management","title":"Project Management:","text":"<ul> <li>Project Planning and Scheduling</li> <li>Resource Allocation</li> <li>Budgeting and Cost Tracking</li> <li>Task Management</li> <li>Collaboration Tools</li> </ul>"},{"location":"modules/#asset-management","title":"Asset Management:","text":"<ul> <li>Asset Tracking</li> <li>Maintenance Planning</li> <li>Depreciation Management</li> <li>Equipment Lifecycle Management</li> <li>Warranty Tracking</li> </ul>"},{"location":"modules/#business-intelligence-and-reporting","title":"Business Intelligence and Reporting:","text":"<ul> <li>Data Analytics</li> <li>Dashboards and KPIs</li> <li>Report Generation</li> <li>Data Visualization</li> <li>Business Intelligence Tools</li> </ul>"},{"location":"modules/#quality-management","title":"Quality Management:","text":"<ul> <li>Quality Assurance</li> <li>Compliance Management</li> <li>Non-Conformance Tracking</li> <li>Document Control</li> <li>Audits and Inspections</li> </ul>"},{"location":"modules/#document-management","title":"Document Management:","text":"<ul> <li>Document Storage and Retrieval</li> <li>Version Control</li> <li>Document Workflow</li> <li>Electronic Signatures</li> <li>Document Security</li> </ul>"},{"location":"modules/#compliance-and-risk-management","title":"Compliance and Risk Management:","text":"<ul> <li>Regulatory Compliance</li> <li>Risk Assessment</li> <li>Audit Trail</li> <li>Policy Management</li> <li>Incident Reporting</li> </ul>"},{"location":"modules/#customer-service-and-help-desk","title":"Customer Service and Help Desk:","text":"<ul> <li>Ticketing System</li> <li>Service Level Agreements (SLAs)</li> <li>Knowledge Base</li> <li>Customer Feedback</li> <li>Case Management</li> </ul>"},{"location":"modules/#e-commerce-and-online-sales","title":"E-commerce and Online Sales:","text":"<ul> <li>Online Store Management</li> <li>Product Catalog</li> <li>Shopping Cart</li> <li>Payment Processing</li> <li>Order Fulfillment</li> </ul>"},{"location":"modules/#environmental-health-and-safety-ehs","title":"Environmental, Health, and Safety (EHS):","text":"<ul> <li>Safety Compliance</li> <li>Incident Tracking</li> <li>Environmental Impact Assessment</li> <li>Occupational Health Management</li> <li>Emergency Response Planning</li> </ul>"},{"location":"modules/#learning-management-system-lms","title":"Learning Management System (LMS):","text":"<ul> <li>Training Programs and Courses</li> <li>Employee Learning Records</li> <li>Certification Tracking</li> <li>Online Learning Modules</li> <li>Skill Gap Analysis</li> </ul>"},{"location":"modules/accounting/","title":"Accounting","text":""},{"location":"modules/accounting/#journal-entry","title":"Journal Entry","text":"<p>A Journal Entry is a fundamental accounting document that records financial transactions. It serves as the primary source of input for updating the general ledger.</p> <p>Key Components:</p> <ul> <li>Date: The date on which the financial transaction occurred.</li> <li>Account Titles: The names of the accounts affected by the transaction.</li> <li>Debit and Credit Amounts: The amounts recorded in the debit and credit columns to maintain the accounting equation (Assets = Liabilities + Equity).</li> <li>Narration/Description: A brief description explaining the purpose or nature of the transaction.</li> </ul> <p>Process:</p> <ul> <li>Financial transactions occur within the organization.</li> <li>Accountants analyze the transactions and prepare Journal Entries to record them.</li> <li>Journal Entries are posted to the general ledger, updating the financial accounts.</li> </ul>"},{"location":"modules/accounting/#ledger","title":"Ledger","text":"<p>A Ledger is a collection of accounts, organized by account type. It provides a detailed record of all financial transactions for specific accounts.</p> <p>Key Components:</p> <ul> <li>Account Name: The name of the financial account.</li> <li>Debit and Credit Columns: Columns where debit and credit entries are recorded for each transaction.</li> <li>Running Balance: The cumulative balance of each account after each transaction.</li> <li>Date: The date of each transaction recorded in the ledger.</li> </ul> <p>Process:</p> <ul> <li>Journal Entries are posted to the respective accounts in the general ledger.</li> <li>The Ledger is continuously updated with new transactions, reflecting changes in account balances.</li> <li>The Ledger serves as a historical record and a basis for preparing financial statements.</li> </ul>"},{"location":"modules/accounting/#trial-balance","title":"Trial Balance","text":"<p>A Trial Balance is a summary of all the ledger accounts' balances, organized to ensure that debits equal credits. It's a tool used to identify errors in the recording of transactions.</p> <p>Key Components:</p> <ul> <li>Account Names: The names of all accounts in the ledger.</li> <li>Debit and Credit Columns: The total debit and credit balances for each account.</li> <li>Debit and Credit Totals: The total debits and credits for all accounts.</li> <li>Equality Check: Ensures that the total debits equal the total credits.</li> </ul> <p>Process:</p> <ul> <li>After posting Journal Entries to the ledger, account balances are summarized in the Trial Balance.</li> <li>The equality check is performed to identify any imbalances.</li> <li>If the trial balance is balanced, it indicates the accuracy of the accounting records.</li> </ul>"},{"location":"modules/accounting/#financial-statements","title":"Financial Statements","text":"<p>Financial Statements are comprehensive reports summarizing the financial performance and position of an organization. The primary financial statements include the Income Statement, Balance Sheet, and Cash Flow Statement.</p> <p>Key Components:</p> <ul> <li> <p>Income Statement (Profit and Loss Statement):</p> <ul> <li>Revenue</li> <li>Expenses</li> <li>Net Income (or Net Loss)</li> </ul> </li> <li> <p>Balance Sheet:</p> <ul> <li>Assets (Current and Non-current)</li> <li>Liabilities (Current and Non-current)</li> <li>Equity</li> </ul> </li> <li> <p>Cash Flow Statement:</p> </li> <li>Operating Activities</li> <li>Investing Activities</li> <li>Financing Activities</li> <li>Net Cash Flow</li> </ul> <p>Process:</p> <ul> <li>The financial statements are prepared based on the balances in the ledger.</li> <li>Income Statement shows the profitability over a specific period.</li> <li>Balance Sheet provides an overview of the financial position at a specific point in time.</li> <li>Cash Flow Statement details the cash movements within the organization.</li> </ul>"},{"location":"modules/accounting/#invoice-and-receipts","title":"Invoice and Receipts","text":"<p>Invoices and Receipts are important documents for recording revenue and payments.</p> <p>Key Components:</p> <ul> <li> <p>Invoice:</p> <ul> <li>Issuer and Receiver Information</li> <li>Description of Goods or Services</li> <li>Amount Due and Payment Terms</li> </ul> </li> <li> <p>Receipt:</p> <ul> <li>Payer and Payee Information</li> <li>Amount Paid</li> <li>Date of Payment</li> </ul> </li> </ul> <p>Process:</p> <ul> <li>Invoices are generated when goods or services are sold.</li> <li>Receipts are issued upon receiving payments.</li> <li>These documents are used to record revenue and cash transactions in the accounting system.</li> </ul> <p>These documents collectively form the backbone of the Accounting module, providing a systematic approach to recording, analyzing, and reporting financial transactions within an organization.</p>"},{"location":"modules/billing/","title":"Billing","text":""},{"location":"modules/billing/#sales-invoice","title":"Sales Invoice","text":"<p>A Sales Invoice is a document issued by a seller to a buyer, indicating the products or services provided and the agreed-upon prices. It serves as a request for payment and a record of the sale.</p> <p>Key Components:</p> <ul> <li>Seller and Buyer Information: Details of both the selling organization and the customer.</li> <li>Invoice Number: A unique identifier for the invoice.</li> <li>Item Details: Description, quantity, specifications, unit prices, and total amounts for the products or services.</li> <li>Payment Terms: Conditions specifying when and how payment should be made.</li> <li>Tax Information: Applicable taxes, if any, and their amounts.</li> </ul> <p>Process:</p> <ul> <li>The Sales Invoice is generated based on the goods delivered or services provided.</li> <li>It is sent to the customer, indicating the total amount due.</li> <li>The customer reviews the invoice and processes payment based on the provided terms.</li> </ul>"},{"location":"modules/billing/#credit-note","title":"Credit Note","text":"<p>A Credit Note, also known as a Credit Memo, is issued by a seller to a buyer to correct errors or make adjustments to a previously issued invoice. It serves to reduce the amount owed by the buyer.</p> <p>Key Components:</p> <ul> <li>Credit Note Number: A unique identifier for the credit note.</li> <li>Reference Invoice: The original invoice that is being corrected or adjusted.</li> <li>Reason for Credit: Explanation of the reason for issuing the credit note.</li> <li>Adjusted Amount: The amount by which the original invoice is being reduced.</li> </ul> <p>Process:</p> <ul> <li>A need for correction or adjustment to a previous invoice is identified.</li> <li>A Credit Note is generated, referencing the original invoice.</li> <li>The credit note is sent to the customer, and the adjusted amount is typically applied to future transactions or used to offset outstanding balances.</li> </ul>"},{"location":"modules/billing/#sales-payment-receipt","title":"Sales Payment Receipt","text":"<p>A Sales Payment Receipt is a document issued by the seller to acknowledge the receipt of payment from the customer. It serves as proof of payment.</p> <p>Key Components:</p> <ul> <li>Receipt Number: A unique identifier for the payment receipt.</li> <li>Payment Date: The date on which the payment was received.</li> <li>Payment Amount: The total amount received from the customer.</li> <li>Payment Method: The method used by the customer to make the payment.</li> </ul> <p>Process:</p> <ul> <li>The customer makes a payment based on the issued invoice.</li> <li>The seller generates a Payment Receipt to confirm the receipt of payment.</li> <li>The Payment Receipt may be provided to the customer as proof of payment.</li> </ul>"},{"location":"modules/billing/#statement-of-account","title":"Statement of Account","text":"<p>A Statement of Account provides a summary of all financial transactions between a buyer and a seller over a specific period. It includes details of invoices, credit notes, and payments.</p> <p>Key Components:</p> <ul> <li>Transaction Details: A chronological list of invoices, credit notes, and payments.</li> <li>Balance Outstanding: The remaining amount owed by the customer or owed to the customer.</li> <li>Period Covered: The time frame for which the statement is generated.</li> </ul> <p>Process:</p> <ul> <li>Periodically, a Statement of Account is generated to provide an overview of the financial relationship between the buyer and the seller.</li> <li>It is sent to the customer to keep them informed about their outstanding balance and recent transactions.</li> </ul> <p>These documents collectively contribute to an effective billing and invoicing process, ensuring accuracy, transparency, and proper financial management within an organization.</p>"},{"location":"modules/e-commerce/","title":"e-Commerce","text":""},{"location":"modules/e-commerce/#product-catalog","title":"Product Catalog","text":"<p>A Product Catalog is a comprehensive document or digital listing that includes detailed information about all the products available for purchase on the e-commerce platform.</p> <p>Key Components:</p> <ul> <li>Product Descriptions: Detailed information about each product, including features, specifications, and benefits.</li> <li>Product Images: High-quality images showcasing the product from different angles.</li> <li>Pricing: Clear indication of the product's price.</li> <li>Availability: Information on stock levels and availability status.</li> <li>Product Categories and Tags: Organizational labels to help customers find products easily.</li> </ul> <p>Process:</p> <ul> <li>The Product Catalog is regularly updated to include new products or remove discontinued ones.</li> <li>It serves as a reference for customers browsing the e-commerce platform.</li> </ul>"},{"location":"modules/e-commerce/#shopping-cart","title":"Shopping Cart","text":"<p>The Shopping Cart is a digital document that temporarily holds selected items that a customer intends to purchase before completing the checkout process.</p> <p>Key Components:</p> <ul> <li>List of Selected Products: Names, quantities, and prices of items added to the cart.</li> <li>Total Price: The cumulative cost of all items in the cart.</li> <li>Product Images: Thumbnails or images of the selected products.</li> <li>Remove or Edit Options: Functionality for customers to adjust quantities or remove items.</li> </ul> <p>Process:</p> <ul> <li>Customers add products to the Shopping Cart while browsing the e-commerce platform.</li> <li>The Shopping Cart provides an overview of selected items, allowing customers to make adjustments before proceeding to checkout.</li> </ul>"},{"location":"modules/e-commerce/#order-confirmation","title":"Order Confirmation","text":"<p>An Order Confirmation is a document sent to customers once they have successfully completed a purchase. It serves as a receipt and provides details about the order.</p> <p>Key Components:</p> <ul> <li>Order Number: A unique identifier for the order.</li> <li>List of Purchased Items: Names, quantities, and prices of the purchased products.</li> <li>Billing and Shipping Information: Customer's address and contact details.</li> <li>Total Order Amount: The overall cost of the purchase, including taxes and shipping fees.</li> <li>Payment Details: Information on the payment method used for the transaction.</li> </ul> <p>Process:</p> <ul> <li>Customers receive the Order Confirmation via email or on the website after completing the checkout process.</li> <li>The document provides customers with a summary of their order and serves as proof of purchase.</li> </ul>"},{"location":"modules/e-commerce/#invoice","title":"Invoice","text":"<p>An Invoice is a formal document sent to customers specifying the amount due for purchased products or services. It is often used for business-to-business (B2B) transactions.</p> <p>Key Components:</p> <ul> <li>Invoice Number: A unique identifier for the invoice.</li> <li>Billing Information: Customer's details, including name and address.</li> <li>List of Purchased Items: Names, quantities, and prices of the products or services.</li> <li>Total Amount Due: The overall cost of the purchase, including taxes and fees.</li> <li>Payment Instructions: Information on how and when to make the payment.</li> </ul> <p>Process:</p> <ul> <li>Invoices are generated and sent to customers after a successful transaction.</li> <li>They provide customers with a formal record of the purchase and specify payment details.</li> </ul>"},{"location":"modules/e-commerce/#shipping-label","title":"Shipping Label","text":"<p>A Shipping Label is a document affixed to a package that provides essential information for shipping and delivery purposes.</p> <p>Key Components:</p> <ul> <li>Shipping Address: The recipient's address for delivery.</li> <li>Return Address: Sender's address in case the package needs to be returned.</li> <li>Shipping Method: The chosen shipping service (e.g., standard, expedited).</li> <li>Tracking Number: A unique identifier for tracking the shipment's progress.</li> </ul> <p>Process:</p> <ul> <li>Shipping Labels are generated as part of the order fulfillment process.</li> <li>They are attached to packages to ensure proper routing and delivery.</li> </ul>"},{"location":"modules/e-commerce/#return-authorization-form","title":"Return Authorization Form","text":"<p>A Return Authorization Form is used by customers who wish to return products. It provides a standardized process for requesting and approving returns.</p> <p>Key Components:</p> <ul> <li>Customer Information: Name, order number, and contact details.</li> <li>Reason for Return: Explanation of why the customer is returning the product.</li> <li>Product Details: Information about the product being returned, including SKU or product code.</li> <li>Return Authorization Number: A unique identifier assigned to the return request.</li> </ul> <p>Process:</p> <ul> <li>Customers fill out the Return Authorization Form to initiate a return.</li> <li>The form is reviewed, and if approved, a Return Authorization Number is issued to the customer.</li> </ul>"},{"location":"modules/e-commerce/#customer-reviews-and-ratings","title":"Customer Reviews and Ratings","text":"<p>Customer Reviews and Ratings are not traditional documents but play a crucial role in the e-commerce module. They provide feedback and ratings from customers who have purchased and used products.</p> <p>Key Components:</p> <ul> <li>Written Reviews: Detailed comments from customers about their experience with the product.</li> <li>Star Ratings: Numeric ratings (e.g., out of 5 stars) indicating overall satisfaction.</li> <li>Usernames or Initials: Identification of the customer providing the review.</li> </ul> <p>Process:</p> <ul> <li>Customers submit reviews and ratings based on their experiences with products.</li> <li>Reviews and ratings are displayed on product pages, helping other customers make informed decisions.</li> </ul> <p>These documents collectively contribute to the seamless operation of the e-commerce module, ensuring a smooth customer experience, accurate order processing, and effective communication between the business and its customers.</p>"},{"location":"modules/employees/","title":"Employees","text":""},{"location":"modules/employees/#employee-information-form","title":"Employee Information Form","text":"<p>An Employee Information Form collects and stores essential details about an employee, serving as the foundational record for HR management.</p> <p>Key Components:</p> <ul> <li>Personal Information: Name, address, contact details, and emergency contact information.</li> <li>Employment Details: Job title, department, date of hire, and employment status.</li> <li>Compensation Information: Salary, benefits, and allowances.</li> <li>Identification Documents: Copies of identification such as passport, driver's license, or social security number.</li> <li>Educational and Professional Background: Details of academic qualifications and previous work experience.</li> </ul> <p>Process:</p> <ul> <li>HR administrators or employees complete the Employee Information Form during the onboarding process.</li> <li>The form is regularly updated to reflect changes in employee details.</li> <li>It serves as a comprehensive record for HR management and compliance purposes.</li> </ul>"},{"location":"modules/employees/#job-offer-letter","title":"Job Offer Letter","text":"<p>A Job Offer Letter is a formal document issued by the employer to extend a job offer to a candidate, outlining terms and conditions of employment.</p> <p>Key Components:</p> <ul> <li>Position and Department: Details of the job title and department.</li> <li>Compensation: Salary, benefits, bonuses, and other forms of compensation.</li> <li>Start Date: The proposed date when the employee is expected to begin working.</li> <li>Employment Status: Information on whether the employment is full-time, part-time, or temporary.</li> <li>Terms and Conditions: Specific terms and conditions of employment, including probationary periods and termination clauses.</li> </ul> <p>Process:</p> <ul> <li>After the recruitment process, the employer generates a Job Offer Letter for the selected candidate.</li> <li>The candidate reviews and accepts the offer by signing the letter.</li> <li>The signed letter becomes a formal agreement between the employer and the employee.</li> </ul>"},{"location":"modules/employees/#employee-handbook","title":"Employee Handbook","text":"<p>An Employee Handbook is a comprehensive document that outlines the policies, procedures, and expectations for employees within an organization.</p> <p>Key Components:</p> <ul> <li>Introduction: Overview of the company's mission, values, and culture.</li> <li>Employment Policies: Guidelines on attendance, leave, dress code, and code of conduct.</li> <li>Benefits and Compensation: Information on employee benefits, insurance, and compensation structures.</li> <li>Employee Rights: Descriptions of rights and responsibilities of employees.</li> <li>Termination Procedures: Processes for resignation, termination, and exit interviews.</li> </ul> <p>Process:</p> <ul> <li>The Employee Handbook is distributed to all employees during the onboarding process.</li> <li>It serves as a reference guide for employees to understand organizational policies and procedures.</li> <li>Periodic updates may be made to the handbook to reflect changes in policies or regulations.</li> </ul>"},{"location":"modules/employees/#performance-appraisal-form","title":"Performance Appraisal Form","text":"<p>A Performance Appraisal Form is used to assess an employee's performance, providing a basis for feedback, goal-setting, and career development.</p> <p>Key Components:</p> <ul> <li>Employee Details: Name, job title, and department.</li> <li>Performance Goals: Goals set for the employee and progress made toward achieving them.</li> <li>Strengths and Areas for Improvement: Evaluation of the employee's strengths and areas that need improvement.</li> <li>Overall Performance Rating: A summary rating indicating the employee's overall performance.</li> <li>Feedback and Development Plan: Feedback from supervisors and a plan for the employee's professional development.</li> </ul> <p>Process:</p> <ul> <li>Performance appraisals are conducted periodically, usually annually or semi-annually.</li> <li>Supervisors and employees discuss performance, set goals, and identify areas for improvement.</li> <li>The form serves as a record of the appraisal, contributing to career development and performance improvement plans.</li> </ul>"},{"location":"modules/employees/#leave-request-form","title":"Leave Request Form","text":"<p>A Leave Request Form is used by employees to request time off from work for various reasons, including vacation, sick leave, or personal reasons.</p> <p>Key Components:</p> <ul> <li>Employee Information: Name, department, and job title.</li> <li>Type of Leave: Vacation, sick leave, personal leave, or other types.</li> <li>Dates of Leave: Start and end dates for the requested leave period.</li> <li>Reason for Leave: A brief explanation of the reason for the leave.</li> <li>Supervisor Approval: Section for supervisor or manager approval.</li> </ul> <p>Process:</p> <ul> <li>Employees submit Leave Request Forms in advance of the planned leave.</li> <li>Supervisors review and approve or deny the leave requests based on organizational policies and workload considerations.</li> <li>The approved leave requests are then recorded in the employee's records.</li> </ul> <p>These documents collectively form the basis of HR management, supporting various aspects of the employee lifecycle from recruitment and onboarding to performance management and compliance. They contribute to efficient HR processes, communication, and adherence to organizational policies and regulations.</p>"},{"location":"modules/hotels/","title":"Hotels","text":""},{"location":"modules/hotels/#reservation-confirmation","title":"Reservation Confirmation","text":"<p>A Reservation Confirmation is a document sent to guests to confirm the details of their reservation, including check-in and check-out dates, room type, and any special requests.</p> <p>Key Components:</p> <ul> <li>Guest Information: Name, contact details, and reservation ID.</li> <li>Reservation Details: Check-in and check-out dates, room type, and any additional services requested.</li> <li>Cancellation Policy: Information on the hotel's cancellation policy.</li> <li>Confirmation Number: A unique identifier for the reservation.</li> </ul> <p>Process:</p> <ul> <li>Guests receive the Reservation Confirmation after booking a room.</li> <li>The document serves as proof of the reservation and provides important information for guests.</li> </ul>"},{"location":"modules/hotels/#check-in-form","title":"Check-In Form","text":"<p>A Check-In Form is used to collect essential information from guests during the check-in process. It includes details such as identification, contact information, and payment details.</p> <p>Key Components:</p> <ul> <li>Guest Information: Name, address, contact number, and identification details.</li> <li>Reservation Details: Confirmation number, check-in and check-out dates, and room type.</li> <li>Payment Information: Credit card details or payment method.</li> <li>Special Requests: Any additional requests or preferences from the guest.</li> </ul> <p>Process:</p> <ul> <li>Guests fill out the Check-In Form upon arrival at the hotel.</li> <li>The form helps in recording guest information for check-in procedures and ensures a smooth arrival experience.</li> </ul>"},{"location":"modules/hotels/#room-service-order","title":"Room Service Order","text":"<p>A Room Service Order is used by guests to request food, beverages, or other services to be delivered to their room.</p> <p>Key Components:</p> <ul> <li>Guest Information: Name, room number, and contact details.</li> <li>Order Details: Items requested, quantity, and any specific instructions.</li> <li>Delivery Time: Preferred time for the delivery.</li> <li>Total Cost: Estimated or final cost of the ordered items.</li> </ul> <p>Process:</p> <ul> <li>Guests fill out the Room Service Order form to request in-room services.</li> <li>The order is processed by hotel staff, and the requested items are delivered to the guest's room.</li> </ul>"},{"location":"modules/hotels/#check-out-invoice","title":"Check-Out Invoice","text":"<p>A Check-Out Invoice is a document provided to guests during the check-out process, summarizing the charges incurred during their stay.</p> <p>Key Components:</p> <ul> <li>Guest Information: Name, room number, and contact details.</li> <li>Charges: Breakdown of charges for room, additional services, and any applicable taxes.</li> <li>Payment Details: Total amount due and payment options.</li> <li>Receipt: Confirmation of payment received.</li> </ul> <p>Process:</p> <ul> <li>Guests receive the Check-Out Invoice when settling their account during check-out.</li> <li>The document provides a transparent overview of charges, facilitating a smooth check-out process.</li> </ul>"},{"location":"modules/hotels/#housekeeping-report","title":"Housekeeping Report","text":"<p>A Housekeeping Report is used by the housekeeping staff to manage the cleaning and maintenance of rooms. It includes details about room status, housekeeping tasks, and any issues found.</p> <p>Key Components:</p> <ul> <li>Room Status: Cleaned, occupied, vacant, or under maintenance.</li> <li>Housekeeping Tasks: Checklist of tasks to be performed in each room.</li> <li>Issues or Repairs: Notes about any maintenance issues or repairs needed.</li> <li>Housekeeper's Details: Staff member responsible for cleaning the room.</li> </ul> <p>Process:</p> <ul> <li>Housekeeping staff use the report to organize their tasks and prioritize room cleaning.</li> <li>The report helps in maintaining a high standard of cleanliness and identifying maintenance needs.</li> </ul>"},{"location":"modules/hotels/#guest-feedback-form","title":"Guest Feedback Form","text":"<p>A Guest Feedback Form is provided to guests to gather their opinions and suggestions about their stay, helping hotels improve their services.</p> <p>Key Components:</p> <ul> <li>Overall Satisfaction: Rating or feedback on the overall experience.</li> <li>Room Comfort: Feedback on the quality of the room, amenities, and cleanliness.</li> <li>Service Quality: Evaluation of staff courtesy, responsiveness, and helpfulness.</li> <li>Suggestions: Space for guests to provide suggestions for improvement.</li> </ul> <p>Process:</p> <ul> <li>Guests are encouraged to fill out the Guest Feedback Form during or after their stay.</li> <li>The feedback helps hotels assess guest satisfaction and make improvements where needed.</li> </ul>"},{"location":"modules/hotels/#event-booking-confirmation","title":"Event Booking Confirmation","text":"<p>An Event Booking Confirmation is sent to clients or guests who book event spaces within the hotel, confirming the details of the event reservation.</p> <p>Key Components:</p> <ul> <li>Client Information: Name, organization, and contact details.</li> <li>Event Details: Date, time, and location of the event.</li> <li>Reserved Spaces: Information about the booked rooms, halls, or venues.</li> <li>Cost and Payment Details: Breakdown of charges and payment information.</li> </ul> <p>Process:</p> <ul> <li>Clients receive the Event Booking Confirmation upon successfully booking event spaces.</li> <li>The document serves as confirmation and provides important details for the upcoming event.</li> </ul> <p>These documents collectively contribute to the effective management of hotel operations, ensuring a positive guest experience, efficient service delivery, and accurate record-keeping.</p>"},{"location":"modules/manufactoring/","title":"Manufacturing","text":""},{"location":"modules/manufactoring/#bill-of-materials-bom","title":"Bill of Materials (BOM)","text":"<p>A Bill of Materials (BOM) is a comprehensive list that outlines the materials, components, and sub-assemblies required to manufacture a finished product.</p> <p>Key Components:</p> <ul> <li>Product Structure: Hierarchy of components and sub-assemblies.</li> <li>Materials and Quantities: List of raw materials, parts, and quantities needed for each level of assembly.</li> <li>Unit of Measure: Measurement units for each material or component.</li> <li>Reference Designators: Identification of specific components on the product.</li> </ul> <p>Process:</p> <ul> <li>The BOM is created during the product design phase.</li> <li>It serves as a reference for procurement, production planning, and inventory management.</li> </ul>"},{"location":"modules/manufactoring/#work-order","title":"Work Order","text":"<p>A Work Order is a document that provides detailed instructions for the production of a specific quantity of a product. It includes information about scheduling, resources, and production timelines.</p> <p>Key Components:</p> <ul> <li>Product Details: Name, code, and description of the product being manufactured.</li> <li>Quantity to Produce: The number of units to be produced.</li> <li>Bill of Materials Reference: Reference to the BOM for the product.</li> <li>Work Instructions: Step-by-step instructions for the production process.</li> <li>Due Date: The deadline for completing the production.</li> </ul> <p>Process:</p> <ul> <li>Work Orders are generated based on sales orders or demand forecasts.</li> <li>They guide the production team through the manufacturing process and help in resource allocation.</li> </ul>"},{"location":"modules/manufactoring/#routing-sheet","title":"Routing Sheet","text":"<p>A Routing Sheet, also known as a Routing Card, provides detailed information about the sequence of operations and work centers involved in the manufacturing process.</p> <p>Key Components:</p> <ul> <li>Operation Sequence: Step-by-step sequence of operations in the manufacturing process.</li> <li>Work Center Details: Information about the work centers or machines involved in each operation.</li> <li>Setup and Run Times: Time estimates for setting up and running each operation.</li> <li>Tooling and Equipment: Details about tools and equipment needed for each operation.</li> </ul> <p>Process:</p> <ul> <li>Routing Sheets are created during the production planning phase.</li> <li>They guide operators through the production process, helping in efficient scheduling and resource utilization.</li> </ul>"},{"location":"modules/manufactoring/#material-requisition-form","title":"Material Requisition Form","text":"<p>A Material Requisition Form is used to request the procurement of materials needed for the manufacturing process. It helps in maintaining an accurate inventory and ensuring timely availability of materials.</p> <p>Key Components:</p> <ul> <li>Material Details: Name, code, and description of the required materials.</li> <li>Quantity Needed: The quantity of each material required for production.</li> <li>Date Needed: Deadline for when the materials are required.</li> <li>Work Order Reference: Reference to the specific work order or production job.</li> </ul> <p>Process:</p> <ul> <li>Material Requisition Forms are generated based on the materials listed in the BOM.</li> <li>They are used to initiate the procurement process and ensure that materials are available when needed.</li> </ul>"},{"location":"modules/manufactoring/#quality-inspection-report","title":"Quality Inspection Report","text":"<p>A Quality Inspection Report documents the results of quality control checks conducted during and after the manufacturing process. It ensures that products meet specified quality standards.</p> <p>Key Components:</p> <ul> <li>Product Identification: Details about the product being inspected.</li> <li>Inspection Criteria: Specifications and standards for quality.</li> <li>Inspection Results: Pass/fail status for each quality checkpoint.</li> <li>Inspector Details: Information about the person conducting the inspection.</li> </ul> <p>Process:</p> <ul> <li>Quality Inspection Reports are generated during and after production.</li> <li>They are used to identify and address any quality issues, ensuring that only products meeting standards are released.</li> </ul>"},{"location":"modules/manufactoring/#production-log","title":"Production Log","text":"<p>A Production Log serves as a chronological record of production activities. It provides insights into productivity, downtime, and other key performance indicators.</p> <p>Key Components:</p> <ul> <li>Date and Time: Timestamps for each production activity.</li> <li>Work Order Reference: Reference to the specific work order or production job.</li> <li>Quantity Produced: Number of units produced at each stage.</li> <li>Machine or Work Center Details: Information about the machines or work centers used.</li> </ul> <p>Process:</p> <ul> <li>Production Logs are updated in real-time as manufacturing activities occur.</li> <li>They serve as a historical record for analyzing production efficiency and identifying opportunities for improvement.</li> </ul>"},{"location":"modules/manufactoring/#inventory-adjustment-form","title":"Inventory Adjustment Form","text":"<p>An Inventory Adjustment Form is used to record changes in inventory levels due to factors such as production, wastage, or discrepancies. It helps maintain accurate inventory records.</p> <p>Key Components:</p> <ul> <li>Product Details: Name, code, and description of the product.</li> <li>Adjustment Type: Indication of whether it's an increase or decrease in inventory.</li> <li>Quantity Adjusted: The quantity by which the inventory is being adjusted.</li> <li>Reason for Adjustment: Explanation of the reason for the adjustment.</li> </ul> <p>Process:</p> <ul> <li>Inventory Adjustment Forms are used to update inventory levels based on actual production and consumption.</li> <li>They help in reconciling physical inventory with system records.</li> </ul> <p>These documents collectively support the manufacturing process, from planning and procurement to production and quality control. They ensure the efficient and accurate production of goods while maintaining quality standards and inventory integrity.</p>"},{"location":"modules/master-data/","title":"Master Data","text":""},{"location":"modules/master-data/#customer","title":"Customer:","text":"<ul> <li>Description: Represents individual or organizational customers with whom the company engages in business transactions.</li> <li>Attributes: Name, address, contact details, credit terms, payment terms, and customer-specific identifiers.</li> </ul>"},{"location":"modules/master-data/#vendorsupplier","title":"Vendor/Supplier:","text":"<ul> <li>Description: Represents individuals or organizations from whom the company purchases goods or services.</li> <li>Attributes: Vendor name, address, contact details, payment terms, tax identification number, and vendor-specific identifiers.</li> </ul>"},{"location":"modules/master-data/#employee","title":"Employee:","text":"<ul> <li>Description: Represents individuals employed by the organization.</li> <li>Attributes: Employee name, contact details, job title, department, employee ID, and other employment-related information.</li> </ul>"},{"location":"modules/master-data/#product","title":"Product:","text":"<ul> <li>Description: Represents goods or services offered by the organization.</li> <li>Attributes: Product name, description, SKU (Stock Keeping Unit), price, unit of measure, and product-specific identifiers.</li> </ul>"},{"location":"modules/master-data/#material","title":"Material:","text":"<ul> <li>Description: Represents raw materials, components, or items used in the production process.</li> <li>Attributes: Material name, description, unit of measure, supplier details, and material-specific identifiers.</li> </ul>"},{"location":"modules/master-data/#chart-of-accounts","title":"Chart of Accounts:","text":"<ul> <li>Description: Represents the organization's financial structure, including accounts, categories, and hierarchies.</li> <li>Attributes: Account codes, account names, account types, and chart of accounts-specific details.</li> </ul>"},{"location":"modules/master-data/#asset","title":"Asset:","text":"<ul> <li>Description: Represents physical or intangible assets owned or controlled by the organization.</li> <li>Attributes: Asset name, description, acquisition date, depreciation method, and asset-specific details.</li> </ul>"},{"location":"modules/master-data/#locationsite","title":"Location/Site:","text":"<ul> <li>Description: Represents physical locations, facilities, or sites associated with the organization.</li> <li>Attributes: Location name, address, contact details, and location-specific identifiers.</li> </ul>"},{"location":"modules/master-data/#business-partner","title":"Business Partner:","text":"<ul> <li>Description: Represents individuals or entities with whom the organization has business relationships.</li> <li>Attributes: Partner name, type of partnership, contact details, and business partner-specific details.</li> </ul>"},{"location":"modules/master-data/#bank","title":"Bank:","text":"<ul> <li>Description: Represents financial institutions with which the organization has accounts.</li> <li>Attributes: Bank name, account details, contact information, and bank-specific identifiers.</li> </ul>"},{"location":"modules/master-data/#cost-center","title":"Cost Center:","text":"<ul> <li>Description: Represents organizational units or departments within the company for cost allocation.</li> <li>Attributes: Cost center name, manager, location, and cost center-specific details.</li> </ul>"},{"location":"modules/master-data/#profit-center","title":"Profit Center:","text":"<ul> <li>Description: Represents organizational units responsible for generating revenue and profit.</li> <li>Attributes: Profit center name, manager, location, and profit center-specific details.</li> </ul>"},{"location":"modules/master-data/#tax-jurisdiction","title":"Tax Jurisdiction:","text":"<ul> <li>Description: Represents geographic areas subject to specific tax regulations.</li> <li>Attributes: Jurisdiction name, tax rates, and tax jurisdiction-specific details.</li> </ul>"},{"location":"modules/master-data/#currency","title":"Currency:","text":"<ul> <li>Description: Represents the currency used for financial transactions within the organization.</li> <li>Attributes: Currency code, currency name, exchange rates, and currency-specific details.</li> </ul>"},{"location":"modules/master-data/#unit-of-measure","title":"Unit of Measure:","text":"<ul> <li>Description: Represents the standard units used to measure quantities of products or materials.</li> <li>Attributes: Unit name, abbreviation, conversion factors, and unit-specific details.</li> </ul> <p>These entities form the foundation of master data within the organization and are critical for ensuring consistency and accuracy in various business processes. Master data management involves maintaining the integrity and quality of these entities across the enterprise system to support operational and analytical functions. The specific entities and attributes may be customized based on the organization's structure, industry, and specific business requirements.</p>"},{"location":"modules/payments/","title":"Payments","text":""},{"location":"modules/payments/#invoice","title":"Invoice","text":"<p>An Invoice is a document issued by a seller to a buyer, indicating the products or services provided and the agreed-upon prices. It serves as a request for payment and a record of the sale.</p> <p>Key Components:</p> <ul> <li>Seller and Buyer Information: Details of both the selling organization and the customer.</li> <li>Invoice Number: A unique identifier for the invoice.</li> <li>Item Details: Description, quantity, specifications, unit prices, and total amounts for the products or services.</li> <li>Payment Terms: Conditions specifying when and how payment should be made.</li> <li>Tax Information: Applicable taxes, if any, and their amounts.</li> </ul> <p>Process:</p> <ul> <li>The Invoice is generated based on the goods delivered or services provided.</li> <li>It is sent to the customer, indicating the total amount due.</li> <li>The customer reviews the invoice and processes payment based on the provided terms.</li> </ul>"},{"location":"modules/payments/#payment-request","title":"Payment Request","text":"<p>A Payment Request is a document initiated by a payee (such as a vendor or service provider) to request payment from a payer (usually a customer or client).</p> <p>Key Components:</p> <ul> <li>Payee Information: Details of the individual or organization requesting payment.</li> <li>Invoice References: Information regarding the specific invoices or transactions for which payment is requested.</li> <li>Amount Due: The total amount owed, broken down by individual invoices or line items.</li> <li>Payment Method: The preferred method for receiving payment.</li> </ul> <p>Process:</p> <ul> <li>The payee generates a Payment Request, often attaching supporting documents such as invoices.</li> <li>The Payment Request is sent to the payer, who reviews the details.</li> <li>The payer processes the payment based on the provided information.</li> </ul>"},{"location":"modules/payments/#payment-confirmation","title":"Payment Confirmation","text":"<p>A Payment Confirmation is a document issued by the payer to confirm that a payment has been successfully made. It serves as a record of the completed transaction.</p> <p>Key Components:</p> <ul> <li>Payer Information: Details of the individual or organization making the payment.</li> <li>Payee Information: Details of the individual or organization receiving the payment.</li> <li>Payment Amount: The total amount paid.</li> <li>Transaction Reference: Information identifying the specific invoice or payment request.</li> <li>Payment Date: The date on which the payment was made.</li> </ul> <p>Process:</p> <ul> <li>The payer initiates and completes the payment process.</li> <li>A Payment Confirmation is generated and sent to the payee as proof of the successful payment.</li> <li>The Payment Confirmation may be used by both parties for reconciliation and record-keeping purposes.</li> </ul>"},{"location":"modules/payments/#receipt","title":"Receipt","text":"<p>A Receipt is a document issued by the payee (seller or service provider) to acknowledge the receipt of payment from the payer (customer or client). It serves as proof of payment.</p> <p>Key Components:</p> <ul> <li>Payee Information: Details of the individual or organization receiving the payment.</li> <li>Payer Information: Details of the individual or organization making the payment.</li> <li>Payment Amount: The total amount received.</li> <li>Payment Date: The date on which the payment was received.</li> <li>Transaction Reference: Information identifying the specific invoice or payment.</li> </ul> <p>Process:</p> <ul> <li>The payee receives the payment from the payer.</li> <li>A Receipt is generated and issued to the payer as confirmation of the payment.</li> <li>Both parties may retain a copy of the Receipt for record-keeping purposes.</li> </ul>"},{"location":"modules/payments/#refund-request","title":"Refund Request","text":"<p>A Refund Request is a document initiated by a payer to request a refund for a payment previously made. It provides details on the reason for the refund and the amount to be refunded.</p> <p>Key Components:</p> <ul> <li>Payer Information: Details of the individual or organization requesting the refund.</li> <li>Transaction Details: Information identifying the original payment, including transaction references.</li> <li>Reason for Refund: A clear explanation of why the refund is being requested.</li> <li>Refund Amount: The total amount to be refunded.</li> </ul> <p>Process:</p> <ul> <li>The payer identifies a valid reason for requesting a refund.</li> <li>A Refund Request is generated, outlining the necessary details.</li> <li>The payee reviews the request and processes the refund if deemed appropriate.</li> </ul> <p>These documents collectively form a structured set of paperwork for handling payments, ensuring transparency, accuracy, and proper financial management within an organization.</p>"},{"location":"modules/payroll/","title":"Payroll","text":""},{"location":"modules/payroll/#employee-time-sheets-or-attendance-records","title":"Employee Time Sheets or Attendance Records","text":"<p>Employee Time Sheets or Attendance Records are documents used to record the hours worked by employees during a specific pay period.</p> <p>Key Components:</p> <ul> <li>Employee Information: Name, employee ID, and department.</li> <li>Date and Time: Record of daily attendance, including start and end times.</li> <li>Leave and Absences: Information on any approved leave or absence during the pay period.</li> <li>Overtime Hours: If applicable, record of any overtime hours worked.</li> </ul> <p>Process:</p> <ul> <li>Employees submit time sheets or attendance records regularly, indicating their hours worked and any deviations from the regular schedule.</li> <li>This information serves as the foundation for calculating salaries, wages, and other forms of compensation.</li> </ul>"},{"location":"modules/payroll/#payroll-register","title":"Payroll Register","text":"<p>A Payroll Register is a detailed record of individual employee earnings and deductions for a specific pay period.</p> <p>Key Components:</p> <ul> <li>Employee Information: Names, employee IDs, and job titles.</li> <li>Earnings: Breakdown of gross earnings, including regular hours, overtime, bonuses, and commissions.</li> <li>Deductions: Details of deductions such as taxes, insurance, retirement contributions, and other withholdings.</li> <li>Net Pay: The final amount that employees will receive after deductions.</li> </ul> <p>Process:</p> <ul> <li>Payroll administrators use the information from time sheets and attendance records to generate the Payroll Register.</li> <li>The Payroll Register is a critical document for verifying the accuracy of calculations and ensuring compliance with applicable regulations.</li> </ul>"},{"location":"modules/payroll/#payslips","title":"Payslips","text":"<p>Payslips, also known as pay stubs, are documents provided to employees detailing their earnings and deductions for a specific pay period.</p> <p>Key Components:</p> <ul> <li>Employee Information: Name, employee ID, and address.</li> <li>Earnings: Breakdown of gross earnings, including regular and overtime pay.</li> <li>Deductions: Details of various deductions, such as taxes, insurance, and retirement contributions.</li> <li>Net Pay: The final amount that the employee will receive after deductions.</li> <li>Year-to-Date (YTD) Information: Cumulative earnings and deductions for the current calendar year.</li> </ul> <p>Process:</p> <ul> <li>Payslips are generated and distributed to employees along with their salary payments.</li> <li>They provide transparency regarding how the employee's pay is calculated and the specific deductions applied.</li> </ul>"},{"location":"modules/payroll/#tax-forms-eg-w-4-w-2-1099","title":"Tax Forms (e.g., W-4, W-2, 1099)","text":"<p>Tax forms are used to report employee earnings and withholdings to tax authorities. Different forms are used for various purposes, such as income reporting, tax withholding, and contractor payments.</p> <p>Key Components:</p> <ul> <li>W-4 (Employee's Withholding Certificate): Used by employees to determine the amount of federal income tax to be withheld from their pay.</li> <li>W-2 (Wage and Tax Statement): Issued by employers to report annual earnings, taxes withheld, and other relevant information for employees.</li> <li>1099 (Miscellaneous Income): Issued to independent contractors, freelancers, or other non-employees who received payments for services.</li> </ul> <p>Process:</p> <ul> <li>Employees fill out W-4 forms when they join the organization to determine tax withholding.</li> <li>Employers generate and distribute W-2 forms to employees at the end of the calendar year.</li> <li>1099 forms are issued to contractors and freelancers to report income.</li> </ul>"},{"location":"modules/payroll/#direct-deposit-authorization-form","title":"Direct Deposit Authorization Form","text":"<p>A Direct Deposit Authorization Form is used by employees to provide information required for the direct deposit of their salary into their bank accounts.</p> <p>Key Components:</p> <ul> <li>Employee Information: Name, employee ID, and bank details.</li> <li>Bank Information: Bank name, account number, and routing number.</li> <li>Authorization: Employee's consent for the employer to deposit their salary directly into the specified bank account.</li> </ul> <p>Process:</p> <ul> <li>Employees submit the Direct Deposit Authorization Form to enroll in the direct deposit program.</li> <li>Employers use the provided information to transfer funds directly to employees' bank accounts on payday.</li> </ul>"},{"location":"modules/payroll/#garnishment-notices","title":"Garnishment Notices","text":"<p>Garnishment Notices are documents served to employers by legal authorities, instructing them to withhold a portion of an employee's wages to satisfy a debt or legal obligation.</p> <p>Key Components:</p> <ul> <li>Court Order Information: Details of the court order or legal authority requiring wage garnishment.</li> <li>Employee Information: Name, employee ID, and specific details about the debt or obligation.</li> <li>Garnishment Amount: The specific amount or percentage to be withheld from the employee's wages.</li> </ul> <p>Process:</p> <ul> <li>Employers receive Garnishment Notices and must comply with the specified wage withholding.</li> <li>The withheld amount is remitted to the appropriate legal authority to satisfy the debt.</li> </ul> <p>These documents collectively support the payroll process, ensuring accurate and compliant payment of employees while adhering to tax regulations and legal requirements.</p>"},{"location":"modules/projects/","title":"Projects","text":""},{"location":"modules/projects/#project-proposal","title":"Project Proposal","text":"<p>A Project Proposal is a formal document submitted to a client or internal stakeholders outlining the details of a proposed project. It includes project objectives, scope, deliverables, timeline, and estimated costs.</p> <p>Key Components:</p> <ul> <li>Project Title and Description: Clearly defines the purpose and goals of the proposed project.</li> <li>Scope of Work: Outlines the specific tasks, activities, and deliverables.</li> <li>Timeline: Proposed project schedule and milestones.</li> <li>Resource Requirements: Identifies the personnel, equipment, and materials needed.</li> <li>Cost Estimates: Provides an estimate of the overall project budget.</li> </ul> <p>Process:</p> <ul> <li>The project team or service provider creates a Project Proposal in response to a client's request or an identified need.</li> <li>The Proposal is submitted to the client for review and approval.</li> <li>Upon approval, the Project Proposal serves as the foundation for project initiation.</li> </ul>"},{"location":"modules/projects/#project-plan","title":"Project Plan","text":"<p>A Project Plan is a comprehensive document that outlines the detailed tasks, activities, timelines, and resources required to complete a project successfully.</p> <p>Key Components:</p> <ul> <li>Task Breakdown: A detailed breakdown of all tasks and activities involved in the project.</li> <li>Milestones: Key points in the project timeline indicating significant achievements.</li> <li>Timeline: A Gantt chart or timeline displaying task dependencies and project duration.</li> <li>Resource Allocation: Identification of personnel, equipment, and materials assigned to each task.</li> <li>Risk Management: Assessment of potential risks and strategies for mitigation.</li> </ul> <p>Process:</p> <ul> <li>The Project Plan is developed based on the approved Project Proposal.</li> <li>It serves as a roadmap for the project team, guiding the execution and monitoring of tasks.</li> <li>Regular updates to the Project Plan are made to track progress and adjust timelines as needed.</li> </ul>"},{"location":"modules/projects/#project-budget","title":"Project Budget","text":"<p>A Project Budget outlines the financial aspects of a project, including estimated costs, funding sources, and allocation of resources.</p> <p>Key Components:</p> <ul> <li>Estimated Costs: A detailed breakdown of expenses related to personnel, materials, equipment, and overhead.</li> <li>Funding Sources: Identifies the sources of funding for the project, including client payments or internal budgets.</li> <li>Budget Allocation: Specifies how funds are distributed across different project components or phases.</li> <li>Contingency: Reserves for unforeseen expenses or scope changes.</li> </ul> <p>Process:</p> <ul> <li>The Project Budget is developed in conjunction with the Project Plan.</li> <li>It provides financial oversight and helps ensure that the project stays within budget constraints.</li> <li>Regular monitoring and updates are performed to track actual expenses against the budget.</li> </ul>"},{"location":"modules/projects/#project-status-report","title":"Project Status Report","text":"<p>A Project Status Report provides a snapshot of the project's current state, including progress, challenges, and upcoming milestones.</p> <p>Key Components:</p> <ul> <li>Project Progress: Overview of completed tasks and activities.</li> <li>Issues and Challenges: Identification of any roadblocks or challenges encountered.</li> <li>Upcoming Milestones: Anticipation of key project milestones.</li> <li>Resource Utilization: Assessment of how resources are being utilized.</li> <li>Budget Status: A summary of financial aspects, comparing actual expenses to the budget.</li> </ul> <p>Process:</p> <ul> <li>Project teams regularly generate and share Project Status Reports.</li> <li>Stakeholders, including clients and project managers, use the report to stay informed about project progress.</li> <li>It facilitates communication and decision-making to address any issues promptly.</li> </ul>"},{"location":"modules/projects/#project-closure-report","title":"Project Closure Report","text":"<p>A Project Closure Report is prepared at the conclusion of a project. It summarizes the outcomes, lessons learned, and provides closure to the project.</p> <p>Key Components:</p> <ul> <li>Project Achievements: Highlights the successful completion of project objectives.</li> <li>Lessons Learned: Reflection on what worked well and areas for improvement in future projects.</li> <li>Client Feedback: Captures client feedback and satisfaction.</li> <li>Final Budget vs. Actuals: A comparison of the initial budget with the actual expenses.</li> <li>Recommendations: Suggestions for improvements or future actions.</li> </ul> <p>Process:</p> <ul> <li>The Project Closure Report is created as the project concludes.</li> <li>It is shared with stakeholders and provides insights for continuous improvement in future projects.</li> <li>Closure reports may be archived for reference in similar projects.</li> </ul> <p>These documents collectively contribute to the planning, execution, monitoring, and closure of projects in the Services Industry, ensuring transparency, communication, and effective management of resources and timelines.</p>"},{"location":"modules/restaurants/","title":"Restaurants","text":""},{"location":"modules/restaurants/#menu","title":"Menu","text":"<p>A Menu is a comprehensive list of food and beverage items offered by the restaurant, along with their prices. It serves as a guide for customers to make informed choices.</p> <p>Key Components:</p> <ul> <li>Food Items: Detailed descriptions of dishes, including ingredients and preparation methods.</li> <li>Beverages: Lists of available drinks, including non-alcoholic and alcoholic options.</li> <li>Prices: The cost of each item.</li> <li>Specials or Promotions: Any featured dishes or discounted offerings.</li> </ul> <p>Process:</p> <ul> <li>Menus are regularly updated to reflect seasonal changes, new offerings, or promotions.</li> <li>They are provided to customers for browsing and ordering.</li> </ul>"},{"location":"modules/restaurants/#order-ticket","title":"Order Ticket","text":"<p>An Order Ticket, also known as a Kitchen Ticket, is generated when a customer places an order. It contains details about the items ordered and any special instructions.</p> <p>Key Components:</p> <ul> <li>Table Number: Identification of the table or location of the ordering customer.</li> <li>Ordered Items: List of food and beverage items requested.</li> <li>Modifiers: Any customizations or special requests related to the order.</li> <li>Order Time: Timestamp of when the order was placed.</li> </ul> <p>Process:</p> <ul> <li>Order Tickets are generated by the point-of-sale (POS) system when a waiter takes an order.</li> <li>They are sent to the kitchen or bar for preparation.</li> </ul>"},{"location":"modules/restaurants/#sales-receipt","title":"Sales Receipt","text":"<p>A Sales Receipt is provided to customers upon payment, summarizing the items ordered, their prices, and the total amount due.</p> <p>Key Components:</p> <ul> <li>Ordered Items: List of food and beverage items.</li> <li>Prices: Individual prices and total cost.</li> <li>Tax Details: Breakdown of applicable taxes.</li> <li>Payment Method: Indication of how the customer paid.</li> <li>Transaction ID: Unique identifier for the sale.</li> </ul> <p>Process:</p> <ul> <li>Sales Receipts are generated by the POS system when a payment is processed.</li> <li>They serve as proof of purchase and provide customers with a summary of their order.</li> </ul>"},{"location":"modules/restaurants/#reservation-book","title":"Reservation Book","text":"<p>A Reservation Book is used to manage and track table reservations. It includes details about reservation times, guest names, and special requests.</p> <p>Key Components:</p> <ul> <li>Reservation Time: Time and date of the reserved table.</li> <li>Guest Name: Name of the person or group making the reservation.</li> <li>Table Number: Designation of the reserved table.</li> <li>Contact Details: Phone number or email for reservation confirmation.</li> </ul> <p>Process:</p> <ul> <li>Restaurant staff use the Reservation Book to manage table availability and plan for peak times.</li> <li>The book helps ensure that reservations are honored and tables are efficiently allocated.</li> </ul>"},{"location":"modules/restaurants/#inventory-requisition-form","title":"Inventory Requisition Form","text":"<p>An Inventory Requisition Form is used to request replenishment of stock for food and beverage items. It helps in maintaining optimal inventory levels.</p> <p>Key Components:</p> <ul> <li>Item Details: Names and codes of the items needing restocking.</li> <li>Quantity Needed: The quantity requested for replenishment.</li> <li>Reason for Requisition: Explanation of why the items are needed.</li> <li>Approval Section: Space for managerial approval.</li> </ul> <p>Process:</p> <ul> <li>Staff use Inventory Requisition Forms to communicate inventory needs to the management.</li> <li>The form helps in efficient inventory management and prevents stockouts.</li> </ul>"},{"location":"modules/restaurants/#shift-report","title":"Shift Report","text":"<p>A Shift Report is a summary of activities and transactions that occurred during a specific shift. It provides insights into sales, customer counts, and any notable events.</p> <p>Key Components:</p> <ul> <li>Sales Summary: Total sales, including food, beverages, and other items.</li> <li>Customer Counts: Number of customers served during the shift.</li> <li>Staff Attendance: Information on staff members present during the shift.</li> <li>Notable Incidents: Any significant events or issues that occurred.</li> </ul> <p>Process:</p> <ul> <li>Shift Reports are generated at the end of each shift to provide management with an overview of performance.</li> <li>They assist in analyzing sales trends, identifying areas for improvement, and maintaining transparency in daily operations.</li> </ul>"},{"location":"modules/restaurants/#employee-schedule","title":"Employee Schedule","text":"<p>An Employee Schedule outlines the work shifts and responsibilities of restaurant staff. It helps in managing staffing levels and ensuring coverage during peak hours.</p> <p>Key Components:</p> <ul> <li>Shift Details: Time and date of each employee's scheduled shifts.</li> <li>Roles and Responsibilities: Designation of specific tasks or positions for each employee.</li> <li>Breaks: Scheduled break times for each employee.</li> <li>Managerial Approvals: Confirmation of the schedule by management.</li> </ul> <p>Process:</p> <ul> <li>Employee Schedules are created in advance, taking into account business needs and employee availability.</li> <li>They help in efficient staff management, ensuring that the right number of employees are present during busy periods.</li> </ul>"},{"location":"modules/restaurants/#waste-log","title":"Waste Log","text":"<p>A Waste Log is used to record and track any food or beverage items that are discarded due to spoilage, expiration, or other reasons.</p> <p>Key Components:</p> <ul> <li>Item Details: Names and quantities of wasted items.</li> <li>Reason for Waste: Explanation of why the items were discarded.</li> <li>Date and Time: Timestamp of when the waste occurred.</li> <li>Managerial Approval: Confirmation of waste disposal.</li> </ul> <p>Process:</p> <ul> <li>Staff use the Waste Log to document instances of discarded items.</li> <li>The log helps in identifying trends, reducing waste, and improving inventory management.</li> </ul> <p>These documents collectively contribute to the effective management of restaurant operations, ensuring a positive customer experience, accurate financial tracking, and streamlined processes.</p>"},{"location":"modules/salaries/","title":"Salaries","text":""},{"location":"modules/salaries/#salary-structure-document","title":"Salary Structure Document","text":"<p>A Salary Structure Document outlines the framework and components of the salary system within an organization. It defines the various elements that contribute to an employee's total compensation.</p> <p>Key Components:</p> <ul> <li>Base Salary: The fixed amount paid to an employee as their regular compensation.</li> <li>Bonuses and Incentives: Additional payments based on performance, achievements, or other criteria.</li> <li>Allowances: Additional amounts provided for specific purposes, such as housing, transportation, or meals.</li> <li>Deductions: Any mandatory deductions, such as taxes, insurance, or retirement contributions.</li> <li>Benefits: Non-monetary compensation, including health insurance, retirement plans, and other perks.</li> </ul> <p>Process:</p> <ul> <li>HR or compensation teams define the Salary Structure Document based on organizational policies and industry standards.</li> <li>The document serves as a reference for determining the components of an employee's total compensation.</li> </ul>"},{"location":"modules/salaries/#salary-adjustment-request","title":"Salary Adjustment Request","text":"<p>A Salary Adjustment Request is a formal document submitted by employees or managers to propose changes to an employee's compensation. This could include requests for salary increases, promotions, or adjustments based on changes in responsibilities.</p> <p>Key Components:</p> <ul> <li>Employee Information: Name, employee ID, and current position.</li> <li>Reason for Adjustment: Explanation of the circumstances or justifications for the proposed salary change.</li> <li>Requested Salary: The desired or proposed new salary.</li> <li>Supporting Documentation: Any documents or data supporting the need for the salary adjustment.</li> </ul> <p>Process:</p> <ul> <li>Employees or managers submit Salary Adjustment Requests when they believe a change in compensation is warranted.</li> <li>HR or relevant authorities review the request, considering factors such as performance, market rates, and budget constraints.</li> <li>If approved, the new salary is implemented, and the employee is notified.</li> </ul>"},{"location":"modules/salaries/#salary-slip","title":"Salary Slip","text":"<p>A Salary Slip, also known as a pay stub or payslip, is a document provided to employees detailing the breakdown of their salary for a specific pay period.</p> <p>Key Components:</p> <ul> <li>Employee Information: Name, employee ID, and designation.</li> <li>Earnings: Breakdown of gross earnings, including basic salary, bonuses, and overtime pay.</li> <li>Deductions: Details of deductions such as taxes, insurance, and other withholdings.</li> <li>Net Pay: The final amount that the employee will receive after deductions.</li> <li>Year-to-Date (YTD) Information: Cumulative earnings and deductions for the current fiscal year.</li> </ul> <p>Process:</p> <ul> <li>Salary Slips are generated for each employee during the payroll process.</li> <li>They are distributed electronically or in printed form and provide employees with a transparent view of their compensation.</li> </ul>"},{"location":"modules/salaries/#salary-review-report","title":"Salary Review Report","text":"<p>A Salary Review Report is a document generated by HR or compensation teams to assess and analyze the overall salary structure within the organization. It may include insights into salary trends, market competitiveness, and recommendations for adjustments.</p> <p>Key Components:</p> <ul> <li>Salary Trends: Analysis of salary trends within the organization over a specific period.</li> <li>Market Comparison: Comparison of the organization's salary structure with industry benchmarks.</li> <li>Budget Considerations: Evaluation of the financial implications of potential salary adjustments.</li> <li>Recommendations: Suggestions for salary changes, bonuses, or incentives based on the analysis.</li> </ul> <p>Process:</p> <ul> <li>HR or compensation teams regularly conduct salary reviews to ensure competitiveness in the job market.</li> <li>The Salary Review Report helps in making informed decisions about adjusting the salary structure.</li> </ul>"},{"location":"modules/salaries/#salary-increment-letter","title":"Salary Increment Letter","text":"<p>A Salary Increment Letter is a formal document issued by the employer to communicate to an employee that their salary will be increased. It outlines the details of the salary increment, effective date, and any other relevant information.</p> <p>Key Components:</p> <ul> <li>Employee Information: Name, employee ID, and current position.</li> <li>Current Salary: The employee's existing salary before the increment.</li> <li>New Salary: The revised or incremented salary.</li> <li>Effective Date: The date when the new salary will be applicable.</li> <li>Appreciation Message: Expressing appreciation for the employee's contributions.</li> </ul> <p>Process:</p> <ul> <li>After a salary adjustment is approved, the employer issues a Salary Increment Letter to notify the employee.</li> <li>The letter serves as a formal record of the salary increment and provides clarity on the new terms.</li> </ul>"},{"location":"modules/salaries/#salary-survey-data","title":"Salary Survey Data","text":"<p>Salary Survey Data consists of information collected from external salary surveys or market research to benchmark an organization's salary structure against industry standards.</p> <p>Key Components:</p> <ul> <li>Job Roles and Descriptions: Details of various job roles within the organization.</li> <li>Salary Ranges: Information on the salary ranges for different job levels or positions.</li> <li>Market Averages: Average salaries for specific job roles within the industry.</li> <li>Benefits Comparison: Comparative data on benefits and allowances.</li> </ul> <p>Process:</p> <ul> <li>HR or compensation teams periodically conduct salary surveys to stay informed about market trends.</li> <li>The collected data helps in ensuring that the organization's salaries remain competitive.</li> </ul> <p>These documents collectively contribute to the effective management of salaries within an organization, covering aspects such as structure, adjustments, communication, and market competitiveness.</p>"},{"location":"modules/services/","title":"Services","text":""},{"location":"modules/services/#service-request","title":"Service Request","text":"<p>A Service Request is a document initiated by a customer or internal department to request specific services. It outlines the details of the requested services, such as scope, timeframe, and any other relevant information.</p> <p>Key Components:</p> <ul> <li>Requester Information: Details of the individual or department making the service request.</li> <li>Service Details: Description of the requested services, including scope and specifications.</li> <li>Priority Level: Indicates the urgency or priority assigned to the service request.</li> <li>Requested Date: The preferred date or timeframe for the service to be delivered.</li> </ul> <p>Process:</p> <ul> <li>The customer or internal department identifies the need for specific services.</li> <li>A Service Request is generated to formalize the request.</li> <li>The service management team reviews and prioritizes the requests.</li> </ul>"},{"location":"modules/services/#service-agreementcontract","title":"Service Agreement/Contract","text":"<p>A Service Agreement or Contract is a formal document that outlines the terms and conditions governing the provision of services. It serves as a legal agreement between the service provider and the customer.</p> <p>Key Components:</p> <ul> <li>Parties Involved: Details of the service provider and the customer.</li> <li>Scope of Services: Description of the services to be provided, including deliverables, milestones, and timelines.</li> <li>Service Fees: The agreed-upon compensation for the services rendered.</li> <li>Terms and Conditions: Legal and contractual terms governing the service agreement.</li> <li>Duration of Agreement: The period during which the services will be provided.</li> </ul> <p>Process:</p> <ul> <li>Negotiations take place between the service provider and the customer.</li> <li>Once terms are agreed upon, a Service Agreement is drafted and signed by both parties.</li> <li>The Service Agreement serves as a reference throughout the service engagement.</li> </ul>"},{"location":"modules/services/#service-orderwork-order","title":"Service Order/Work Order","text":"<p>A Service Order or Work Order is a document that authorizes the initiation of specific services. It includes details such as the scope of work, resources required, and expected completion date.</p> <p>Key Components:</p> <ul> <li>Order Number: A unique identifier for the service order.</li> <li>Service Details: Description of the services to be provided, including specific tasks or deliverables.</li> <li>Resources Assigned: Information about the personnel, equipment, or materials assigned to complete the service.</li> <li>Start and End Dates: The scheduled start and completion dates for the service.</li> </ul> <p>Process:</p> <ul> <li>Based on the approved Service Request, a Service Order is generated to authorize the commencement of services.</li> <li>The service team uses the Service Order as a guide to execute the specified tasks.</li> <li>Upon completion, the Service Order may be used for verification and invoicing purposes.</li> </ul>"},{"location":"modules/services/#service-report","title":"Service Report","text":"<p>A Service Report is a document that summarizes the details of services provided. It may include information on the tasks performed, resources utilized, and any additional notes or recommendations.</p> <p>Key Components:</p> <ul> <li>Service Date: The date on which the services were provided.</li> <li>Tasks Performed: A detailed description of the services rendered, including any challenges encountered and solutions implemented.</li> <li>Resources Used: Information about personnel, equipment, or materials utilized during the service.</li> <li>Customer Acknowledgment: A section for the customer to acknowledge the completion of the services.</li> </ul> <p>Process:</p> <ul> <li>After completing the services, the service team generates a Service Report.</li> <li>The report may be shared with the customer for verification and acknowledgment.</li> <li>The Service Report serves as documentation of the completed services and can be archived for future reference.</li> </ul>"},{"location":"modules/services/#service-invoice","title":"Service Invoice","text":"<p>A Service Invoice is a document issued by the service provider to request payment for the services rendered. It outlines the details of the services, fees, and payment terms.</p> <p>Key Components:</p> <ul> <li>Service Provider and Customer Information: Details of both parties involved.</li> <li>Invoice Number: A unique identifier for the invoice.</li> <li>Service Details: Description of the services provided, including quantities, rates, and total amounts.</li> <li>Service Fees: The total amount payable for the services.</li> <li>Payment Terms: Conditions specifying when and how payment should be made.</li> </ul> <p>Process:</p> <ul> <li>The service provider generates a Service Invoice based on the completed services.</li> <li>The Service Invoice is sent to the customer for payment.</li> <li>The customer reviews the invoice and processes payment based on the provided terms.</li> </ul> <p>These documents collectively facilitate the planning, execution, and documentation of service-related activities, ensuring efficient service delivery and effective financial management.</p>"},{"location":"modules/shipping/","title":"Shipping","text":""},{"location":"modules/shipping/#shipping-order","title":"Shipping Order","text":"<p>A Shipping Order is a document that authorizes the shipment of goods from the seller to the buyer. It provides instructions to the logistics or warehouse team regarding the items to be shipped, their quantities, and the destination.</p> <p>Key Components:</p> <ul> <li>Shipping Order Number: A unique identifier for the shipping order.</li> <li>Shipper Information: Details of the organization or individual shipping the goods.</li> <li>Consignee Information: Details of the organization or individual receiving the goods.</li> <li>Item Details: Description, quantity, and specifications of the products to be shipped.</li> <li>Shipping Instructions: Special instructions for the handling and delivery of the goods.</li> </ul> <p>Process:</p> <ul> <li>A need for shipment is identified, often triggered by the creation of a sales order.</li> <li>A Shipping Order is generated, specifying the details of the goods to be shipped.</li> <li>The logistics team uses the Shipping Order to prepare and dispatch the goods.</li> </ul>"},{"location":"modules/shipping/#packing-slip","title":"Packing Slip","text":"<p>A Packing Slip, also known as a Packing List, accompanies a shipment and provides a detailed list of the items contained in the package. It serves as a reference for the recipient and can be used for inventory reconciliation.</p> <p>Key Components:</p> <ul> <li>Packing Slip Number: A unique identifier for the packing slip.</li> <li>Shipper and Consignee Information: Details of the sender and receiver.</li> <li>Item Details: Comprehensive list of products included in the shipment, with quantities and descriptions.</li> <li>Package Information: Details about the packaging, including the number of packages and their dimensions.</li> <li>Shipping Method: The method used to transport the goods.</li> </ul> <p>Process:</p> <ul> <li>A Packing Slip is generated based on the items listed in the Shipping Order.</li> <li>It is included in the shipment, often affixed to the exterior of the package for easy reference.</li> <li>The recipient uses the Packing Slip to verify the contents of the received shipment.</li> </ul>"},{"location":"modules/shipping/#bill-of-lading-bol","title":"Bill of Lading (BOL)","text":"<p>A Bill of Lading is a legal document issued by the carrier or freight forwarder to acknowledge the receipt of goods for shipment. It serves as a contract of carriage and a receipt of the goods.</p> <p>Key Components:</p> <ul> <li>BOL Number: A unique identifier for the Bill of Lading.</li> <li>Shipper, Carrier, and Consignee Information: Details of the entities involved in the shipment.</li> <li>Item Details: Description, quantity, and specifications of the shipped goods.</li> <li>Terms and Conditions: The terms governing the transportation of the goods.</li> <li>Signature and Date: Confirmation of the receipt of goods by the carrier.</li> </ul> <p>Process:</p> <ul> <li>The carrier issues a Bill of Lading upon receiving the goods for shipment.</li> <li>The Bill of Lading accompanies the goods throughout the transportation process.</li> <li>Upon delivery, the consignee signs the Bill of Lading to confirm the receipt of the goods.</li> </ul>"},{"location":"modules/shipping/#delivery-receipt","title":"Delivery Receipt","text":"<p>A Delivery Receipt is a document signed by the recipient to confirm the successful receipt of goods. It serves as proof of delivery.</p> <p>Key Components:</p> <ul> <li>Delivery Receipt Number: A unique identifier for the delivery receipt.</li> <li>Recipient Information: Details of the individual or organization receiving the goods.</li> <li>Item Details: List of items delivered, including quantities and any discrepancies noted.</li> <li>Delivery Date and Time: The date and time when the goods were delivered.</li> <li>Signature: Confirmation of receipt by the recipient.</li> </ul> <p>Process:</p> <ul> <li>The delivery team presents the goods to the recipient.</li> <li>The recipient reviews the items and signs the Delivery Receipt to acknowledge receipt.</li> <li>The signed Delivery Receipt is often returned to the shipper or logistics provider as proof of successful delivery.</li> </ul> <p>These documents collectively form a comprehensive set of paperwork that facilitates the smooth execution of shipping processes, ensuring accuracy, accountability, and legal compliance throughout the supply chain.</p>"},{"location":"modules/stores/","title":"Stores","text":""},{"location":"modules/stores/#purchase-order-po","title":"Purchase Order (PO)","text":"<p>A Purchase Order is a document issued by a store to a supplier to request the purchase of goods or services. It includes details about the items to be purchased, quantities, prices, and delivery dates.</p> <p>Key Components:</p> <ul> <li>Supplier Information: Name, address, and contact details of the supplier.</li> <li>Item Details: Names, codes, quantities, and prices of the items being ordered.</li> <li>Delivery Date: The expected date for the delivery of the goods.</li> <li>Total Cost: The overall cost of the purchase order.</li> </ul> <p>Process:</p> <ul> <li>The store generates a Purchase Order when there is a need to restock inventory.</li> <li>The document is sent to the supplier for confirmation and processing.</li> </ul>"},{"location":"modules/stores/#goods-received-note-grn","title":"Goods Received Note (GRN)","text":"<p>A Goods Received Note is used to confirm the receipt of goods from a supplier. It includes details about the items received, their quantities, and any discrepancies.</p> <p>Key Components:</p> <ul> <li>Supplier Information: Name, address, and contact details.</li> <li>Item Details: Names, codes, quantities, and prices of the received items.</li> <li>Condition of Goods: Notes on the condition of the items upon receipt.</li> <li>Verification: Confirmation that the received items match the details in the Purchase Order.</li> </ul> <p>Process:</p> <ul> <li>The store generates a Goods Received Note upon receiving a shipment from the supplier.</li> <li>It serves as documentation for inventory management and can be used to reconcile with the Purchase Order.</li> </ul>"},{"location":"modules/stores/#stock-transfer-request","title":"Stock Transfer Request","text":"<p>A Stock Transfer Request is used when a store requests the transfer of goods from one location to another within the organization. It helps in optimizing stock levels across different stores.</p> <p>Key Components:</p> <ul> <li>Sending Store Information: Name, location, and contact details.</li> <li>Receiving Store Information: Name, location, and contact details.</li> <li>Item Details: Names, codes, and quantities of the items to be transferred.</li> <li>Reason for Transfer: Explanation of why the transfer is necessary.</li> </ul> <p>Process:</p> <ul> <li>The store generates a Stock Transfer Request when there is a need to balance inventory levels.</li> <li>The request is reviewed and approved before the actual transfer takes place.</li> </ul>"},{"location":"modules/stores/#stock-adjustment-form","title":"Stock Adjustment Form","text":"<p>A Stock Adjustment Form is used to record and authorize changes to inventory levels due to factors such as damaged goods, discrepancies, or expiration.</p> <p>Key Components:</p> <ul> <li>Item Details: Names, codes, and quantities of the items being adjusted.</li> <li>Adjustment Type: Indication of whether it's an increase or decrease in inventory.</li> <li>Reason for Adjustment: Explanation of the reason for the adjustment.</li> <li>Approval Section: Space for managerial approval.</li> </ul> <p>Process:</p> <ul> <li>Store staff use Stock Adjustment Forms to document changes to inventory levels.</li> <li>The form is reviewed and approved before the adjustments are reflected in the system.</li> </ul>"},{"location":"modules/stores/#sales-invoice","title":"Sales Invoice","text":"<p>A Sales Invoice is provided to customers upon the purchase of goods. It includes details about the items sold, prices, and total amount due.</p> <p>Key Components:</p> <ul> <li>Customer Information: Name, address, and contact details.</li> <li>Item Details: Names, codes, quantities, and prices of the purchased items.</li> <li>Total Amount Due: The overall cost of the purchased goods.</li> <li>Payment Details: Indication of how the customer paid.</li> </ul> <p>Process:</p> <ul> <li>Sales Invoices are generated by the point-of-sale (POS) system upon completing a transaction.</li> <li>They serve as proof of purchase and provide customers with a summary of their order.</li> </ul>"},{"location":"modules/stores/#return-merchandise-authorization-rma","title":"Return Merchandise Authorization (RMA)","text":"<p>An RMA is used when a customer wishes to return goods. It helps in managing the return process, tracking returned items, and processing refunds or replacements.</p> <p>Key Components:</p> <ul> <li>Customer Information: Name, address, and contact details.</li> <li>Item Details: Names, codes, and quantities of the items being returned.</li> <li>Reason for Return: Explanation of why the customer is returning the items.</li> <li>RMA Number: A unique identifier for the return authorization.</li> </ul> <p>Process:</p> <ul> <li>Customers initiate returns by requesting an RMA.</li> <li>The RMA helps in tracking returned items, processing refunds or replacements, and updating inventory.</li> </ul>"},{"location":"modules/stores/#inventory-valuation-report","title":"Inventory Valuation Report","text":"<p>An Inventory Valuation Report provides insights into the overall value of the store's inventory. It includes details about the cost and quantity of each item.</p> <p>Key Components:</p> <ul> <li>Item Details: Names, codes, and descriptions of the inventory items.</li> <li>Unit Cost: Cost per unit for each item.</li> <li>Quantity on Hand: The current quantity of each item in stock.</li> <li>Total Value: The overall value of the inventory.</li> </ul> <p>Process:</p> <ul> <li>Inventory Valuation Reports are generated regularly to assess the financial health of the store.</li> <li>The report helps in making informed decisions regarding stock levels, purchasing, and pricing.</li> </ul>"},{"location":"modules/stores/#shelf-label","title":"Shelf Label","text":"<p>A Shelf Label is a physical or electronic label placed on store shelves to indicate the product, price, and any relevant information.</p> <p>Key Components:</p> <ul> <li>Product Information: Name, code, and description of the product.</li> <li>Price: The cost of the product.</li> <li>Barcodes: Scannable codes for efficient checkout and inventory management.</li> <li>Promotional Information: Any discounts, offers, or special promotions.</li> </ul> <p>Process:</p> <ul> <li>Shelf Labels are printed or generated electronically for each product.</li> <li>They help customers easily identify and find products on store shelves.</li> </ul>"},{"location":"modules/stores/#stock-reorder-report","title":"Stock Reorder Report","text":"<p>A Stock Reorder Report is generated to identify items that are running low in inventory and need to be reordered to avoid stockouts.</p> <p>Key Components:</p> <ul> <li>Low-Stock Items: List of items with quantities below the specified reorder level.</li> <li>Reorder Quantity: The suggested quantity to reorder for each item.</li> <li>Supplier Information: Names and contact details of the suppliers.</li> </ul> <p>Process:</p> <ul> <li>Stock Reorder Reports are generated regularly based on inventory levels and reorder parameters.</li> <li>The report assists in maintaining optimal stock levels and preventing stockouts.</li> </ul> <p>These documents collectively contribute to the effective management of store operations, ensuring accurate inventory tracking, seamless transactions, and efficient stock replenishment.</p>"},{"location":"modules/timesheets/","title":"Timesheets","text":""},{"location":"modules/timesheets/#timesheet-entry","title":"Timesheet Entry","text":"<p>A Timesheet Entry is a document where employees record the hours worked on various tasks or projects during a specific time period.</p> <p>Key Components:</p> <ul> <li>Employee Information: Identification of the employee submitting the timesheet.</li> <li>Date and Time: Record of each day worked, along with the start and end times for each task.</li> <li>Task or Project: Description of the specific task, project, or activity performed.</li> <li>Hours Worked: The number of hours or duration spent on each task.</li> <li>Approval Section: Space for supervisor or manager approval.</li> </ul> <p>Process:</p> <ul> <li>Employees regularly fill out Timesheet Entries based on their daily or weekly activities.</li> <li>Timesheet Entries are submitted for approval by the employee's supervisor or manager.</li> <li>Approved timesheets serve as a basis for payroll and project management.</li> </ul>"},{"location":"modules/timesheets/#timesheet-approval-form","title":"Timesheet Approval Form","text":"<p>A Timesheet Approval Form is used by supervisors or managers to review and approve the hours worked by employees, ensuring accuracy and compliance with policies.</p> <p>Key Components:</p> <ul> <li>Employee Information: Identification of the employee submitting the timesheet.</li> <li>Submitted Timesheet: Display of hours worked, tasks, and projects from the submitted timesheet.</li> <li>Approval Status: Section for the supervisor or manager to indicate approval or rejection.</li> <li>Comments: Space for additional comments or feedback.</li> <li>Approval Date: Date when the approval decision was made.</li> </ul> <p>Process:</p> <ul> <li>Supervisors or managers receive Timesheet Entries from employees.</li> <li>They review the entries for accuracy, completeness, and compliance with policies.</li> <li>The supervisor or manager approves or rejects the timesheet, providing feedback as necessary.</li> </ul>"},{"location":"modules/timesheets/#project-timesheet-summary","title":"Project Timesheet Summary","text":"<p>A Project Timesheet Summary compiles the total hours worked by each employee on specific projects, providing an overview of project-related labor costs.</p> <p>Key Components:</p> <ul> <li>Project Information: Identification of the project or task being tracked.</li> <li>Employee Breakdown: List of employees contributing to the project, along with their total hours worked.</li> <li>Task Breakdown: Details on individual tasks or activities performed within the project.</li> <li>Total Hours: Summation of hours worked by all employees on the project.</li> <li>Date Range: The specific time period covered by the summary.</li> </ul> <p>Process:</p> <ul> <li>Project managers or administrators generate Project Timesheet Summaries based on individual Timesheet Entries.</li> <li>The summary provides insights into labor distribution and project progress.</li> <li>It is useful for project budgeting, resource allocation, and performance analysis.</li> </ul>"},{"location":"modules/timesheets/#overtime-authorization-request","title":"Overtime Authorization Request","text":"<p>An Overtime Authorization Request is used when employees need to work beyond their regular working hours, requesting approval for overtime.</p> <p>Key Components:</p> <ul> <li>Employee Information: Identification of the employee requesting overtime.</li> <li>Reason for Overtime: Explanation of the need for overtime work.</li> <li>Proposed Hours: The number of additional hours requested.</li> <li>Supervisor Approval: Section for the supervisor to approve or deny the overtime request.</li> <li>Date and Time: Specific dates and times for which overtime is requested.</li> </ul> <p>Process:</p> <ul> <li>Employees submit Overtime Authorization Requests when they anticipate working beyond regular hours.</li> <li>Supervisors review the requests, considering factors such as workload and budget constraints.</li> <li>Approved requests are then included in the employee's timesheet for accurate recording of overtime hours.</li> </ul>"},{"location":"modules/timesheets/#timesheet-audit-trail","title":"Timesheet Audit Trail","text":"<p>A Timesheet Audit Trail is a log that records changes made to timesheets, providing a history of edits, approvals, and any adjustments.</p> <p>Key Components:</p> <ul> <li>User and Timestamp: Identification of the user making changes and the date and time of each change.</li> <li>Original Entry: Details of the original timesheet entry.</li> <li>Modified Entry: Information on the revised timesheet entry.</li> <li>Reason for Modification: Explanation of the reason for the change.</li> <li>Approval Status: Indication of whether the modified entry has been re-approved.</li> </ul> <p>Process:</p> <ul> <li>Changes made to timesheets, such as corrections or adjustments, are logged in the Timesheet Audit Trail.</li> <li>The audit trail provides transparency and accountability for any modifications.</li> <li>It can be useful for compliance purposes and resolving discrepancies.</li> </ul> <p>These documents collectively form a comprehensive set of paperwork in the Timesheets module, facilitating accurate recording, approval, and management of employees' working hours and related activities.</p>"},{"location":"modules/vacations/","title":"Vacations","text":""},{"location":"modules/vacations/#vacation-request-form","title":"Vacation Request Form","text":"<p>A Vacation Request Form is used by employees to formally request time off for vacation. It includes details such as the desired dates, duration, and any specific notes or comments.</p> <p>Key Components:</p> <ul> <li>Employee Information: Name, employee ID, and department.</li> <li>Requested Dates: Start and end dates of the requested vacation.</li> <li>Duration: Number of days or hours requested.</li> <li>Reason for Vacation: Brief explanation or notes regarding the purpose of the vacation.</li> <li>Approval Section: Space for supervisor or manager approval.</li> </ul> <p>Process:</p> <ul> <li>Employees complete the Vacation Request Form, specifying the dates they intend to take off.</li> <li>The form is submitted to the supervisor or manager for approval.</li> <li>Once approved, the requested dates are recorded in the system, and the employee is notified.</li> </ul>"},{"location":"modules/vacations/#vacation-approval-notification","title":"Vacation Approval Notification","text":"<p>A Vacation Approval Notification is a document sent to employees notifying them that their vacation request has been approved. It includes details about the approved dates and any additional information.</p> <p>Key Components:</p> <ul> <li>Employee Information: Name, employee ID, and department.</li> <li>Approved Dates: Start and end dates of the approved vacation.</li> <li>Notes or Comments: Additional information from the supervisor or manager.</li> <li>Contact Information: Details for reaching out in case of emergencies.</li> </ul> <p>Process:</p> <ul> <li>Upon approval of the vacation request, employees receive a Vacation Approval Notification.</li> <li>The notification serves as confirmation of the approved time off and includes relevant details for reference.</li> </ul>"},{"location":"modules/vacations/#vacation-calendar","title":"Vacation Calendar","text":"<p>A Vacation Calendar provides a visual representation of employees' scheduled vacations, making it easier for teams and management to plan workloads and ensure adequate coverage.</p> <p>Key Components:</p> <ul> <li>Employee Names: List of employees with scheduled vacations.</li> <li>Vacation Dates: Visual representation of when each employee is on vacation.</li> <li>Team or Department View: Option to view vacations by team, department, or organization-wide.</li> <li>Color-Coding: Different colors or indicators for easy identification of vacation periods.</li> </ul> <p>Process:</p> <ul> <li>HR or team leaders use the Vacation Calendar to plan and manage team schedules.</li> <li>The calendar helps in avoiding scheduling conflicts and ensures that adequate coverage is maintained.</li> </ul>"},{"location":"modules/vacations/#vacation-balance-report","title":"Vacation Balance Report","text":"<p>A Vacation Balance Report provides employees with information about their remaining vacation balance. It includes details about accrued, used, and remaining vacation days.</p> <p>Key Components:</p> <ul> <li>Employee Information: Name, employee ID, and department.</li> <li>Accrued Vacation: Total number of vacation days accrued over time.</li> <li>Used Vacation: Number of vacation days already taken.</li> <li>Remaining Vacation: The balance of unused vacation days.</li> <li>Accrual Rate: Information on how vacation days are earned over time.</li> </ul> <p>Process:</p> <ul> <li>HR generates and provides employees with the Vacation Balance Report.</li> <li>Employees can review the report to understand their remaining vacation days and plan future requests accordingly.</li> </ul>"},{"location":"modules/vacations/#vacation-policy-document","title":"Vacation Policy Document","text":"<p>A Vacation Policy Document outlines the organization's policies and guidelines regarding vacation entitlements, accrual rates, request procedures, and any specific rules or restrictions.</p> <p>Key Components:</p> <ul> <li>Vacation Entitlement: Information on how vacation days are earned or granted.</li> <li>Accrual Period: Details on the frequency at which vacation days accrue (e.g., annually, monthly).</li> <li>Request Procedures: Guidelines for how employees should submit vacation requests.</li> <li>Approval Process: Overview of how vacation requests are reviewed and approved.</li> <li>Restrictions or Blackout Periods: Any specific periods during which vacation requests may be restricted.</li> </ul> <p>Process:</p> <ul> <li>HR provides employees with the Vacation Policy Document during onboarding.</li> <li>The document serves as a reference for employees to understand the organization's vacation policies.</li> </ul>"},{"location":"modules/vacations/#vacation-usage-report","title":"Vacation Usage Report","text":"<p>A Vacation Usage Report provides insights into the overall usage of vacation days within the organization. It may include data on departmental trends, peak vacation periods, and other analytics.</p> <p>Key Components:</p> <ul> <li>Organization-Wide Data: Overview of vacation usage across the entire organization.</li> <li>Departmental Breakdown: Analysis of vacation usage by department or team.</li> <li>Peak Periods: Identification of periods with high vacation usage.</li> <li>Average Vacation Duration: Information on the typical duration of vacations taken.</li> </ul> <p>Process:</p> <ul> <li>HR or management generates the Vacation Usage Report to analyze trends and patterns.</li> <li>The report helps in strategic workforce planning and identifying potential challenges during peak vacation periods.</li> </ul> <p>These documents collectively contribute to the efficient management of vacation-related processes, ensuring transparency, adherence to policies, and effective workforce planning.</p>"},{"location":"modules/inventory/","title":"Inventory","text":""},{"location":"modules/inventory/#goods-receipt-note-grn","title":"Goods Receipt Note (GRN)","text":"<p>A Goods Receipt Note (GRN) document is generated when new inventory items are received or purchased by the business. This document serves as proof of the addition of products to the inventory and includes details such as the date of receipt, supplier information, and a list of the received items.</p> <p>Key Components:</p> <ul> <li>Receipt Date: The date when the stock is received.</li> <li>Supplier Information: Details about the supplier, including name, contact information, and any relevant reference numbers or codes.</li> <li>Product Details: A comprehensive list of products received, including their names, quantities, and any specific identifiers such as serial numbers or batch numbers.</li> <li>Quantity Received: The number of units received for each product.</li> <li>Condition of Stock: Information regarding the condition of the received stock (e.g., new, refurbished).</li> </ul> <p>Process:</p> <ul> <li>The purchasing department places an order with the supplier.</li> <li>The supplier delivers the products to the business.</li> <li>The warehouse or inventory manager verifies the received items against the purchase order.</li> <li>A Stock Receipt document is generated, recording the received items.</li> </ul>"},{"location":"modules/inventory/#goods-issue-note-gin","title":"Goods Issue Note (GIN)","text":"<p>A Goods Issue Note (GIN) document is created when items are taken or issued from the inventory for internal use, production, or any other purpose within the organization. It serves to track the reduction of stock and is crucial for maintaining accurate inventory levels.</p> <p>Key Components:</p> <ul> <li>Issue Date: The date when the stock is issued.</li> <li>Recipient Information: Details about the person or department receiving the stock.</li> <li>Product Details: A list of products being issued, along with their quantities and any specific identifiers.</li> <li>Quantity Issued: The number of units being taken out of the inventory.</li> <li>Purpose of Issue: The reason or purpose for issuing the stock (e.g., internal consumption, production).</li> </ul> <p>Process:</p> <ul> <li>A department or individual submits a request for stock items.</li> <li>The inventory manager reviews the request and approves it.</li> <li>The stock is physically retrieved from the inventory.</li> <li>A Goods Issue document is generated, recording the items issued and the purpose.</li> </ul>"},{"location":"modules/inventory/#stock-transfer","title":"Stock Transfer","text":"<p>A Stock Transfer document is used when inventory items are moved from one location to another within the organization. This could involve transferring stock between warehouses, stores, or different departments.</p> <p>Key Components:</p> <ul> <li>Transfer Date: The date when the stock transfer occurs.</li> <li>Source and Destination Information: Details about the locations involved in the transfer (e.g., warehouse A to warehouse B).</li> <li>Product Details: A list of products being transferred, along with their quantities and any specific identifiers.</li> <li>Quantity Transferred: The number of units being moved.</li> </ul> <p>Process:</p> <ul> <li>A decision is made to transfer stock from one location to another.</li> <li>The inventory manager initiates the stock transfer process.</li> <li>The stock is physically moved from the source to the destination location.</li> <li>A Stock Transfer document is generated, recording the items transferred and the involved locations.</li> </ul>"},{"location":"modules/inventory/#stock-return","title":"Stock Return","text":"<p>A Stock Return document is generated when products previously received are returned to the inventory due to various reasons such as defects, damages, or customer returns. This document helps track the return of stock and ensures proper adjustments to inventory levels.</p> <p>Key Components:</p> <ul> <li>Return Date: The date when the stock is returned to the inventory.</li> <li>Customer/Supplier Information: Details about the entity returning the stock, including name, contact information, and any relevant reference numbers or codes.</li> <li>Product Details: A list of products being returned, including their names, quantities, and any specific identifiers.</li> <li>Quantity Returned: The number of units being returned to the inventory.</li> <li>Reason for Return: The reason or condition for returning the stock (e.g., defects, damages, customer dissatisfaction).</li> </ul> <p>Process:</p> <ul> <li>A customer or supplier initiates a return request.</li> <li>The return request is reviewed and approved by the relevant department.</li> <li>The returned items are inspected for defects or damages.</li> <li>A Stock Returns document is generated, recording the items returned and the reason for the return.</li> <li>If applicable, the returned items may undergo repairs or quality checks before being reintegrated into the inventory.</li> </ul>"},{"location":"modules/inventory/#stock-adjustment-form","title":"Stock Adjustment Form","text":"<p>A Stock Adjustment Form is used to record and authorize changes to inventory levels due to factors such as damaged goods, discrepancies, or expiration.</p> <p>Key Components:</p> <ul> <li>Item Details: Names, codes, and quantities of the items being adjusted.</li> <li>Adjustment Type: Indication of whether it's an increase or decrease in inventory.</li> <li>Reason for Adjustment: Explanation of the reason for the adjustment.</li> <li>Approval Section: Space for managerial approval.</li> </ul> <p>Process:</p> <ul> <li>Store staff use Stock Adjustment Forms to document changes to inventory levels.</li> <li>The form is reviewed and approved before the adjustments are reflected in the system.</li> </ul>"},{"location":"modules/inventory/#stock-movement-record","title":"Stock Movement Record","text":"<p>A Stock Movement Record tracks the inflow and outflow of stock, capturing details about each transaction, whether it involves receiving goods from suppliers or selling products to customers.</p> <p>Key Components:</p> <ul> <li>Transaction Date: The date when the stock movement occurred.</li> <li>Transaction Type: Indicates whether it's a stock-in or stock-out transaction.</li> <li>SKU Code: The unique identifier of the product involved.</li> <li>Quantity: The quantity of units moved during the transaction.</li> <li>Source/Destination: Information about the origin or destination of the stock.</li> </ul> <p>Process:</p> <ul> <li>Stock Movement Records are generated in real-time as inventory transactions occur.</li> <li>They provide a detailed history of stock movements and aid in maintaining accurate inventory levels.</li> </ul>"},{"location":"modules/inventory/#stock-keeping-unit-sku-listing","title":"Stock Keeping Unit (SKU) Listing","text":"<p>A SKU Listing is a comprehensive inventory catalog that provides detailed information about each Stock Keeping Unit (SKU) or product in the inventory.</p> <p>Key Components:</p> <ul> <li>SKU Code: A unique identifier for each product.</li> <li>Product Description: Detailed information about the product.</li> <li>Unit of Measure: The measurement unit used for the product (e.g., each, dozen).</li> <li>Reorder Point: The inventory level at which a reorder should be initiated.</li> <li>Safety Stock: Additional stock maintained to prevent stockouts during unexpected demand fluctuations.</li> </ul> <p>Process:</p> <ul> <li>SKU Listings are maintained and updated as new products are introduced or existing ones are modified.</li> <li>They serve as a reference for inventory managers and purchasing teams.</li> </ul>"},{"location":"modules/inventory/#inventory-valuation-report","title":"Inventory Valuation Report","text":"<p>An Inventory Valuation Report provides a comprehensive overview of the value of the current inventory, considering factors such as unit costs, quantities, and total values.</p> <p>Key Components:</p> <ul> <li>SKU Details: Information about each SKU, including codes and descriptions.</li> <li>Unit Cost: The cost per unit for each SKU.</li> <li>Quantity on Hand: The current quantity of each SKU in stock.</li> <li>Total Value: The total value of the inventory, calculated by multiplying the unit cost by the quantity on hand.</li> </ul> <p>Process:</p> <ul> <li>Inventory Valuation Reports are generated regularly, often as part of financial reporting.</li> <li>They assist in assessing the financial health of the organization and making informed decisions about inventory levels.</li> </ul>"},{"location":"modules/inventory/#reorder-point-report","title":"Reorder Point Report","text":"<p>A Reorder Point Report helps in inventory planning by identifying products that have reached or fallen below their designated reorder points, indicating the need for replenishment.</p> <p>Key Components:</p> <ul> <li>SKU Details: Information about the SKU, including codes and descriptions.</li> <li>Current Stock Level: The quantity of the SKU currently in stock.</li> <li>Reorder Point: The threshold at which a reorder should be initiated.</li> <li>Recommended Reorder Quantity: The suggested quantity to order to bring the stock level back to the desired level.</li> </ul> <p>Process:</p> <ul> <li>Reorder Point Reports are generated regularly based on inventory levels and reorder parameters.</li> <li>They assist in optimizing stock levels, preventing stockouts, and ensuring timely replenishment.</li> </ul>"},{"location":"modules/inventory/#stock-takeinventory-count-sheet","title":"Stock Take/Inventory Count Sheet","text":"<p>A Stock Take or Inventory Count Sheet is used during physical inventory counts to record the actual quantities of each SKU in stock.</p> <p>Key Components:</p> <ul> <li>SKU Details: Information about each SKU, including codes and descriptions.</li> <li>System Quantity: The quantity of each SKU according to the system records.</li> <li>Actual Quantity: The physical count of each SKU during the stock take.</li> <li>Variance: The difference between the system quantity and the actual quantity.</li> </ul> <p>Process:</p> <ul> <li>Stock Take/Inventory Count Sheets are used during periodic physical inventory counts.</li> <li>They help identify discrepancies between the system records and the actual physical count, allowing for adjustments.</li> </ul>"},{"location":"modules/inventory/#supplier-performance-report","title":"Supplier Performance Report","text":"<p>A Supplier Performance Report evaluates the performance of suppliers based on factors such as delivery times, order accuracy, and product quality.</p> <p>Key Components:</p> <ul> <li>Supplier Details: Information about the supplier, including name and contact details.</li> <li>On-Time Delivery Rate: The percentage of deliveries that were on time.</li> <li>Order Accuracy: The accuracy of orders received from the supplier.</li> <li>Quality of Goods: An assessment of the quality of the products supplied.</li> </ul> <p>Process:</p> <ul> <li>Supplier Performance Reports are generated regularly to assess the effectiveness of supplier relationships.</li> <li>They aid in decision-making regarding ongoing partnerships and negotiations.</li> </ul>"},{"location":"modules/inventory/#dead-stock-report","title":"Dead Stock Report","text":"<p>A Dead Stock Report identifies products that have been in inventory for an extended period without being sold. It helps in identifying slow-moving or obsolete items.</p> <p>Key Components:</p> <ul> <li>SKU Details: Information about each SKU, including codes and descriptions.</li> <li>Date in Stock: The date since which the product has been in stock.</li> <li>Quantity on Hand: The current quantity of the SKU in stock.</li> <li>Reason for Classification: Explanation of why the product is considered dead stock.</li> </ul> <p>Process:</p> <ul> <li>Dead Stock Reports are generated to assess and manage inventory that may need special attention.</li> <li>They assist in making decisions about promotions, discounts, or liquidation for slow-moving items.</li> </ul> <p>These documents collectively contribute to the efficient management of inventory, ensuring accurate tracking, timely replenishment, and informed decision-making within the organization.</p>"},{"location":"modules/inventory/goods-issue/","title":"Goods Issue Note (GIN)","text":"<p>A Goods Issue Note (GIN) is a document used in the inventory and logistics management processes to formally record and authorize the release or issuance of goods from a company's inventory. It serves as a crucial record, documenting the details of the items being issued, the reason for the issuance, and other relevant information. Here are the details of what a Goods Issue Note typically contains, including key fields:</p>"},{"location":"modules/inventory/goods-issue/#goods-issue-note-gin-details","title":"Goods Issue Note (GIN) Details:","text":""},{"location":"modules/inventory/goods-issue/#goods-issue-note-number","title":"Goods Issue Note Number:","text":"<ul> <li>Description: A unique identifier assigned to each Goods Issue Note for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific GIN in the inventory and logistics systems.</li> </ul>"},{"location":"modules/inventory/goods-issue/#goods-issue-date","title":"Goods Issue Date:","text":"<ul> <li>Description: The date when the Goods Issue Note is generated upon the release or issuance of goods.</li> <li>Purpose: Provides a timestamp for tracking the timing of the goods issuance.</li> </ul>"},{"location":"modules/inventory/goods-issue/#reference-document","title":"Reference Document:","text":"<p>Fields:</p> <ul> <li>Reference Document Type (e.g., Sales Order, Work Order)</li> <li>Reference Document Number</li> <li>Purpose: Indicates the document or order that initiated the goods issue, such as a sales order or production order.</li> </ul>"},{"location":"modules/inventory/goods-issue/#issuing-location","title":"Issuing Location:","text":"<ul> <li>Description: The specific location within the organization where the goods are being issued from.</li> <li>Purpose: Specifies the internal department or location responsible for the goods issue.</li> </ul>"},{"location":"modules/inventory/goods-issue/#authorized-personnel","title":"Authorized Personnel:","text":"<p>Fields:</p> <ul> <li>Name of the Person Initiating the Issue</li> <li>Signature</li> <li>Purpose: Documents the individual or team authorized to initiate the goods issue, ensuring accountability.</li> </ul>"},{"location":"modules/inventory/goods-issue/#item-details","title":"Item Details:","text":"<p>Fields:</p> <ul> <li>Item Code/ID</li> <li>Item Description</li> <li>Quantity Issued</li> <li>Unit of Measure</li> <li>Batch/Lot Number (if applicable)</li> <li>Serial Numbers (if applicable)</li> <li>Purpose: Provides a detailed list of the items being issued, including quantity and specific identifiers.</li> </ul>"},{"location":"modules/inventory/goods-issue/#reason-for-goods-issue","title":"Reason for Goods Issue:","text":"<ul> <li>Description: A brief explanation or code indicating the reason for the goods issue (e.g., sales, production, internal consumption).</li> <li>Purpose: Provides context for the issuance, aiding in tracking and reporting.</li> </ul>"},{"location":"modules/inventory/goods-issue/#destination-if-applicable","title":"Destination (if applicable):","text":"<ul> <li>Description: Indicates the destination or purpose of the goods being issued, especially relevant for internal transfers.</li> <li>Purpose: Specifies the purpose or destination of the issued goods within the organization.</li> </ul>"},{"location":"modules/inventory/goods-issue/#quality-inspection-if-applicable","title":"Quality Inspection (if applicable):","text":"<p>Fields:</p> <ul> <li>Condition of Goods</li> <li>Inspection Results</li> <li>Remarks</li> <li>Purpose: Records the outcome of any quality inspection conducted before the goods are issued.</li> </ul>"},{"location":"modules/inventory/goods-issue/#commentsnotes","title":"Comments/Notes:","text":"<ul> <li>Description: Space for additional comments, notes, or observations related to the goods issue.</li> <li>Purpose: Allows for any relevant information not covered by other fields to be documented.</li> </ul>"},{"location":"modules/inventory/goods-issue/#approval-signatures","title":"Approval Signatures:","text":"<p>Fields:</p> <ul> <li>Signatures of Authorized Personnel</li> <li>Approval Date</li> <li>Purpose: Confirms that the goods issue has been reviewed and approved by authorized individuals.</li> </ul>"},{"location":"modules/inventory/goods-issue/#attachment-of-supporting-documents","title":"Attachment of Supporting Documents:","text":"<ul> <li>Description: Space for attaching any supporting documents, such as delivery notes or internal requisitions.</li> <li>Purpose: Provides additional details or references related to the goods issue.</li> </ul>"},{"location":"modules/inventory/goods-issue/#custom-fields","title":"Custom Fields:","text":"<ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the organization.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the Goods Issue Note.</li> </ul>"},{"location":"modules/inventory/goods-issue/#goods-issue-note-workflow","title":"Goods Issue Note Workflow:","text":""},{"location":"modules/inventory/goods-issue/#goods-issue-initiation","title":"Goods Issue Initiation:","text":"<p>The need for goods to be issued is identified, whether for fulfilling customer orders, production requirements, or other purposes.</p>"},{"location":"modules/inventory/goods-issue/#goods-issue-note-generation","title":"Goods Issue Note Generation:","text":"<p>A Goods Issue Note is generated to formally document and authorize the release or issuance of goods.</p>"},{"location":"modules/inventory/goods-issue/#item-verification-and-details-entry","title":"Item Verification and Details Entry:","text":"<p>The items to be issued are verified, and their details are entered into the Goods Issue Note.</p>"},{"location":"modules/inventory/goods-issue/#authorization","title":"Authorization:","text":"<p>The Goods Issue Note is reviewed and approved by authorized personnel within the organization.</p>"},{"location":"modules/inventory/goods-issue/#goods-issue-execution","title":"Goods Issue Execution:","text":"<p>The goods are physically released or issued from the inventory based on the information in the Goods Issue Note.</p>"},{"location":"modules/inventory/goods-issue/#documentation-retention","title":"Documentation Retention:","text":"<p>The Goods Issue Note, along with related documents, is retained for record-keeping and audit purposes.</p> <p>The Goods Issue Note is a critical document in inventory management, facilitating accurate record-keeping, tracking of goods movement, and ensuring that the right quantities are available for various operational needs. It represents the outbound flow of goods from the organization's inventory.</p>"},{"location":"modules/inventory/goods-receipt/","title":"Goods Receipt Note (GRN)","text":"<p>A Goods Receipt Note (GRN) is a document used in the purchasing and inventory management process to confirm the receipt of goods from a supplier. It serves as a record that the delivered goods match the quantity and quality specified in the purchase order. Here are the details of what a Goods Receipt Note typically contains, including key fields:</p>"},{"location":"modules/inventory/goods-receipt/#goods-receipt-note-grn-details","title":"Goods Receipt Note (GRN) Details:","text":""},{"location":"modules/inventory/goods-receipt/#goods-receipt-note-number","title":"Goods Receipt Note Number:","text":"<ul> <li>Description: A unique identifier assigned to each GRN for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific GRN in the procurement and inventory systems.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#grn-date","title":"GRN Date:","text":"<ul> <li>Description: The date when the Goods Receipt Note is generated upon the receipt of goods.</li> <li>Purpose: Provides a timestamp for tracking the timing of the goods receipt.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#purchase-order-information","title":"Purchase Order Information:","text":"<p>Fields:</p> <ul> <li>Purchase Order Number</li> <li>Purchase Order Date</li> <li>Purpose: References the original purchase order against which the goods were ordered.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#supplier-information","title":"Supplier Information:","text":"<p>Fields:</p> <ul> <li>Supplier Name</li> <li>Supplier Contact Information</li> <li>Purpose: Identifies the supplier from whom the goods were received.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#delivery-information","title":"Delivery Information:","text":"<p>Fields:</p> <ul> <li>Delivery Note Number (if applicable)</li> <li>Delivery Date</li> <li>Shipping Method</li> <li>Purpose: Captures details related to the delivery, including any associated delivery notes.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#receiving-location","title":"Receiving Location:","text":"<ul> <li>Description: The specific location within the organization where the goods are received.</li> <li>Purpose: Specifies the receiving department or location for internal tracking.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#inspectorreceiver-details","title":"Inspector/Receiver Details:","text":"<p>Fields:</p> <ul> <li>Name of the Inspector/Receiver</li> <li>Signature</li> <li>Purpose: Documents the individual responsible for inspecting and receiving the goods.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#item-details","title":"Item Details:","text":"<p>Fields:</p> <ul> <li>Item Code/ID</li> <li>Item Description</li> <li>Quantity Received</li> <li>Unit of Measure</li> <li>Batch/Lot Number (if applicable)</li> <li>Serial Numbers (if applicable)</li> <li>Purpose: Provides a detailed list of the items received, including quantity and specific identifiers.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#quality-inspection-details","title":"Quality Inspection Details:","text":"<p>Fields:</p> <ul> <li>Condition of Goods</li> <li>Inspection Results</li> <li>Remarks</li> <li>Purpose: Records the outcome of any quality inspections conducted on the received goods.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#packaging-information","title":"Packaging Information:","text":"<p>Fields:</p> <ul> <li>Packaging Condition</li> <li>Packaging Integrity</li> <li>Purpose: Notes the condition and integrity of the packaging in which the goods were delivered.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#documentation-check","title":"Documentation Check:","text":"<p>Fields:</p> <ul> <li>Invoice Match (Yes/No)</li> <li>Packing Slip Match (Yes/No)</li> <li>Purpose: Indicates whether the received goods match the information on the supplier's invoice and packing slip.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#damaged-or-missing-items","title":"Damaged or Missing Items:","text":"<ul> <li>Description: Any identification of damaged or missing items compared to the original purchase order.</li> <li>Purpose: Highlights any discrepancies or issues with the received goods.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#grn-approval","title":"GRN Approval:","text":"<p>Fields:</p> <ul> <li>Authorized Signatures</li> <li>Approval Date</li> <li>Purpose: Confirms that the goods receipt has been reviewed and approved for acceptance.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#storage-instructions-if-applicable","title":"Storage Instructions (if applicable):","text":"<ul> <li>Description: Any specific instructions for storing the received goods, such as temperature requirements or storage locations.</li> <li>Purpose: Provides guidance on how to handle and store the items.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#notes-and-comments","title":"Notes and Comments:","text":"<ul> <li>Description: Space for additional notes, comments, or observations related to the goods receipt.</li> <li>Purpose: Allows for any relevant information not covered by other fields to be documented.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#custom-fields","title":"Custom Fields:","text":"<ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the organization.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the goods receipt process.</li> </ul>"},{"location":"modules/inventory/goods-receipt/#goods-receipt-note-workflow","title":"Goods Receipt Note Workflow:","text":""},{"location":"modules/inventory/goods-receipt/#goods-receipt","title":"Goods Receipt:","text":"<p>The receiving department or personnel physically receives the goods from the supplier.</p>"},{"location":"modules/inventory/goods-receipt/#documentation-check_1","title":"Documentation Check:","text":"<p>The received goods are compared to the information on the supplier's invoice and packing slip.</p>"},{"location":"modules/inventory/goods-receipt/#quality-inspection-if-applicable","title":"Quality Inspection (if applicable):","text":"<p>The goods may undergo a quality inspection to ensure they meet specified standards.</p>"},{"location":"modules/inventory/goods-receipt/#grn-generation","title":"GRN Generation:","text":"<p>The Goods Receipt Note is generated to formally acknowledge the receipt of the goods.</p>"},{"location":"modules/inventory/goods-receipt/#item-verification-and-details-entry","title":"Item Verification and Details Entry:","text":"<p>The items received are verified, and their details are entered into the GRN.</p>"},{"location":"modules/inventory/goods-receipt/#approval","title":"Approval:","text":"<p>The GRN is reviewed and approved by authorized personnel within the organization.</p>"},{"location":"modules/inventory/goods-receipt/#storage-if-applicable","title":"Storage (if applicable):","text":"<p>The received goods are stored according to any specified storage instructions.</p>"},{"location":"modules/inventory/goods-receipt/#documentation-retention","title":"Documentation Retention:","text":"<p>The Goods Receipt Note, along with related documents, is retained for record-keeping and audit purposes.</p> <p>The Goods Receipt Note is a crucial document in the procurement and inventory management processes, providing transparency and accountability for the receipt of goods. It helps in maintaining accurate inventory records, facilitates payment processing, and serves as evidence in case of disputes with suppliers.</p>"},{"location":"modules/inventory/sku-listing/","title":"Stock Keeping Unit (SKU) Listing","text":"<p>A Stock Keeping Unit (SKU) Listing is a document or record in the Inventory Management module of an enterprise system that provides a comprehensive list of all the Stock Keeping Units (SKUs) within an organization's inventory. SKUs are unique codes or identifiers assigned to individual products or items to facilitate inventory tracking and management. The SKU Listing contains essential information about each SKU, allowing for effective inventory control. Here are the details of what a SKU Listing typically contains:</p>"},{"location":"modules/inventory/sku-listing/#sku-listing-details","title":"SKU Listing Details:","text":""},{"location":"modules/inventory/sku-listing/#sku-code","title":"SKU Code:","text":"<ul> <li>Description: A unique alphanumeric code or identifier assigned to each individual Stock Keeping Unit (SKU).</li> <li>Purpose: Uniquely identifies and distinguishes each product or item within the inventory.</li> </ul>"},{"location":"modules/inventory/sku-listing/#productitem-name","title":"Product/Item Name:","text":"<ul> <li>Description: The descriptive name or title of the product or item associated with the SKU.</li> <li>Purpose: Provides a clear and human-readable reference to the product.</li> </ul>"},{"location":"modules/inventory/sku-listing/#description","title":"Description:","text":"<ul> <li>Description: Additional information describing the characteristics, features, or specifications of the product or item.</li> <li>Purpose: Offers more detailed information about the SKU for better identification.</li> </ul>"},{"location":"modules/inventory/sku-listing/#categoryclassification","title":"Category/Classification:","text":"<ul> <li>Description: The category or classification to which the SKU belongs within the organization's product hierarchy.</li> <li>Purpose: Helps in grouping similar products and facilitates organization and navigation.</li> </ul>"},{"location":"modules/inventory/sku-listing/#brand","title":"Brand:","text":"<ul> <li>Description: The brand or manufacturer associated with the SKU.</li> <li>Purpose: Indicates the origin or source of the product.</li> </ul>"},{"location":"modules/inventory/sku-listing/#unit-of-measure-uom","title":"Unit of Measure (UOM):","text":"<ul> <li>Description: The standard unit used to measure the quantity of the SKU (e.g., each, box, pound).</li> <li>Purpose: Specifies the measurement unit for accurate inventory tracking and reporting.</li> </ul>"},{"location":"modules/inventory/sku-listing/#cost-per-unit","title":"Cost per Unit:","text":"<ul> <li>Description: The cost incurred for each unit of the SKU.</li> <li>Purpose: Essential for financial reporting, valuation of inventory, and pricing decisions.</li> </ul>"},{"location":"modules/inventory/sku-listing/#selling-price","title":"Selling Price:","text":"<ul> <li>Description: The price at which the SKU is sold to customers.</li> <li>Purpose: Aids in pricing strategies and revenue calculations.</li> </ul>"},{"location":"modules/inventory/sku-listing/#stock-on-hand","title":"Stock On Hand:","text":"<ul> <li>Description: The current quantity of the SKU available in the organization's inventory.</li> <li>Purpose: Provides real-time information about the stock level and availability.</li> </ul>"},{"location":"modules/inventory/sku-listing/#stock-on-order","title":"Stock On Order:","text":"<ul> <li>Description: The quantity of the SKU that has been ordered from suppliers but has not yet been received.</li> <li>Purpose: Helps in managing upcoming inventory inflow and planning.</li> </ul>"},{"location":"modules/inventory/sku-listing/#reorder-level","title":"Reorder Level:","text":"<ul> <li>Description: The minimum quantity of the SKU that should trigger a reorder.</li> <li>Purpose: Assists in proactive inventory management to prevent stockouts.</li> </ul>"},{"location":"modules/inventory/sku-listing/#supplier-information","title":"Supplier Information:","text":"<ul> <li>Description: Details about the primary supplier or vendors associated with the SKU.</li> </ul> <p>Fields:</p> <ul> <li>Supplier Name</li> <li>Supplier Code</li> <li>Contact Information</li> <li>Purpose: Facilitates communication with suppliers and ensures accurate procurement.</li> </ul>"},{"location":"modules/inventory/sku-listing/#locationwarehouse","title":"Location/Warehouse:","text":"<ul> <li>Description: The specific location within the organization's premises where the SKU is stored.</li> <li>Purpose: Aids in efficient inventory management and retrieval.</li> </ul>"},{"location":"modules/inventory/sku-listing/#lead-time","title":"Lead Time:","text":"<ul> <li>Description: The time required from placing an order to receiving the SKU in the inventory.</li> <li>Purpose: Assists in managing inventory levels based on the time it takes to replenish stock.</li> </ul>"},{"location":"modules/inventory/sku-listing/#last-updated-date","title":"Last Updated Date:","text":"<ul> <li>Description: The date when the information for the SKU was last updated in the system.</li> <li>Purpose: Provides a timestamp for reference and ensures data accuracy.</li> </ul>"},{"location":"modules/inventory/sku-listing/#status","title":"Status:","text":"<ul> <li>Description: Indicates the current status of the SKU (e.g., active, discontinued, out of stock).</li> <li>Purpose: Helps in identifying the availability and status of each SKU.</li> </ul>"},{"location":"modules/inventory/sku-listing/#sku-listing-workflow","title":"SKU Listing Workflow:","text":""},{"location":"modules/inventory/sku-listing/#initialization","title":"Initialization:","text":"<p>The SKU Listing is initiated as a comprehensive record of all SKUs within the organization's inventory.</p>"},{"location":"modules/inventory/sku-listing/#data-collection","title":"Data Collection:","text":"<p>Relevant information about each SKU is collected, including SKU code, product name, description, cost, and other details.</p>"},{"location":"modules/inventory/sku-listing/#data-entry","title":"Data Entry:","text":"<p>The collected data is entered into the enterprise system, creating or updating records in the SKU Listing.</p>"},{"location":"modules/inventory/sku-listing/#verification","title":"Verification:","text":"<p>The accuracy of SKU information is verified, ensuring that data is consistent with physical inventory.</p>"},{"location":"modules/inventory/sku-listing/#reconciliation","title":"Reconciliation:","text":"<p>The SKU Listing is reconciled with other inventory-related documents, such as purchase orders and stock issues.</p>"},{"location":"modules/inventory/sku-listing/#updates-and-changes","title":"Updates and Changes:","text":"<p>Any changes or updates to SKU information are recorded in the SKU Listing, including adjustments to stock levels.</p>"},{"location":"modules/inventory/sku-listing/#reporting","title":"Reporting:","text":"<p>SKU Listing reports may be generated for analysis, decision-making, and sharing information across departments.</p>"},{"location":"modules/inventory/sku-listing/#integration","title":"Integration:","text":"<p>SKU Listing data may be integrated with other modules, such as Sales and Purchasing, for a holistic view of inventory-related activities.</p> <p>The SKU Listing serves as a centralized repository of information about each SKU in the inventory, allowing for efficient inventory management, procurement planning, and decision-making related to product availability and pricing.</p>"},{"location":"modules/inventory/stock-adjustment/","title":"Stock Adjustment Form","text":"<p>A Stock Adjustment Form is a document used in inventory management to record and authorize adjustments made to the quantity of stock or inventory items. Stock adjustments may occur for various reasons, including discrepancies in physical counts, damaged goods, expiration of products, or changes in stock valuation. The Stock Adjustment Form serves as a formal record of these adjustments. Here are the details of what a Stock Adjustment Form typically contains, including key fields:</p>"},{"location":"modules/inventory/stock-adjustment/#stock-adjustment-form-details","title":"Stock Adjustment Form Details:","text":""},{"location":"modules/inventory/stock-adjustment/#adjustment-form-number","title":"Adjustment Form Number:","text":"<ul> <li>Description: A unique identifier assigned to each Stock Adjustment Form for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific adjustment in the inventory system.</li> </ul>"},{"location":"modules/inventory/stock-adjustment/#adjustment-date","title":"Adjustment Date:","text":"<ul> <li>Description: The date when the stock adjustment is recorded or authorized.</li> <li>Purpose: Provides a timestamp for tracking the timing of the adjustment.</li> </ul>"},{"location":"modules/inventory/stock-adjustment/#adjustment-type","title":"Adjustment Type:","text":"<ul> <li>Description: Indicates the reason for the stock adjustment (e.g., write-off, write-down, damaged goods, expired items).</li> <li>Purpose: Provides context for the adjustment and aids in categorizing different types of adjustments.</li> </ul>"},{"location":"modules/inventory/stock-adjustment/#locationdepartment","title":"Location/Department:","text":"<ul> <li>Description: Specifies the location or department within the organization where the stock adjustment is taking place.</li> <li>Purpose: Identifies the specific area within the organization where the adjustment is occurring.</li> </ul>"},{"location":"modules/inventory/stock-adjustment/#authorized-by","title":"Authorized by:","text":"<p>Fields:</p> <ul> <li>Name of the Authorized Person</li> <li>Signature</li> <li>Purpose: Documents the individual or team authorized to initiate and approve the stock adjustment.</li> </ul>"},{"location":"modules/inventory/stock-adjustment/#item-details","title":"Item Details:","text":"<p>Fields:</p> <ul> <li>Item Code/ID</li> <li>Item Description</li> <li>Adjusted Quantity</li> <li>Unit of Measure</li> <li>Batch/Lot Number (if applicable)</li> <li>Serial Numbers (if applicable)</li> <li>Purpose: Provides a detailed list of the items for which adjustments are being made, including quantity and specific identifiers.</li> </ul>"},{"location":"modules/inventory/stock-adjustment/#reason-for-adjustment","title":"Reason for Adjustment:","text":"<ul> <li>Description: A brief explanation or code indicating the reason for the stock adjustment (e.g., damage, obsolescence, miscount).</li> <li>Purpose: Provides context for the adjustment, aiding in tracking and reporting.</li> </ul>"},{"location":"modules/inventory/stock-adjustment/#commentsnotes","title":"Comments/Notes:","text":"<ul> <li>Description: Space for additional comments, notes, or observations related to the stock adjustment.</li> <li>Purpose: Allows for any relevant information not covered by other fields to be documented.</li> </ul>"},{"location":"modules/inventory/stock-adjustment/#before-and-after-quantity","title":"Before and After Quantity:","text":"<p>Fields:</p> <ul> <li>Initial Quantity</li> <li>Adjusted Quantity</li> <li>Purpose: Highlights the original quantity and the adjusted quantity after the adjustment is made.</li> </ul>"},{"location":"modules/inventory/stock-adjustment/#cost-or-valuation-impact","title":"Cost or Valuation Impact:","text":"<p>Fields:</p> <ul> <li>Initial Cost/Valuation</li> <li>Adjusted Cost/Valuation</li> <li>Purpose: Indicates the impact on the overall cost or valuation of the inventory as a result of the adjustment.</li> </ul>"},{"location":"modules/inventory/stock-adjustment/#approval-signatures","title":"Approval Signatures:","text":"<p>Fields:</p> <ul> <li>Signatures of Authorized Personnel</li> <li>Approval Date</li> <li>Purpose: Confirms that the stock adjustment has been reviewed and approved by authorized individuals.</li> </ul>"},{"location":"modules/inventory/stock-adjustment/#attachment-of-supporting-documents","title":"Attachment of Supporting Documents:","text":"<ul> <li>Description: Space for attaching any supporting documents, such as photos of damaged items or reports.</li> <li>Purpose: Provides additional details or evidence related to the stock adjustment.</li> </ul> <p>Custom Fields:</p> <ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the organization.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the Stock Adjustment Form.</li> </ul>"},{"location":"modules/inventory/stock-adjustment/#stock-adjustment-form-workflow","title":"Stock Adjustment Form Workflow:","text":""},{"location":"modules/inventory/stock-adjustment/#identification-of-need","title":"Identification of Need:","text":"<p>The need for a stock adjustment is identified, whether due to damaged goods, discrepancies in counts, or other reasons.</p>"},{"location":"modules/inventory/stock-adjustment/#form-generation","title":"Form Generation:","text":"<p>A Stock Adjustment Form is generated to formally document and authorize the adjustment.</p>"},{"location":"modules/inventory/stock-adjustment/#item-verification-and-details-entry","title":"Item Verification and Details Entry:","text":"<p>The items requiring adjustment are verified, and their details are entered into the Stock Adjustment Form.</p>"},{"location":"modules/inventory/stock-adjustment/#authorization","title":"Authorization:","text":"<p>The Stock Adjustment Form is reviewed and approved by authorized personnel within the organization.</p>"},{"location":"modules/inventory/stock-adjustment/#adjustment-execution","title":"Adjustment Execution:","text":"<p>The stock adjustment is executed based on the information in the form, updating inventory records.</p>"},{"location":"modules/inventory/stock-adjustment/#documentation-retention","title":"Documentation Retention:","text":"<p>The Stock Adjustment Form, along with related documents, is retained for record-keeping and audit purposes.</p> <p>The Stock Adjustment Form is a critical tool in maintaining accurate inventory records, reflecting changes in stock quantities and valuations accurately. It provides transparency, accountability, and a formalized process for making adjustments to the inventory.</p>"},{"location":"modules/inventory/stock-record/","title":"Stock Movement Record","text":"<p>A Stock Movement Record is a comprehensive document in the Inventory Management module of an enterprise system that tracks and records the movement of inventory items within the organization. This record provides a detailed overview of the changes in stock levels, capturing various transactions such as receipts, issues, transfers, returns, and adjustments. Below are the details of what a Stock Movement Record typically contains, including the key fields involved:</p>"},{"location":"modules/inventory/stock-record/#stock-movement-record-details","title":"Stock Movement Record Details:","text":""},{"location":"modules/inventory/stock-record/#transaction-number","title":"Transaction Number:","text":"<ul> <li>Description: A unique identifier assigned to the stock movement transaction for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific movement within the inventory.</li> </ul>"},{"location":"modules/inventory/stock-record/#transaction-date-and-time","title":"Transaction Date and Time:","text":"<ul> <li>Description: The date and time when the stock movement occurred.</li> <li>Purpose: Important for accurately recording the timing of the movement and tracking movement timelines.</li> </ul>"},{"location":"modules/inventory/stock-record/#transaction-type","title":"Transaction Type:","text":"<ul> <li>Description: Indicates the type of stock movement (e.g., receipt, issue, transfer, return, adjustment).</li> <li>Purpose: Helps categorize and track the reason for the movement.</li> </ul>"},{"location":"modules/inventory/stock-record/#source-locationwarehouse","title":"Source Location/Warehouse:","text":"<ul> <li>Description: The warehouse or location from which the inventory is originating (applicable for issues or transfers).</li> <li>Purpose: Identifies the source of the goods within the organization.</li> </ul>"},{"location":"modules/inventory/stock-record/#destination-locationwarehouse","title":"Destination Location/Warehouse:","text":"<ul> <li>Description: The warehouse or location to which the inventory is moving (applicable for receipts or transfers).</li> <li>Purpose: Identifies the destination of the goods within the organization.</li> </ul>"},{"location":"modules/inventory/stock-record/#customersupplier-information-if-applicable","title":"Customer/Supplier Information (If Applicable):","text":"<ul> <li>Description: Details about the customer or supplier associated with the stock movement.</li> <li>Purpose: Helps in identifying the source or destination of the goods, especially in transactions involving external entities.</li> </ul>"},{"location":"modules/inventory/stock-record/#goods-moved","title":"Goods Moved:","text":"<ul> <li>Description: A detailed list of the products or items involved in the movement.</li> </ul> <p>Fields:</p> <ul> <li>SKU (Stock Keeping Unit) or Item Code</li> <li>Description of the item</li> <li>Quantity moved</li> <li>Unit of measure (e.g., each, box, pallet)</li> <li>Serial numbers or batch information (if applicable)</li> </ul>"},{"location":"modules/inventory/stock-record/#unit-cost","title":"Unit Cost:","text":"<ul> <li>Description: The cost per unit of each item involved in the movement.</li> <li>Purpose: Essential for calculating the total cost of the items moved and for financial reporting.</li> </ul>"},{"location":"modules/inventory/stock-record/#total-cost","title":"Total Cost:","text":"<ul> <li>Description: The total cost incurred for all the items involved in the stock movement.</li> <li>Calculation: Unit Cost \u00d7 Quantity Moved.</li> <li>Purpose: Provides the overall financial impact of the movement on the organization's budget.</li> </ul>"},{"location":"modules/inventory/stock-record/#employeeuser-information","title":"Employee/User Information:","text":"<ul> <li> <p>Description: Details about the individual or department responsible for initiating or approving the stock movement.</p> </li> <li> <p>Purpose: Helps in tracing accountability and resolving any discrepancies during the movement process.</p> </li> </ul>"},{"location":"modules/inventory/stock-record/#movement-status","title":"Movement Status:","text":"<ul> <li>Description: Indicates the status of the movement (e.g., pending, in progress, completed).</li> <li>Purpose: Provides visibility into the progress of the movement and allows for tracking.</li> </ul>"},{"location":"modules/inventory/stock-record/#reason-for-movement","title":"Reason for Movement:","text":"<ul> <li>Description: Provides information about the reason or justification for the stock movement.</li> <li>Purpose: Offers context and helps in understanding the motivation behind the movement.</li> </ul>"},{"location":"modules/inventory/stock-record/#adjustment-type-if-applicable","title":"Adjustment Type (If Applicable):","text":"<ul> <li>Description: In case of adjustment transactions, indicates the type of adjustment (e.g., increase, decrease, write-off).</li> <li>Purpose: Specifies the nature of adjustments made to stock levels.</li> </ul>"},{"location":"modules/inventory/stock-record/#remarksnotes","title":"Remarks/Notes:","text":"<ul> <li>Description: Free-text field where additional comments, observations, or instructions related to the stock movement can be recorded.</li> <li>Purpose: Offers flexibility for including any relevant information not covered by structured fields.</li> </ul>"},{"location":"modules/inventory/stock-record/#stock-movement-record-workflow","title":"Stock Movement Record Workflow:","text":""},{"location":"modules/inventory/stock-record/#initiation","title":"Initiation:","text":"<p>A Stock Movement Record is initiated when there is a need to record the movement of inventory items within the organization.</p>"},{"location":"modules/inventory/stock-record/#documentation","title":"Documentation:","text":"<p>Relevant details are documented, including the transaction number, date, transaction type, source and destination locations, and a list of items involved.</p>"},{"location":"modules/inventory/stock-record/#verification","title":"Verification:","text":"<p>The items involved in the movement are verified against the accompanying documentation to ensure accuracy.</p>"},{"location":"modules/inventory/stock-record/#recording","title":"Recording:","text":"<p>The Stock Movement Record details are recorded in the enterprise system, updating inventory levels and financial records.</p>"},{"location":"modules/inventory/stock-record/#notification-optional","title":"Notification (Optional):","text":"<p>Depending on the organization's processes, notifications may be sent to relevant stakeholders or departments.</p>"},{"location":"modules/inventory/stock-record/#integration","title":"Integration:","text":"<p>The Stock Movement Record data may be integrated with other modules, such as Accounting, to ensure accurate financial reporting.</p>"},{"location":"modules/inventory/stock-record/#physical-movement","title":"Physical Movement:","text":"<p>The physical movement of goods takes place based on the details recorded in the Stock Movement Record.</p>"},{"location":"modules/inventory/stock-record/#status-update","title":"Status Update:","text":"<p>The status of the movement is updated to reflect its progress (e.g., from pending to completed).</p>"},{"location":"modules/inventory/stock-record/#verification-and-reconciliation","title":"Verification and Reconciliation:","text":"<p>After the movement, a verification process may occur, and the Stock Movement Record is reconciled with other relevant documents.</p>"},{"location":"modules/inventory/stock-record/#reporting","title":"Reporting:","text":"<p>Reports related to Stock Movement Records, such as movement analysis reports, may be generated for analysis and decision-making.</p> <p>The Stock Movement Record serves as a comprehensive log of all significant inventory movements within the organization, providing insights into stock flow, aiding in inventory management, and supporting financial reporting.</p>"},{"location":"modules/inventory/stock-return/","title":"Stock Return","text":"<p>A Stock Return is a transaction within the Inventory Management module of an enterprise system that involves the process of returning goods from a customer or another location back to the organization's inventory. This can happen for various reasons, such as product defects, customer dissatisfaction, or overstock situations. The Stock Return process helps in managing and tracking returned items efficiently. Below are the details of what a Stock Return typically contains, including the key fields involved:</p>"},{"location":"modules/inventory/stock-return/#stock-return-details","title":"Stock Return Details:","text":""},{"location":"modules/inventory/stock-return/#return-number","title":"Return Number:","text":"<ul> <li>Description: A unique identifier assigned to the Stock Return for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific return transaction.</li> </ul>"},{"location":"modules/inventory/stock-return/#return-date","title":"Return Date:","text":"<ul> <li>Description: The date on which the stock return is initiated or completed.</li> <li>Purpose: Important for accurately recording the timing of the return and tracking return timelines.</li> </ul>"},{"location":"modules/inventory/stock-return/#customer-information-if-applicable","title":"Customer Information (If Applicable):","text":"<ul> <li>Description: Details about the customer returning the goods, including customer name, ID, or other identifiers.</li> <li>Purpose: Helps in identifying the source of the return and maintaining customer relationships.</li> </ul>"},{"location":"modules/inventory/stock-return/#return-type","title":"Return Type:","text":"<ul> <li>Description: Indicates the reason or type of the stock return (e.g., defective, customer dissatisfaction, overstock).</li> <li>Purpose: Helps categorize and track the reason for the return.</li> </ul>"},{"location":"modules/inventory/stock-return/#goods-returned","title":"Goods Returned:","text":"<ul> <li>Description: A detailed list of the products or items being returned.</li> </ul> <p>Fields:</p> <ul> <li>SKU (Stock Keeping Unit) or Item Code</li> <li>Description of the item</li> <li>Quantity returned</li> <li>Unit of measure (e.g., each, box, pallet)</li> <li>Serial numbers or batch information (if applicable)</li> </ul>"},{"location":"modules/inventory/stock-return/#condition-of-returned-goods","title":"Condition of Returned Goods:","text":"<ul> <li>Description: Indicates the condition of the returned goods (e.g., unused, damaged, defective).</li> <li>Purpose: Helps in assessing the state of the returned items and determining appropriate actions.</li> </ul>"},{"location":"modules/inventory/stock-return/#unit-cost","title":"Unit Cost:","text":"<ul> <li>Description: The cost per unit of each item being returned.</li> <li>Purpose: Essential for calculating the total cost of the items being returned and for financial reporting.</li> </ul>"},{"location":"modules/inventory/stock-return/#total-cost","title":"Total Cost:","text":"<ul> <li>Description: The total cost incurred for all the items returned in the Stock Return.</li> <li>Calculation: Unit Cost \u00d7 Quantity Returned.</li> <li>Purpose: Provides the overall financial impact of the returned goods on the organization's budget.</li> </ul>"},{"location":"modules/inventory/stock-return/#return-status","title":"Return Status:","text":"<ul> <li>Description: Indicates the status of the return (e.g., pending, in progress, completed).</li> <li>Purpose: Provides visibility into the progress of the return and allows for tracking.</li> </ul>"},{"location":"modules/inventory/stock-return/#employeeuser-information","title":"Employee/User Information:","text":"<ul> <li>Description: Details about the individual or department responsible for initiating the stock return.</li> <li>Purpose: Helps in tracing accountability and resolving any discrepancies during the return process.</li> </ul>"},{"location":"modules/inventory/stock-return/#return-order-if-applicable","title":"Return Order (If Applicable):","text":"<ul> <li>Description: If the stock return is initiated based on a return order, this field includes the reference number.</li> <li>Purpose: Links the Stock Return to the original return order, aiding in reconciliation and tracking.</li> </ul>"},{"location":"modules/inventory/stock-return/#remarksnotes","title":"Remarks/Notes:","text":"<ul> <li>Description: Free-text field where additional comments, observations, or instructions related to the Stock Return can be recorded.</li> <li>Purpose: Offers flexibility for including any relevant information not covered by structured fields.</li> </ul>"},{"location":"modules/inventory/stock-return/#stock-return-workflow","title":"Stock Return Workflow:","text":""},{"location":"modules/inventory/stock-return/#initiation","title":"Initiation:","text":"<p>A Stock Return is initiated when there is a need to return goods from a customer or another location back to the organization's inventory.</p>"},{"location":"modules/inventory/stock-return/#documentation","title":"Documentation:","text":"<p>Relevant details are documented, including the return number, date, customer information (if applicable), and a list of items to be returned.</p>"},{"location":"modules/inventory/stock-return/#verification","title":"Verification:","text":"<p>The items to be returned are verified against the accompanying documentation to ensure accuracy.</p>"},{"location":"modules/inventory/stock-return/#recording","title":"Recording:","text":"<p>The Stock Return details are recorded in the enterprise system, updating inventory levels and financial records.</p>"},{"location":"modules/inventory/stock-return/#notification-optional","title":"Notification (Optional):","text":"<p>Depending on the organization's processes, notifications may be sent to relevant stakeholders or departments.</p>"},{"location":"modules/inventory/stock-return/#integration","title":"Integration:","text":"<p>The Stock Return data may be integrated with other modules, such as Accounting, to ensure accurate financial reporting.</p>"},{"location":"modules/inventory/stock-return/#return-process","title":"Return Process:","text":"<p>The physical return of goods takes place, and the items are received back into the organization's inventory.</p>"},{"location":"modules/inventory/stock-return/#condition-assessment","title":"Condition Assessment:","text":"<p>The condition of returned goods is assessed to determine appropriate actions (e.g., restocking, refurbishing, disposal).</p>"},{"location":"modules/inventory/stock-return/#disposition","title":"Disposition:","text":"<p>Based on the assessment, returned items may be restocked, repaired, or processed for disposal.</p>"},{"location":"modules/inventory/stock-return/#reporting","title":"Reporting:","text":"<p>Reports related to Stock Returns, such as return analysis reports, may be generated for analysis and decision-making.</p> <p>The Stock Return process is crucial for maintaining accurate inventory records, managing customer relationships, and implementing effective strategies for dealing with returned goods. It supports inventory control and contributes to customer satisfaction by facilitating the handling of returns in a streamlined and organized manner.</p>"},{"location":"modules/inventory/stock-transfer/","title":"Stock Transfer","text":"<p>A Stock Transfer is a transaction within the Inventory Management module of an enterprise system that involves the movement of inventory items from one location or warehouse to another within the organization. This process is crucial for maintaining accurate stock levels, optimizing inventory distribution, and ensuring that goods are available where they are needed. Below are the details of what a Stock Transfer typically contains, including the key fields involved:</p>"},{"location":"modules/inventory/stock-transfer/#stock-transfer-details","title":"Stock Transfer Details:","text":""},{"location":"modules/inventory/stock-transfer/#transfer-number","title":"Transfer Number:","text":"<ul> <li>Description: A unique identifier assigned to the Stock Transfer for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific transfer transaction.</li> </ul>"},{"location":"modules/inventory/stock-transfer/#transfer-date","title":"Transfer Date:","text":"<ul> <li>Description: The date on which the stock transfer is initiated or completed.</li> <li>Purpose: Important for accurately recording the timing of the transfer and tracking transfer timelines.</li> </ul>"},{"location":"modules/inventory/stock-transfer/#source-warehouselocation","title":"Source Warehouse/Location:","text":"<ul> <li>Description: The warehouse or location from which the inventory is being transferred.</li> <li>Purpose: Identifies the origin of the goods within the organization.</li> </ul>"},{"location":"modules/inventory/stock-transfer/#destination-warehouselocation","title":"Destination Warehouse/Location:","text":"<ul> <li>Description: The warehouse or location to which the inventory is being transferred.</li> <li>Purpose: Identifies the destination of the goods within the organization.</li> </ul>"},{"location":"modules/inventory/stock-transfer/#transfer-type","title":"Transfer Type:","text":"<ul> <li>Description: Indicates the purpose or type of the stock transfer (e.g., inter-warehouse transfer, consolidation, redistribution).</li> <li>Purpose: Helps categorize and track the reason for the transfer.</li> </ul>"},{"location":"modules/inventory/stock-transfer/#goods-transferred","title":"Goods Transferred:","text":"<ul> <li>Description: A detailed list of the products or items being transferred.</li> </ul> <p>Fields:</p> <ul> <li>SKU (Stock Keeping Unit) or Item Code</li> <li>Description of the item</li> <li>Quantity transferred</li> <li>Unit of measure (e.g., each, box, pallet)</li> <li>Serial numbers or batch information (if applicable)</li> </ul>"},{"location":"modules/inventory/stock-transfer/#unit-cost","title":"Unit Cost:","text":"<ul> <li>Description: The cost per unit of each item being transferred.</li> <li>Purpose: Essential for calculating the total cost of the items being transferred and for financial reporting.</li> </ul>"},{"location":"modules/inventory/stock-transfer/#total-cost","title":"Total Cost:","text":"<ul> <li>Description: The total cost incurred for all the items transferred in the Stock Transfer.</li> <li>Calculation: Unit Cost \u00d7 Quantity Transferred.</li> <li>Purpose: Provides the overall financial impact of the transferred goods on the organization's budget.</li> </ul>"},{"location":"modules/inventory/stock-transfer/#transfer-status","title":"Transfer Status:","text":"<ul> <li>Description: Indicates the status of the transfer (e.g., pending, in progress, completed).</li> <li>Purpose: Provides visibility into the progress of the transfer and allows for tracking.</li> </ul>"},{"location":"modules/inventory/stock-transfer/#employeeuser-information","title":"Employee/User Information:","text":"<ul> <li>Description: Details about the individual or department responsible for initiating the stock transfer.</li> <li>Purpose: Helps in tracing accountability and resolving any discrepancies during the transfer process.</li> </ul>"},{"location":"modules/inventory/stock-transfer/#transfer-order-if-applicable","title":"Transfer Order (If Applicable):","text":"<ul> <li>Description: If the stock transfer is initiated based on a transfer order, this field includes the reference number.</li> <li>Purpose: Links the Stock Transfer to the original transfer order, aiding in reconciliation and tracking.</li> </ul>"},{"location":"modules/inventory/stock-transfer/#remarksnotes","title":"Remarks/Notes:","text":"<ul> <li>Description: Free-text field where additional comments, observations, or instructions related to the Stock Transfer can be recorded.</li> <li>Purpose: Offers flexibility for including any relevant information not covered by structured fields.</li> </ul>"},{"location":"modules/inventory/stock-transfer/#stock-transfer-workflow","title":"Stock Transfer Workflow:","text":""},{"location":"modules/inventory/stock-transfer/#initiation","title":"Initiation:","text":"<p>A Stock Transfer is initiated when there is a need to move inventory from one location to another.</p>"},{"location":"modules/inventory/stock-transfer/#documentation","title":"Documentation:","text":"<p>Relevant details are documented, including the transfer number, date, source and destination locations, and a list of items to be transferred.</p>"},{"location":"modules/inventory/stock-transfer/#verification","title":"Verification:","text":"<p>The items to be transferred are verified against the accompanying documentation to ensure accuracy.</p>"},{"location":"modules/inventory/stock-transfer/#recording","title":"Recording:","text":"<p>The Stock Transfer details are recorded in the enterprise system, updating inventory levels and financial records.</p>"},{"location":"modules/inventory/stock-transfer/#notification-optional","title":"Notification (Optional):","text":"<p>Depending on the organization's processes, notifications may be sent to relevant stakeholders or departments.</p>"},{"location":"modules/inventory/stock-transfer/#integration","title":"Integration:","text":"<p>The Stock Transfer data may be integrated with other modules, such as Accounting, to ensure accurate financial reporting.</p>"},{"location":"modules/inventory/stock-transfer/#transfer-process","title":"Transfer Process:","text":"<p>The physical transfer of goods takes place from the source location to the destination location.</p>"},{"location":"modules/inventory/stock-transfer/#destination-confirmation","title":"Destination Confirmation:","text":"<p>Confirmation of the successful arrival of goods at the destination location may be recorded.</p>"},{"location":"modules/inventory/stock-transfer/#reporting","title":"Reporting:","text":"<p>Reports related to Stock Transfers, such as inter-warehouse transfer reports, may be generated for analysis and decision-making.</p> <p>The Stock Transfer process is essential for optimizing inventory distribution, ensuring that goods are available where they are needed, and preventing stockouts or overstock situations. It supports efficient warehouse management and contributes to overall inventory control within the organization.</p>"},{"location":"modules/inventory/store/","title":"Store","text":"<p>The entity Store typically represents a physical location or warehouse where goods or products are stored. Here are the main fields and processes related to the Store entity:</p>"},{"location":"modules/inventory/store/#store-fields","title":"Store Fields:","text":""},{"location":"modules/inventory/store/#store-number","title":"Store Number:","text":"<p>A unique identifier assigned to each store for tracking and reference purposes.</p>"},{"location":"modules/inventory/store/#store-name","title":"Store Name:","text":"<p>The name or label associated with the store for easy identification.</p>"},{"location":"modules/inventory/store/#location","title":"Location:","text":"<p>The physical address or location of the store, providing details such as city, state, and postal code.</p>"},{"location":"modules/inventory/store/#contact-information","title":"Contact Information:","text":"<p>Contact details for the store, including phone number and email address.</p>"},{"location":"modules/inventory/store/#managersupervisor","title":"Manager/Supervisor:","text":"<p>Name and contact information of the person responsible for overseeing the store.</p>"},{"location":"modules/inventory/store/#capacity","title":"Capacity:","text":"<p>The storage capacity of the store, indicating the maximum amount of inventory it can hold.</p>"},{"location":"modules/inventory/store/#categoriessections","title":"Categories/Sections:","text":"<p>Division of the store into categories or sections based on product types or classifications.</p>"},{"location":"modules/inventory/store/#inventory-tracking-method","title":"Inventory Tracking Method:","text":"<p>The method used to track inventory within the store (e.g., FIFO, LIFO).</p>"},{"location":"modules/inventory/store/#security-measures","title":"Security Measures:","text":"<p>Information about security measures in place to protect stored inventory, such as surveillance systems or access controls.</p>"},{"location":"modules/inventory/store/#temperature-and-environment-conditions","title":"Temperature and Environment Conditions:","text":"<p>Details about temperature and environmental conditions within the store, especially if certain products require specific storage conditions.</p>"},{"location":"modules/inventory/store/#store-status","title":"Store Status:","text":"<p>Indicates whether the store is active, inactive, or under maintenance.</p>"},{"location":"modules/inventory/store/#store-processes","title":"Store Processes:","text":""},{"location":"modules/inventory/store/#inventory-receiving","title":"Inventory Receiving:","text":"<p>Goods are received at the store from suppliers or production facilities. This involves verifying the received items against purchase orders.</p>"},{"location":"modules/inventory/store/#stockingshelving","title":"Stocking/Shelving:","text":"<p>Inventory items are organized and shelved within the store based on categories or storage requirements.</p>"},{"location":"modules/inventory/store/#inventory-retrievalpicking","title":"Inventory Retrieval/Picking:","text":"<p>When products are needed for orders or shipments, they are retrieved from the store based on demand.</p>"},{"location":"modules/inventory/store/#stock-level-monitoring","title":"Stock Level Monitoring:","text":"<p>Regular monitoring of inventory levels to ensure optimal stock levels are maintained and reorder points are managed effectively.</p>"},{"location":"modules/inventory/store/#inventory-transfers","title":"Inventory Transfers:","text":"<p>Movement of inventory between different stores, if applicable, to balance stock levels or meet demand in specific locations.</p>"},{"location":"modules/inventory/store/#inventory-adjustments","title":"Inventory Adjustments:","text":"<p>Recording and adjusting inventory levels in case of discrepancies, damage, or loss.</p>"},{"location":"modules/inventory/store/#cycle-counting","title":"Cycle Counting:","text":"<p>Periodic counting of a subset of inventory items within the store to verify accuracy without requiring a complete inventory shutdown.</p>"},{"location":"modules/inventory/store/#stocktakingphysical-inventory","title":"Stocktaking/Physical Inventory:","text":"<p>A comprehensive audit of all items in the store to reconcile physical inventory with recorded levels.</p>"},{"location":"modules/inventory/store/#returns-processing","title":"Returns Processing:","text":"<p>Handling and processing of returned items, whether from customers or other departments.</p>"},{"location":"modules/inventory/store/#order-fulfillment","title":"Order Fulfillment:","text":"<p>Picking, packing, and shipping items from the store to fulfill customer orders.</p>"},{"location":"modules/inventory/store/#stock-status-reporting","title":"Stock Status Reporting:","text":"<p>Regular reporting on the status of inventory levels, stock movements, and any issues or discrepancies.</p>"},{"location":"modules/inventory/store/#security-monitoring","title":"Security Monitoring:","text":"<p>Continuous monitoring of security measures to prevent theft or unauthorized access to the stored inventory.</p>"},{"location":"modules/inventory/store/#maintenance-and-upkeep","title":"Maintenance and Upkeep:","text":"<p>Regular maintenance of the store infrastructure and equipment to ensure a safe and efficient storage environment.</p>"},{"location":"modules/inventory/store/#disposalobsolete-inventory-handling","title":"Disposal/Obsolete Inventory Handling:","text":"<p>Processes for handling and disposing of obsolete or expired inventory items.</p>"},{"location":"modules/inventory/store/#performance-analysis","title":"Performance Analysis:","text":"<p>Analyzing store performance metrics, such as turnover rates, to optimize store efficiency.</p> <p>These processes and fields contribute to the effective management of inventory within a store, ensuring accurate tracking, timely fulfillment, and overall operational efficiency. The specific fields and processes may vary based on the size, industry, and complexity of the inventory management system.</p>"},{"location":"modules/purchasing/","title":"Purchasing","text":""},{"location":"modules/purchasing/#purchase-requisition-pr","title":"Purchase Requisition (PR)","text":"<p>A Purchase Requisition is a document initiated by internal departments to request the purchase of goods or services. It outlines the specific items or services needed, quantities, and any other relevant details.</p> <p>Key Components:</p> <ul> <li>Requester Information: Details of the individual or department making the request.</li> <li>Item Details: Description, quantity, and specifications of the items or services requested.</li> <li>Budget Information: The budget allocation or cost center associated with the request.</li> <li>Approval Workflow: Steps for obtaining necessary approvals before proceeding with the purchase.</li> </ul> <p>Process:</p> <ul> <li>An internal department identifies the need for goods or services.</li> <li>A Purchase Requisition is created to formalize the request.</li> <li>The requisition undergoes an approval process, involving relevant stakeholders.</li> <li>Once approved, the Purchase Requisition serves as the basis for creating a Purchase Order.</li> </ul>"},{"location":"modules/purchasing/#purchase-order-po","title":"Purchase Order (PO)","text":"<p>A Purchase Order is a formal document issued by the buyer to a supplier, indicating the details of the products or services to be purchased. It serves as a contractual agreement between the buyer and the supplier.</p> <p>Key Components:</p> <ul> <li>Buyer and Supplier Information: Details of both the buyer (the organization) and the supplier.</li> <li>Item Details: Description, quantity, specifications, and prices of the products or services being purchased.</li> <li>Delivery Information: Shipping address, delivery date, and any specific delivery instructions.</li> <li>Terms and Conditions: Legal and contractual terms governing the purchase, including payment terms and warranties.</li> </ul> <p>Process:</p> <ul> <li>A Purchase Order is generated based on an approved Purchase Requisition.</li> <li>The Purchase Order is sent to the supplier, indicating the intent to purchase.</li> <li>The supplier acknowledges and accepts the Purchase Order.</li> <li>The goods or services are delivered, and the buyer verifies the delivery against the Purchase Order.</li> </ul>"},{"location":"modules/purchasing/#request-for-quotation-rfq","title":"Request for Quotation (RFQ):","text":"<p>A document sent to potential suppliers, requesting them to submit quotations for specific products or services. Initiates the procurement process, allowing the buyer to compare and evaluate offers from different suppliers.</p> <p>Key Components:</p> <ul> <li>Buyer Information</li> <li>Item Descriptions</li> <li>Quantity</li> <li>Desired Delivery Date</li> </ul> <p>Process:</p> <ul> <li>The buyer generates an RFQ, outlining the products or services needed.</li> <li>The RFQ is sent to potential suppliers.</li> <li>Suppliers submit quotations in response to the RFQ</li> </ul>"},{"location":"modules/purchasing/#quotation-comparison-sheet","title":"Quotation Comparison Sheet:","text":"<p>A document that compares the quotations received from different suppliers, highlighting key factors such as price, delivery time, and terms. Assists in making informed decisions by evaluating and selecting the most favorable supplier.</p> <p>Key Components:</p> <ul> <li>Supplier Information</li> <li>Quoted Prices</li> <li>Delivery Time</li> <li>Terms and Conditions</li> </ul> <p>Process Steps:</p> <ul> <li>Quotations from different suppliers are gathered.</li> <li>A comparison sheet is created, analyzing and comparing key factors.</li> <li>A supplier is selected based on the analysis.</li> </ul>"},{"location":"modules/purchasing/#supplier-agreement","title":"Supplier Agreement:","text":"<p>A formal agreement or contract between the buyer and the selected supplier, outlining terms, conditions, and expectations. Establishes a legally binding relationship, specifying the rights and obligations of both parties.</p> <p>Key Components:</p> <ul> <li>Contract Duration</li> <li>Terms and Conditions</li> <li>Responsibilities of Both Parties</li> <li>Penalties and Liabilities</li> </ul> <p>Process:</p> <ul> <li>A formal contract is drafted based on mutual agreement.</li> <li>Both parties review and sign the contract.</li> <li>The contract is stored for future reference.</li> </ul>"},{"location":"modules/purchasing/#goods-receipt-note-grn","title":"Goods Receipt Note (GRN):","text":"<p>A document acknowledging the receipt of goods, typically generated by the receiving department. Confirms that the goods received match the details specified in the purchase order.</p> <p>Key Components:</p> <ul> <li>Item Details</li> <li>Quantity Received</li> <li>Condition of Goods</li> <li>Date and Time of Receipt</li> </ul> <p>Process:</p> <ul> <li>Upon receiving goods, the receiving department generates a GRN.</li> <li>The GRN is compared with the PO to ensure accuracy.</li> <li>The GRN is shared with the finance department for payment processing.</li> </ul>"},{"location":"modules/purchasing/#purchase-returndebit-note","title":"Purchase Return/Debit Note:","text":"<p>A document issued by the buyer to the supplier to request a return of goods or to address discrepancies in the delivered items. Formalizes the process of returning goods or resolving issues related to the delivered products.</p> <p>Key Components:</p> <ul> <li>Reason for Return</li> <li>Item Details</li> <li>Quantity to be Returned</li> <li>Adjusted Amount</li> </ul> <p>Process:</p> <ul> <li>The buyer identifies discrepancies or issues with delivered goods.</li> <li>A purchase return/debit note is generated.</li> <li>The supplier acknowledges the return, and adjustments are made to accounts.</li> </ul>"},{"location":"modules/purchasing/#payment-approval","title":"Payment Approval:","text":"<p>Authorization documentation for processing payment to the supplier, often involving approvals from relevant departments. Ensures that payments are made in accordance with agreed-upon terms and conditions.</p> <p>Key Components:</p> <ul> <li>Authorized Signatures</li> <li>Payment Amount</li> <li>Bank Details</li> <li>Invoice Reference</li> </ul> <p>Process:</p> <ul> <li>The finance department verifies the invoice and supporting documents.</li> <li>Payment approval is sought from authorized personnel.</li> <li>Once approved, the payment is processed.</li> </ul>"},{"location":"modules/purchasing/#purchase-order-change-request","title":"Purchase Order Change Request:","text":"<p>A formal request to modify details in a previously issued purchase order, such as quantity, delivery date, or specifications. Accommodates changes in requirements or circumstances that impact the original purchase order.</p> <p>Key Components:</p> <ul> <li>Reason for Change</li> <li>Modified Details (Quantity, Delivery Date, etc.)</li> <li>Approval Signatures</li> </ul> <p>Process:</p> <ul> <li>A request for change in the original purchase order is generated.</li> <li>The change is reviewed and approved by relevant personnel.</li> <li>The modified purchase order is issued to the supplier.</li> </ul>"},{"location":"modules/purchasing/#purchase-invoice","title":"Purchase Invoice","text":"<p>The Purchase Invoice is a document sent by the supplier to the buyer, requesting payment for the delivered goods or services. It outlines the agreed-upon prices and any additional charges.</p> <p>Key Components:</p> <ul> <li>Invoice Number: A unique identifier for the invoice.</li> <li>Itemized Charges: Detailed breakdown of costs, including unit prices, quantities, and total amounts.</li> <li>Payment Terms: Conditions specifying when and how payment should be made.</li> <li>Goods Receipt Confirmation: Reference to the Goods Receipt Note, confirming the receipt of goods.</li> </ul> <p>Process:</p> <ul> <li>The supplier sends an invoice to the buyer upon delivering the goods or completing services.</li> <li>The buyer reviews the invoice against the Goods Receipt Note and the original Purchase Order.</li> <li>If everything is in order, the buyer processes the invoice for payment.</li> </ul>"},{"location":"modules/purchasing/#purchase-payment-receipt","title":"Purchase Payment Receipt","text":"<p>After a company receives goods or services from a supplier and is invoiced for the purchase, they make a payment to the supplier. In return, the buying company generates a document known as a \"Supplier Payment Receipt\" or \"Purchase Payment Receipt\" to acknowledge the payment. Confirms that the buying company has made the payment against the received Purchase Invoice. Similar to the sales receipt, the payment receipt for a purchase may include details such as the payment date, amount, payment method, and any remaining balance.</p> <p>Key Components:</p> <ul> <li>Receipt Number: A unique identifier for the payment receipt.</li> <li>Payment Date: The date on which the payment was received.</li> <li>Payment Amount: The total amount received from the customer.</li> <li>Payment Method: The method used by the company to make the payment.</li> </ul> <p>Process:</p> <ul> <li>The company makes a payment based on the issued invoice.</li> <li>The company generates a Payment Receipt to confirm the receipt of payment.</li> <li>The Payment Receipt may be provided to the supplier as proof of payment.</li> </ul>"},{"location":"modules/purchasing/#supplier-performance-evaluation","title":"Supplier Performance Evaluation:","text":"<p>A document that assesses and evaluates the performance of suppliers based on predefined criteria. Provides feedback on supplier performance and helps in making informed decisions about continuing or terminating relationships.</p> <p>Key Components:</p> <ul> <li>Criteria for Evaluation</li> <li>Ratings/Scoring</li> <li>Feedback and Comments</li> <li>Improvement Recommendations</li> </ul> <p>Process:</p> <ul> <li>Periodic evaluations are conducted based on predefined criteria.</li> <li>Performance is scored, and feedback is documented.</li> <li>Improvement recommendations are communicated to the supplier.</li> </ul> <p>These documents collectively facilitate a streamlined procurement process, from the initial identification of needs through to the payment for goods or services received. They help maintain transparency, accountability, and efficiency in the purchasing workflow.</p>"},{"location":"modules/purchasing/debit-note/","title":"Debit Note","text":"<p>A Debit Note in the context of purchasing is a document issued by a buyer to inform a supplier about a debit made to the supplier's account. It typically occurs when there is an overpayment, an adjustment in the quantity or value of goods, or a correction in the invoiced amount. The Debit Note serves to formally communicate the details of the debit transaction and may be used to request a refund or to adjust future payments. Here are the details of what a Debit Note in Purchasing generally contains, including key fields:</p>"},{"location":"modules/purchasing/debit-note/#debit-note-purchasing-details","title":"Debit Note (Purchasing) Details:","text":""},{"location":"modules/purchasing/debit-note/#debit-note-number","title":"Debit Note Number:","text":"<ul> <li>Description: A unique identifier assigned to each Debit Note for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific debit transaction.</li> </ul>"},{"location":"modules/purchasing/debit-note/#debit-note-date","title":"Debit Note Date:","text":"<ul> <li>Description: The date when the Debit Note is issued.</li> <li>Purpose: Provides a timestamp for tracking the timing of the debit transaction.</li> </ul>"},{"location":"modules/purchasing/debit-note/#supplier-information","title":"Supplier Information:","text":"<p>Fields:</p> <ul> <li>Supplier Name</li> <li>Supplier Address</li> <li>Supplier Contact Information</li> <li>Purpose: Identifies the supplier to whom the Debit Note is addressed.</li> </ul>"},{"location":"modules/purchasing/debit-note/#buyer-information","title":"Buyer Information:","text":"<p>Fields:</p> <ul> <li>Buyer Name</li> <li>Buyer Contact Information</li> <li>Purpose: Specifies the buyer or purchasing entity issuing the Debit Note.</li> </ul>"},{"location":"modules/purchasing/debit-note/#reference-document","title":"Reference Document:","text":"<p>Fields:</p> <ul> <li>Original Invoice Number</li> <li>Original Invoice Date</li> <li>Purchase Order Number</li> <li>Purpose: References the original invoice and purchase order related to the transaction being adjusted.</li> </ul>"},{"location":"modules/purchasing/debit-note/#reason-for-debit","title":"Reason for Debit:","text":"<ul> <li>Description: A detailed explanation or code indicating the reason for the debit. This could include overpayment, quantity adjustments, pricing discrepancies, etc.</li> <li>Purpose: Provides context for the debit transaction, helping the supplier understand the nature of the adjustment.</li> </ul>"},{"location":"modules/purchasing/debit-note/#item-details","title":"Item Details:","text":"<p>Fields:</p> <ul> <li>Item Code/ID</li> <li>Item Description</li> <li>Quantity</li> <li>Unit Price</li> <li>Total Amount</li> <li>Purpose: Lists the specific items for which the debit is being issued, including details of quantity and pricing adjustments.</li> </ul>"},{"location":"modules/purchasing/debit-note/#debit-amount","title":"Debit Amount:","text":"<p>Fields:</p> <ul> <li>Total Debit Amount</li> <li>Breakdown of Debit Amount (if applicable)</li> <li>Purpose: Specifies the total debit amount and, if needed, provides a breakdown of how the amount is calculated.</li> </ul>"},{"location":"modules/purchasing/debit-note/#payment-instructions-if-applicable","title":"Payment Instructions (if applicable):","text":"<ul> <li>Description: Any specific instructions for refunding the debit amount, adjusting future invoices, or other payment-related details.</li> <li>Purpose: Guides the supplier on how to handle the financial aspect of the debit.</li> </ul>"},{"location":"modules/purchasing/debit-note/#authorized-signatures","title":"Authorized Signatures:","text":"<p>Fields:</p> <ul> <li>Signature of the Person Authorizing the Debit Note</li> <li>Approval Date</li> <li>Purpose: Confirms that the Debit Note has been reviewed and approved by authorized individuals.</li> </ul>"},{"location":"modules/purchasing/debit-note/#notescomments","title":"Notes/Comments:","text":"<ul> <li>Description: Space for additional notes, comments, or observations related to the debit transaction.</li> <li>Purpose: Allows for any relevant information not covered by other fields to be documented.</li> </ul> <p>Custom Fields:</p> <ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the organization.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the Debit Note.</li> </ul>"},{"location":"modules/purchasing/debit-note/#debit-note-workflow","title":"Debit Note Workflow:","text":""},{"location":"modules/purchasing/debit-note/#identification-of-need","title":"Identification of Need:","text":"<p>The need for a debit is identified, often due to overpayment, discrepancies in the invoiced amount, or adjustments in quantity or pricing.</p>"},{"location":"modules/purchasing/debit-note/#debit-note-generation","title":"Debit Note Generation:","text":"<p>A Debit Note is generated to formally communicate the details of the debit transaction.</p>"},{"location":"modules/purchasing/debit-note/#item-verification-and-details-entry","title":"Item Verification and Details Entry:","text":"<p>The specific items and details for which the debit is being issued are verified, and their details are entered into the Debit Note.</p>"},{"location":"modules/purchasing/debit-note/#authorization","title":"Authorization:","text":"<p>The Debit Note is reviewed and approved by authorized personnel within the buying organization.</p>"},{"location":"modules/purchasing/debit-note/#issuance-to-supplier","title":"Issuance to Supplier:","text":"<p>The Debit Note is issued to the supplier, either electronically or as a physical document.</p>"},{"location":"modules/purchasing/debit-note/#adjustment-execution","title":"Adjustment Execution:","text":"<p>The supplier acknowledges the Debit Note, and adjustments are made to the supplier's account or future transactions.</p>"},{"location":"modules/purchasing/debit-note/#documentation-retention","title":"Documentation Retention:","text":"<p>The Debit Note, along with related documents, is retained for record-keeping and audit purposes.</p> <p>The Debit Note in purchasing provides transparency and accountability in correcting financial or quantity discrepancies between the buyer and the supplier. It ensures clear communication of adjustments and facilitates the resolution of issues related to purchasing transactions.</p>"},{"location":"modules/purchasing/purchase-invoice/","title":"Purchase Invoice","text":"<p>A Purchase Invoice in the context of purchasing is a document issued by a seller to request payment from a buyer for goods or services provided. It serves as a formal request for payment and includes detailed information about the transaction. Here are the details of what a Purchase Invoice in Purchasing typically contains, including key fields:</p>"},{"location":"modules/purchasing/purchase-invoice/#purchase-invoice-purchasing-details","title":"Purchase Invoice (Purchasing) Details:","text":""},{"location":"modules/purchasing/purchase-invoice/#invoice-number","title":"Invoice Number:","text":"<p>Description: A unique identifier assigned to each Purchase Invoice for tracking and reference purposes. Purpose: Helps in uniquely identifying and referencing the specific invoice in financial and purchasing records.</p>"},{"location":"modules/purchasing/purchase-invoice/#invoice-date","title":"Invoice Date:","text":"<p>Description: The date when the Purchase Invoice is issued. Purpose: Provides a timestamp for tracking the timing of the transaction.</p>"},{"location":"modules/purchasing/purchase-invoice/#supplier-information","title":"Supplier Information:","text":"<p>Fields:</p> <p>Supplier Name Supplier Address Supplier Contact Information Purpose: Identifies the supplier issuing the invoice.</p>"},{"location":"modules/purchasing/purchase-invoice/#buyer-information","title":"Buyer Information:","text":"<p>Fields:</p> <p>Buyer Name Buyer Address Buyer Contact Information Purpose: Specifies the buyer or purchasing entity to whom the invoice is addressed.</p>"},{"location":"modules/purchasing/purchase-invoice/#payment-terms","title":"Payment Terms:","text":"<p>Description: Specifies the terms and conditions under which payment is expected, including due date, discounts, and any other relevant terms. Purpose: Provides clarity on when and how the payment is expected.</p>"},{"location":"modules/purchasing/purchase-invoice/#reference-documents","title":"Reference Documents:","text":"<p>Fields:</p> <p>Purchase Order Number Delivery Note Number (if applicable) Purpose: References the purchase order and delivery note related to the goods or services being invoiced.</p>"},{"location":"modules/purchasing/purchase-invoice/#item-details","title":"Item Details:","text":"<p>Fields:</p> <p>Item Code/ID Item Description Quantity Unit Price Total Amount Purpose: Lists the specific items or services provided, including details of quantity, pricing, and total amounts.</p>"},{"location":"modules/purchasing/purchase-invoice/#subtotal","title":"Subtotal:","text":"<p>Description: The sum of the individual item amounts before applying taxes or additional charges. Purpose: Provides the total cost of the goods or services before additional charges.</p>"},{"location":"modules/purchasing/purchase-invoice/#tax-details","title":"Tax Details:","text":"<p>Fields:</p> <p>Type of Tax (e.g., VAT, GST) Tax Rate Tax Amount Purpose: Breaks down the applicable taxes on the invoice.</p>"},{"location":"modules/purchasing/purchase-invoice/#total-amount","title":"Total Amount:","text":"<p>Description: The grand total amount payable, including the sum of the subtotal, taxes, and any additional charges. Purpose: Represents the total amount due for payment.</p>"},{"location":"modules/purchasing/purchase-invoice/#currency-information","title":"Currency Information:","text":"<p>Fields:</p> <p>Currency Code Exchange Rate (if applicable) Purpose: Specifies the currency in which the invoice is issued and, if applicable, the exchange rate.</p>"},{"location":"modules/purchasing/purchase-invoice/#payment-instructions","title":"Payment Instructions:","text":"<p>Description: Any specific instructions for making the payment, including bank details, payment methods, or other relevant instructions. Purpose: Guides the buyer on how to fulfill the payment.</p>"},{"location":"modules/purchasing/purchase-invoice/#authorized-signatures","title":"Authorized Signatures:","text":"<p>Fields:</p> <p>Signature of the Person Authorizing the Invoice Approval Date Purpose: Confirms that the Purchase Invoice has been reviewed and authorized by authorized individuals.</p>"},{"location":"modules/purchasing/purchase-invoice/#notescomments","title":"Notes/Comments:","text":"<p>Description: Space for additional notes, comments, or observations related to the invoice. Purpose: Allows for any relevant information not covered by other fields to be documented.</p> <p>Custom Fields:</p> <p>Description: Additional fields that can be customized based on the specific needs and requirements of the organization. Purpose: Allows flexibility in capturing unique information relevant to the Purchase Invoice.</p>"},{"location":"modules/purchasing/purchase-invoice/#purchase-invoice-workflow","title":"Purchase Invoice Workflow:","text":""},{"location":"modules/purchasing/purchase-invoice/#goods-or-services-delivery","title":"Goods or Services Delivery:","text":"<p>The goods or services are delivered by the supplier to the buyer as per the terms of the purchase order.</p>"},{"location":"modules/purchasing/purchase-invoice/#invoice-generation","title":"Invoice Generation:","text":"<p>The supplier generates a Purchase Invoice based on the delivered goods or services.</p>"},{"location":"modules/purchasing/purchase-invoice/#verification-of-invoice-details","title":"Verification of Invoice Details:","text":"<p>The buyer verifies the details on the Purchase Invoice against the purchase order and delivery note.</p>"},{"location":"modules/purchasing/purchase-invoice/#approval","title":"Approval:","text":"<p>The Purchase Invoice is reviewed and approved by authorized personnel within the buyer's organization.</p>"},{"location":"modules/purchasing/purchase-invoice/#payment-initiation","title":"Payment Initiation:","text":"<p>Payment is initiated by the buyer based on the information provided in the Purchase Invoice.</p>"},{"location":"modules/purchasing/purchase-invoice/#documentation-retention","title":"Documentation Retention:","text":"<p>The Purchase Invoice, along with related documents, is retained for record-keeping and audit purposes.</p> <p>The Purchase Invoice serves as a crucial document in the purchasing process, providing a formal record of the transaction and facilitating transparent and accurate financial transactions between buyers and suppliers.</p>"},{"location":"modules/purchasing/purchase-order/","title":"Purchase Order","text":"<p>A Purchase Order (PO) is a formal document issued by a buyer (typically the purchasing or procurement department within an organization) to a supplier, indicating the buyer's intent to purchase specific goods or services. The Purchase Order serves as a legally binding contract between the buyer and the supplier, outlining the terms, conditions, quantities, and prices of the agreed-upon transaction. Here are the details of what a Purchase Order typically contains, including key fields:</p>"},{"location":"modules/purchasing/purchase-order/#purchase-order-details","title":"Purchase Order Details:","text":""},{"location":"modules/purchasing/purchase-order/#purchase-order-number","title":"Purchase Order Number:","text":"<ul> <li>Description: A unique identifier assigned to each Purchase Order for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific order in the procurement system.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#issue-date","title":"Issue Date:","text":"<ul> <li>Description: The date when the Purchase Order is issued by the buyer to the supplier.</li> <li>Purpose: Provides a timestamp for tracking the timing of the order.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#supplier-information","title":"Supplier Information:","text":"<p>Fields:</p> <ul> <li>Supplier Name</li> <li>Supplier Address</li> <li>Supplier Contact Information</li> <li>Purpose: Specifies the details of the supplier to whom the Purchase Order is addressed.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#buyer-information","title":"Buyer Information:","text":"<p>Fields:</p> <ul> <li>Buyer Name</li> <li>Buyer Contact Information</li> <li>Purpose: Identifies the buyer within the organization responsible for the Purchase Order.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#delivery-address","title":"Delivery Address:","text":"<ul> <li>Description: The address to which the purchased goods or services are to be delivered.</li> <li>Purpose: Provides clarity on the location where the items are expected to be received.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#billing-address","title":"Billing Address:","text":"<ul> <li>Description: The address to which invoices related to the purchase should be sent.</li> <li>Purpose: Specifies the location for invoicing and financial transactions.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#delivery-date","title":"Delivery Date:","text":"<ul> <li>Description: The date by which the supplier is expected to deliver the goods or complete the services.</li> <li>Purpose: Sets expectations and timelines for the fulfillment of the purchase.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#payment-terms","title":"Payment Terms:","text":"<p>Fields:</p> <ul> <li>Payment Due Date</li> <li>Payment Method (e.g., Net 30, Wire Transfer)</li> <li>Purpose: Outlines the terms and conditions related to payment for the goods or services.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#currency","title":"Currency:","text":"<ul> <li>Description: The currency in which the transaction will be conducted.</li> <li>Purpose: Specifies the monetary unit for pricing and financial transactions.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#item-details","title":"Item Details:","text":"<p>Fields:</p> <ul> <li>Item Description</li> <li>Quantity</li> <li>Unit of Measure</li> <li>Unit Price</li> <li>Total Price</li> <li>Purpose: Specifies the details of the goods or services being purchased, including quantities and pricing.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#item-specifications","title":"Item Specifications:","text":"<ul> <li>Description: Detailed specifications or requirements for each item or service listed in the Purchase Order.</li> <li>Purpose: Provides clear guidelines for the supplier regarding the expected quality and characteristics of the items.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#terms-and-conditions","title":"Terms and Conditions:","text":"<ul> <li>Description: Any additional terms, conditions, or special instructions related to the purchase.</li> <li>Purpose: Clarifies expectations and establishes the contractual framework for the transaction.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#shipping-method","title":"Shipping Method:","text":"<ul> <li>Description: The method or mode of transportation for delivering the goods.</li> <li>Purpose: Specifies how the items are to be shipped and delivered.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#tax-information","title":"Tax Information:","text":"<p>Fields:</p> <ul> <li>Tax Percentage</li> <li>Tax Amount</li> <li>Purpose: Specifies any applicable taxes associated with the purchase.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#discounts","title":"Discounts:","text":"<p>Fields:</p> <ul> <li>Discount Percentage</li> <li>Discount Amount</li> <li>Purpose: Indicates any applicable discounts provided by the supplier.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#total-purchase-amount","title":"Total Purchase Amount:","text":"<ul> <li>Description: The overall total amount the buyer is obligated to pay for the entire purchase.</li> <li>Purpose: Provides a clear summary of the financial commitment associated with the Purchase Order.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#authorized-signatures","title":"Authorized Signatures:","text":"<p>Fields:</p> <ul> <li>Buyer's Signature</li> <li>Approval Signatures (if required)</li> <li>Purpose: Confirms that the Purchase Order has been reviewed and authorized for issuance.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#attachmentsdocuments","title":"Attachments/Documents:","text":"<ul> <li>Description: Space for attaching relevant documents or files related to the Purchase Order (e.g., specifications, contracts).</li> <li>Purpose: Provides additional information to support the Purchase Order.</li> </ul> <p>Custom Fields:</p> <ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the organization.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the Purchase Order.</li> </ul>"},{"location":"modules/purchasing/purchase-order/#purchase-order-workflow","title":"Purchase Order Workflow:","text":""},{"location":"modules/purchasing/purchase-order/#creation","title":"Creation:","text":"<p>The purchasing department creates a Purchase Order based on approved Purchase Requisitions or direct requests.</p>"},{"location":"modules/purchasing/purchase-order/#review-and-approval","title":"Review and Approval:","text":"<p>The Purchase Order undergoes review and approval processes, involving relevant stakeholders.</p>"},{"location":"modules/purchasing/purchase-order/#supplier-communication","title":"Supplier Communication:","text":"<p>The Purchase Order is communicated to the selected supplier, initiating the procurement process.</p>"},{"location":"modules/purchasing/purchase-order/#goodsservices-delivery","title":"Goods/Services Delivery:","text":"<p>The supplier delivers the goods or completes the services based on the specifications outlined in the Purchase Order.</p>"},{"location":"modules/purchasing/purchase-order/#invoice-matching","title":"Invoice Matching:","text":"<p>The received goods or services are matched with the Purchase Order and supplier invoice for accuracy.</p>"},{"location":"modules/purchasing/purchase-order/#payment-processing","title":"Payment Processing:","text":"<p>Upon successful verification, the finance department processes payment to the supplier.</p>"},{"location":"modules/purchasing/purchase-order/#documentation-retention","title":"Documentation Retention:","text":"<p>The Purchase Order, along with related documents, is retained for record-keeping and audit purposes.</p> <p>A well-structured Purchase Order ensures that both the buyer and the supplier have a clear understanding of the terms and conditions of the transaction. It serves as a critical document in the procurement process, providing legal protection and facilitating smooth and transparent business transactions.</p>"},{"location":"modules/purchasing/purchase-requisition/","title":"Purchase Requisition","text":"<p>A Purchase Requisition is a formal document used within an organization to initiate the procurement process. It serves as a request from a department or user within the organization to the purchasing or procurement department, indicating the need to purchase specific goods or services. The Purchase Requisition is typically the first step in the procurement workflow. Here are the details of what a Purchase Requisition usually contains, including key fields:</p>"},{"location":"modules/purchasing/purchase-requisition/#purchase-requisition-details","title":"Purchase Requisition Details:","text":""},{"location":"modules/purchasing/purchase-requisition/#requisition-idnumber","title":"Requisition ID/Number:","text":"<ul> <li>Description: A unique identifier assigned to each Purchase Requisition for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific requisition in the procurement system.</li> </ul>"},{"location":"modules/purchasing/purchase-requisition/#requester-information","title":"Requester Information:","text":"<p>Fields:</p> <ul> <li>Requester Name</li> <li>Department</li> <li>Contact Information (Email, Phone)</li> <li>Purpose: Identifies the individual or department making the request for procurement.</li> </ul>"},{"location":"modules/purchasing/purchase-requisition/#date-of-request","title":"Date of Request:","text":"<ul> <li>Description: The date when the Purchase Requisition is created or initiated.</li> <li>Purpose: Provides a timestamp for tracking the timing of the procurement request.</li> </ul>"},{"location":"modules/purchasing/purchase-requisition/#delivery-daterequired-date","title":"Delivery Date/Required Date:","text":"<ul> <li>Description: The date by which the requested goods or services are needed.</li> <li>Purpose: Helps in setting priorities and timelines for procurement fulfillment.</li> </ul>"},{"location":"modules/purchasing/purchase-requisition/#item-details","title":"Item Details:","text":"<p>Fields:</p> <ul> <li>Item Description</li> <li>Quantity</li> <li>Unit of Measure</li> <li>Purpose: Specifies the details of the goods or services to be procured, including quantity.</li> </ul>"},{"location":"modules/purchasing/purchase-requisition/#budget-codeaccount-code","title":"Budget Code/Account Code:","text":"<ul> <li>Description: The code associated with the budget or account from which the procurement costs will be allocated.</li> <li>Purpose: Ensures proper financial tracking and allocation of expenses.</li> </ul>"},{"location":"modules/purchasing/purchase-requisition/#purposejustification","title":"Purpose/Justification:","text":"<ul> <li>Description: A narrative explaining the reason for the procurement and why it is necessary.</li> <li>Purpose: Provides context and justification for the requested purchase.</li> </ul>"},{"location":"modules/purchasing/purchase-requisition/#supplier-information-if-known","title":"Supplier Information (if known):","text":"<p>Fields:</p> <ul> <li>Preferred Supplier (if specified)</li> <li>Supplier Contact Information</li> <li>Purpose: Specifies the preferred supplier or provides information for potential suppliers.</li> </ul>"},{"location":"modules/purchasing/purchase-requisition/#special-requirementsspecifications","title":"Special Requirements/Specifications:","text":"<ul> <li>Description: Any specific requirements or technical specifications for the requested items.</li> <li>Purpose: Ensures that the procurement department has clear guidelines for fulfilling the request.</li> </ul>"},{"location":"modules/purchasing/purchase-requisition/#approval-workflow","title":"Approval Workflow:","text":"<p>Fields:</p> <ul> <li>Approver Names</li> <li>Approval Status (Pending, Approved, Rejected)</li> <li>Approval Comments</li> <li>Purpose: Indicates the workflow for obtaining approvals from relevant stakeholders.</li> </ul>"},{"location":"modules/purchasing/purchase-requisition/#attachmentsdocuments","title":"Attachments/Documents:","text":"<ul> <li>Description: Space for attaching relevant documents or files related to the Purchase Requisition (e.g., quotes, specifications).</li> <li>Purpose: Provides additional information to support the procurement request.</li> </ul>"},{"location":"modules/purchasing/purchase-requisition/#urgencypriority","title":"Urgency/Priority:","text":"<ul> <li>Description: Indicates the urgency or priority level of the procurement request.</li> <li>Purpose: Helps in prioritizing procurement activities based on the urgency of the request.</li> </ul>"},{"location":"modules/purchasing/purchase-requisition/#cost-estimate","title":"Cost Estimate:","text":"<ul> <li>Description: An estimated cost associated with the requested procurement.</li> <li>Purpose: Provides an initial cost estimate for budgeting and financial planning.</li> </ul> <p>Custom Fields:</p> <ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the organization.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the Purchase Requisition.</li> </ul>"},{"location":"modules/purchasing/purchase-requisition/#purchase-requisition-workflow","title":"Purchase Requisition Workflow:","text":""},{"location":"modules/purchasing/purchase-requisition/#creation","title":"Creation:","text":"<p>Users or departments identify the need for goods or services and create a Purchase Requisition.</p>"},{"location":"modules/purchasing/purchase-requisition/#review-and-approval","title":"Review and Approval:","text":"<p>The Purchase Requisition is reviewed by relevant stakeholders, and approvals are sought through the specified workflow.</p>"},{"location":"modules/purchasing/purchase-requisition/#budget-check","title":"Budget Check:","text":"<p>The procurement department checks the budget or account code to ensure availability of funds for the requested procurement.</p>"},{"location":"modules/purchasing/purchase-requisition/#supplier-selection-if-not-specified","title":"Supplier Selection (if not specified):","text":"<p>If a preferred supplier is not specified, the procurement team may initiate the supplier selection process.</p>"},{"location":"modules/purchasing/purchase-requisition/#validation-of-specifications","title":"Validation of Specifications:","text":"<p>The procurement team validates the specifications and requirements outlined in the Purchase Requisition.</p>"},{"location":"modules/purchasing/purchase-requisition/#approval-confirmation","title":"Approval Confirmation:","text":"<p>Approvers confirm their approval, and the Purchase Requisition is considered approved for further processing.</p>"},{"location":"modules/purchasing/purchase-requisition/#conversion-to-purchase-order","title":"Conversion to Purchase Order:","text":"<p>The approved Purchase Requisition is used as a basis to create a Purchase Order for the selected supplier.</p>"},{"location":"modules/purchasing/purchase-requisition/#communication-with-supplier","title":"Communication with Supplier:","text":"<p>The Purchase Order is communicated to the selected supplier, initiating the procurement process.</p>"},{"location":"modules/purchasing/purchase-requisition/#goodsservices-delivery","title":"Goods/Services Delivery:","text":"<p>The goods or services are delivered by the supplier based on the specifications outlined in the Purchase Requisition.</p>"},{"location":"modules/purchasing/purchase-requisition/#invoice-matching","title":"Invoice Matching:","text":"<p>The received goods or services are matched with the Purchase Order and supplier invoice for accuracy.</p>"},{"location":"modules/purchasing/purchase-requisition/#payment-processing","title":"Payment Processing:","text":"<p>Upon successful verification, the finance department processes payment to the supplier.</p>"},{"location":"modules/purchasing/purchase-requisition/#documentation-retention","title":"Documentation Retention:","text":"<p>The Purchase Requisition, along with related documents, is retained for record-keeping and audit purposes. Effectively managing the Purchase Requisition process ensures that procurement activities align with organizational needs, budgets, and policies. It provides a structured approach to initiating, approving, and fulfilling procurement requests while maintaining transparency and accountability.</p>"},{"location":"modules/purchasing/quotation-comparison/","title":"Quotation Comparison Sheet","text":"<p>A Quotation Comparison Sheet is a document used in the purchasing process to systematically evaluate and compare the price quotations received from different suppliers in response to a Request for Quotation (RFQ). The comparison sheet assists the procurement team in making informed decisions by considering various factors such as price, terms, and specifications. Here are the details of what a Quotation Comparison Sheet typically contains, including key fields:</p>"},{"location":"modules/purchasing/quotation-comparison/#quotation-comparison-sheet-details","title":"Quotation Comparison Sheet Details:","text":""},{"location":"modules/purchasing/quotation-comparison/#quotation-comparison-sheet-idnumber","title":"Quotation Comparison Sheet ID/Number:","text":"<ul> <li>Description: A unique identifier assigned to each comparison sheet for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific comparison sheet in the procurement system.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#rfq-information","title":"RFQ Information:","text":"<p>Fields:</p> <ul> <li>RFQ Number</li> <li>RFQ Issue Date</li> <li>RFQ Deadline</li> <li>Purpose: Provides reference details about the original RFQ against which the quotations were submitted.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#item-details","title":"Item Details:","text":"<p>Fields:</p> <ul> <li>Item Name/Description</li> <li>Quantity</li> <li>Unit of Measure</li> <li>Purpose: Specifies the details of the goods or services for which price quotations were requested.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#supplier-information","title":"Supplier Information:","text":"<p>Fields:</p> <ul> <li>Supplier Name</li> <li>Supplier Contact Information</li> <li>Purpose: Identifies the suppliers who submitted quotations for comparison.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#quotation-details","title":"Quotation Details:","text":"<p>Fields:</p> <ul> <li>Quotation Number</li> <li>Quotation Date</li> <li>Quoted Price</li> <li>Terms and Conditions</li> <li>Purpose: Captures essential information from each supplier's quotation, including pricing and any specific terms.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#delivery-time","title":"Delivery Time:","text":"<ul> <li>Description: The time period within which each supplier commits to delivering the goods or completing the services.</li> <li>Purpose: Helps in evaluating the timeliness of each supplier's proposed delivery.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#payment-terms","title":"Payment Terms:","text":"<ul> <li>Description: The payment conditions outlined by each supplier, including due dates and accepted payment methods.</li> <li>Purpose: Allows for the comparison of payment terms offered by different suppliers.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#additional-costs","title":"Additional Costs:","text":"<p>Fields:</p> <ul> <li>Shipping Costs</li> <li>Taxes</li> <li>Other Charges</li> <li>Purpose: Captures any additional costs associated with each supplier's quotation.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#compliance-with-specifications","title":"Compliance with Specifications:","text":"<ul> <li>Description: An assessment of each supplier's quotation in terms of compliance with the specified requirements or specifications.</li> <li>Purpose: Evaluates whether suppliers are meeting the desired quality and specifications.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#total-cost","title":"Total Cost:","text":"<ul> <li>Description: The overall cost, including the quoted price and any additional costs, for each supplier's quotation.</li> <li>Purpose: Provides a comprehensive view of the total financial commitment associated with each supplier.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#evaluation-criteria","title":"Evaluation Criteria:","text":"<p>Fields:</p> <ul> <li>Quality of Goods/Services</li> <li>Supplier Reputation</li> <li>Lead Time</li> <li>Technical Specifications</li> <li>Previous Performance</li> <li>Purpose: Lists criteria against which suppliers are evaluated, allowing for a structured and consistent assessment.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#weightagescoring","title":"Weightage/Scoring:","text":"<p>Fields:</p> <ul> <li>Weightage (percentage assigned to each criterion)</li> <li>Score (numerical rating for each supplier against each criterion)</li> <li>Purpose: Quantifies the importance of each evaluation criterion and allows for scoring suppliers objectively.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#commentsnotes","title":"Comments/Notes:","text":"<ul> <li>Description: Space for recording additional comments, observations, or notes related to each supplier's quotation.</li> <li>Purpose: Provides a narrative context to support the quantitative evaluation.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#recommendation","title":"Recommendation:","text":"<ul> <li>Description: The procurement team's recommendation or decision regarding the preferred supplier based on the evaluation.</li> <li>Purpose: Summarizes the conclusion drawn from the comparison and suggests the supplier to be selected.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#approval-signatures","title":"Approval Signatures:","text":"<p>Fields:</p> <ul> <li>Reviewer Names</li> <li>Approval Status (Pending, Approved, Rejected)</li> <li>Approval Comments</li> <li>Purpose: Documents the review and approval process by relevant stakeholders.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#attachment-of-supplier-quotations","title":"Attachment of Supplier Quotations:","text":"<ul> <li>Description: Space for attaching the original quotations submitted by each supplier.</li> <li>Purpose: Allows for reference and verification of the details included in the comparison sheet.</li> </ul> <p>Custom Fields:</p> <ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the organization.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the comparison process.</li> </ul>"},{"location":"modules/purchasing/quotation-comparison/#quotation-comparison-workflow","title":"Quotation Comparison Workflow:","text":""},{"location":"modules/purchasing/quotation-comparison/#creation","title":"Creation:","text":"<p>The purchasing department creates a Quotation Comparison Sheet based on the received quotations.</p>"},{"location":"modules/purchasing/quotation-comparison/#quotation-review","title":"Quotation Review:","text":"<p>The procurement team reviews each supplier's quotation and populates the comparison sheet with relevant details.</p>"},{"location":"modules/purchasing/quotation-comparison/#evaluation-and-scoring","title":"Evaluation and Scoring:","text":"<p>The procurement team scores each supplier against predefined criteria, considering factors such as price, quality, and delivery time.</p>"},{"location":"modules/purchasing/quotation-comparison/#calculation-of-total-costs","title":"Calculation of Total Costs:","text":"<p>The total costs for each supplier, including quoted prices and additional costs, are calculated and recorded on the sheet.</p>"},{"location":"modules/purchasing/quotation-comparison/#weighted-evaluation","title":"Weighted Evaluation:","text":"<p>Weighted scores are assigned to each criterion based on its importance, and the overall evaluation is conducted.</p>"},{"location":"modules/purchasing/quotation-comparison/#recommendation-and-approval","title":"Recommendation and Approval:","text":"<p>The procurement team makes a recommendation based on the evaluation, and the comparison sheet is reviewed and approved by relevant stakeholders.</p>"},{"location":"modules/purchasing/quotation-comparison/#communication-with-selected-supplier","title":"Communication with Selected Supplier:","text":"<p>The selected supplier is formally notified of the decision, and further negotiations or discussions may take place.</p>"},{"location":"modules/purchasing/quotation-comparison/#documentation-retention","title":"Documentation Retention:","text":"<p>The Quotation Comparison Sheet, along with related documents, is retained for record-keeping and audit purposes.</p> <p>The Quotation Comparison Sheet is a crucial tool in the procurement process, facilitating a structured and transparent evaluation of supplier quotations. It helps organizations make informed decisions and select the most suitable supplier based on a comprehensive assessment of various factors.</p>"},{"location":"modules/purchasing/request-for-quotation/","title":"Request for Quotation","text":"<p>A Request for Quotation (RFQ) is a formal document used in the purchasing process to solicit price quotations from potential suppliers for specific goods or services. The RFQ serves as a way for the buyer to gather information about the cost and terms of potential purchases before making a final decision. Here are the details of what a Request for Quotation typically contains, including key fields:</p>"},{"location":"modules/purchasing/request-for-quotation/#request-for-quotation-rfq-details","title":"Request for Quotation (RFQ) Details:","text":""},{"location":"modules/purchasing/request-for-quotation/#rfq-number","title":"RFQ Number:","text":"<ul> <li>Description: A unique identifier assigned to each RFQ for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific RFQ in the procurement system.</li> </ul>"},{"location":"modules/purchasing/request-for-quotation/#issue-date","title":"Issue Date:","text":"<ul> <li>Description: The date when the RFQ is issued by the buyer to potential suppliers.</li> <li>Purpose: Provides a timestamp for tracking the timing of the RFQ.</li> </ul>"},{"location":"modules/purchasing/request-for-quotation/#buyer-information","title":"Buyer Information:","text":"<p>Fields:</p> <ul> <li>Buyer Name</li> <li>Buyer Contact Information</li> <li>Purpose: Identifies the buyer within the organization responsible for the RFQ.</li> </ul>"},{"location":"modules/purchasing/request-for-quotation/#delivery-address","title":"Delivery Address:","text":"<ul> <li>Description: The address to which the purchased goods or services are to be delivered.</li> <li>Purpose: Provides clarity on the location where the items are expected to be received.</li> </ul>"},{"location":"modules/purchasing/request-for-quotation/#billing-address","title":"Billing Address:","text":"<ul> <li>Description: The address to which invoices related to the purchase should be sent.</li> <li>Purpose: Specifies the location for invoicing and financial transactions.</li> </ul>"},{"location":"modules/purchasing/request-for-quotation/#delivery-date","title":"Delivery Date:","text":"<ul> <li>Description: The date by which the supplier is expected to deliver the goods or complete the services.</li> <li>Purpose: Sets expectations and timelines for the fulfillment of the potential purchase.</li> </ul>"},{"location":"modules/purchasing/request-for-quotation/#item-descriptions","title":"Item Descriptions:","text":"<p>Fields:</p> <ul> <li>Item Name/Description</li> <li>Quantity</li> <li>Unit of Measure</li> <li>Purpose: Specifies the details of the goods or services for which price quotations are being requested.</li> </ul>"},{"location":"modules/purchasing/request-for-quotation/#item-specifications","title":"Item Specifications:","text":"<ul> <li>Description: Detailed specifications or requirements for each item or service listed in the RFQ.</li> <li>Purpose: Provides clear guidelines for potential suppliers regarding the expected quality and characteristics of the items.</li> </ul>"},{"location":"modules/purchasing/request-for-quotation/#terms-and-conditions","title":"Terms and Conditions:","text":"<ul> <li>Description: Any additional terms, conditions, or special instructions related to the RFQ.</li> <li>Purpose: Clarifies expectations and establishes the framework for suppliers to provide quotations.</li> </ul>"},{"location":"modules/purchasing/request-for-quotation/#rfq-deadline","title":"RFQ Deadline:","text":"<ul> <li>Description: The date and time by which suppliers are required to submit their quotations.</li> <li>Purpose: Sets a clear deadline for supplier responses, ensuring timely evaluation and decision-making.</li> </ul>"},{"location":"modules/purchasing/request-for-quotation/#contact-person","title":"Contact Person:","text":"<p>Fields:</p> <ul> <li>Name</li> <li>Email</li> <li>Phone</li> <li>Purpose: Provides the contact information for a person whom potential suppliers can reach out to for clarifications or additional information.</li> </ul>"},{"location":"modules/purchasing/request-for-quotation/#preferred-supplier-if-any","title":"Preferred Supplier (if any):","text":"<p>Fields:</p> <ul> <li>Supplier Name</li> <li>Reason for Preference (if specified)</li> <li>Purpose: Indicates if there is a preferred supplier for the requested items and provides reasons for the preference.</li> </ul>"},{"location":"modules/purchasing/request-for-quotation/#budget-information","title":"Budget Information:","text":"<p>Fields:</p> <ul> <li>Budget Code/Account Code</li> <li>Estimated Budget</li> <li>Purpose: Outlines the budgetary constraints or allocations associated with the potential purchase.</li> </ul>"},{"location":"modules/purchasing/request-for-quotation/#attachment-of-specificationsdocuments","title":"Attachment of Specifications/Documents:","text":"<ul> <li>Description: Space for attaching relevant documents or files related to the RFQ (e.g., specifications, drawings).</li> <li>Purpose: Provides additional information to help potential suppliers understand the requirements.</li> </ul>"},{"location":"modules/purchasing/request-for-quotation/#rfq-response-format","title":"RFQ Response Format:","text":"<ul> <li>Description: Specifies the format or template in which suppliers should submit their price quotations.</li> <li>Purpose: Ensures consistency and ease of evaluation when comparing quotations from different suppliers.</li> </ul> <p>Custom Fields:</p> <ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the organization.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the RFQ.</li> </ul>"},{"location":"modules/purchasing/request-for-quotation/#rfq-workflow","title":"RFQ Workflow:","text":""},{"location":"modules/purchasing/request-for-quotation/#creation","title":"Creation:","text":"<p>The purchasing department creates an RFQ based on the identified need for goods or services.</p>"},{"location":"modules/purchasing/request-for-quotation/#review-and-approval","title":"Review and Approval:","text":"<p>The RFQ undergoes review and approval processes, involving relevant stakeholders.</p>"},{"location":"modules/purchasing/request-for-quotation/#supplier-communication","title":"Supplier Communication:","text":"<p>The RFQ is communicated to potential suppliers, inviting them to submit price quotations.</p>"},{"location":"modules/purchasing/request-for-quotation/#supplier-queriesclarifications","title":"Supplier Queries/Clarifications:","text":"<p>Potential suppliers may seek clarifications or ask questions regarding the RFQ, and responses are provided by the buyer.</p>"},{"location":"modules/purchasing/request-for-quotation/#quotation-submission","title":"Quotation Submission:","text":"<p>Suppliers submit their price quotations in response to the RFQ before the specified deadline.</p>"},{"location":"modules/purchasing/request-for-quotation/#evaluation-and-comparison","title":"Evaluation and Comparison:","text":"<p>The purchasing department evaluates and compares the received quotations based on factors such as price, terms, and specifications.</p>"},{"location":"modules/purchasing/request-for-quotation/#supplier-selection","title":"Supplier Selection:","text":"<p>A supplier is selected based on the evaluation, and further negotiations or discussions may take place.</p>"},{"location":"modules/purchasing/request-for-quotation/#award-notification","title":"Award Notification:","text":"<p>The selected supplier is formally notified of the award, and the procurement process moves forward.</p>"},{"location":"modules/purchasing/request-for-quotation/#purchase-order-issuance","title":"Purchase Order Issuance:","text":"<p>A Purchase Order is issued to the selected supplier, formalizing the purchase transaction.</p>"},{"location":"modules/purchasing/request-for-quotation/#documentation-retention","title":"Documentation Retention:","text":"<p>The RFQ, along with related documents, is retained for record-keeping and audit purposes.</p> <p>A well-structured RFQ process ensures that the buyer receives comprehensive and competitive quotations from potential suppliers, facilitating an informed decision-making process. It is a crucial step in the procurement workflow that allows organizations to obtain the best value for their purchases.</p>"},{"location":"modules/purchasing/supplier-agreement/","title":"Supplier Agreement","text":"<p>A Supplier Agreement is a formal contract or document that outlines the terms, conditions, and expectations between a buyer (organization) and a supplier. This agreement serves as a legally binding document that governs the relationship and transactions between the two parties. Here are the details of what a Supplier Agreement typically contains, including key fields:</p>"},{"location":"modules/purchasing/supplier-agreement/#supplier-agreement-details","title":"Supplier Agreement Details:","text":""},{"location":"modules/purchasing/supplier-agreement/#supplier-agreement-idnumber","title":"Supplier Agreement ID/Number:","text":"<ul> <li>Description: A unique identifier assigned to each Supplier Agreement for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific agreement in the procurement system.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#effective-date","title":"Effective Date:","text":"<ul> <li>Description: The date when the Supplier Agreement becomes effective and legally binding.</li> <li>Purpose: Specifies the starting point of the contractual obligations.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#parties-involved","title":"Parties Involved:","text":"<p>Fields:</p> <ul> <li>Buyer/Organization Name</li> <li>Supplier Name</li> <li>Legal Addresses of Both Parties</li> <li>Purpose: Identifies the legal entities entering into the agreement and their contact details.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#scope-of-agreement","title":"Scope of Agreement:","text":"<ul> <li>Description: Clearly defines the goods, services, or scope covered by the agreement.</li> <li>Purpose: Sets the boundaries and expectations for the products or services to be provided by the supplier.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#term-of-agreement","title":"Term of Agreement:","text":"<p>Fields:</p> <ul> <li>Start Date</li> <li>End Date (if applicable)</li> <li>Renewal Terms (if applicable)</li> <li>Purpose: Specifies the duration of the agreement, including any renewal options.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#pricing-and-payment-terms","title":"Pricing and Payment Terms:","text":"<p>Fields:</p> <ul> <li>Pricing Structure (e.g., fixed, variable)</li> <li>Unit Prices or Rate Card</li> <li>Payment Terms (e.g., Net 30, Net 60)</li> <li>Purpose: Outlines the agreed-upon pricing structure, unit prices, and payment terms for the goods or services.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#delivery-and-performance","title":"Delivery and Performance:","text":"<p>Fields:</p> <ul> <li>Delivery Schedule</li> <li>Performance Metrics and Key Performance Indicators (KPIs)</li> <li>Purpose: Specifies the expected delivery schedules and performance expectations, including any KPIs.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#quality-standards","title":"Quality Standards:","text":"<ul> <li>Description: Clearly defines the quality standards and specifications expected from the supplier.</li> <li>Purpose: Ensures that the delivered goods or services meet the required quality benchmarks.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#responsibilities-of-each-party","title":"Responsibilities of Each Party:","text":"<ul> <li>Description: Outlines the specific responsibilities and obligations of both the buyer and the supplier.</li> <li>Purpose: Clearly defines each party's role and expectations to avoid misunderstandings.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#intellectual-property-rights","title":"Intellectual Property Rights:","text":"<p>Fields:</p> <ul> <li>Ownership of Intellectual Property</li> <li>Licensing and Usage Rights</li> <li>Purpose: Addresses the ownership and usage rights of any intellectual property involved in the transaction.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#confidentiality-and-non-disclosure","title":"Confidentiality and Non-Disclosure:","text":"<p>Fields:</p> <ul> <li>Confidentiality Obligations</li> <li>Non-Disclosure Clauses</li> <li>Purpose: Establishes the parameters for handling and protecting confidential information.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#termination-clause","title":"Termination Clause:","text":"<ul> <li>Description: Outlines the conditions under which either party can terminate the agreement.</li> <li>Purpose: Defines the circumstances and procedures for ending the contractual relationship.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#dispute-resolution","title":"Dispute Resolution:","text":"<p>Fields:</p> <ul> <li>Dispute Resolution Mechanisms (e.g., mediation, arbitration)</li> <li>Governing Law</li> <li>Purpose: Establishes procedures for resolving disputes and identifies the governing law.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#insurance-requirements","title":"Insurance Requirements:","text":"<p>Fields:</p> <ul> <li>Insurance Types and Coverage</li> <li>Required Insurance Limits</li> <li>Purpose: Specifies the insurance coverage that the supplier is required to maintain.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#indemnification","title":"Indemnification:","text":"<ul> <li>Description: Outlines the indemnification obligations of each party in case of legal claims or liabilities.</li> <li>Purpose: Clarifies each party's responsibility for covering legal costs and liabilities.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#force-majeure","title":"Force Majeure:","text":"<ul> <li>Description: Addresses the handling of unforeseen events or circumstances beyond the control of either party.</li> <li>Purpose: Defines how the agreement will be affected in case of force majeure events.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#amendment-and-modification","title":"Amendment and Modification:","text":"<ul> <li>Description: Outlines the process for amending or modifying the agreement.</li> <li>Purpose: Provides a framework for making changes to the agreement if necessary.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#notices","title":"Notices:","text":"<p>Fields:</p> <ul> <li>Addresses for Formal Notices</li> <li>Designated Contact Persons</li> <li>Purpose: Specifies the addresses and contact persons for sending formal notices or communications.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#compliance-with-laws","title":"Compliance with Laws:","text":"<ul> <li>Description: Requires the supplier to comply with all applicable laws and regulations.</li> <li>Purpose: Ensures that the supplier conducts business in accordance with legal requirements.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#termination-and-exit-procedures","title":"Termination and Exit Procedures:","text":"<p>Fields:</p> <ul> <li>Notice Period for Termination</li> <li>Exit Procedures and Obligations</li> <li>Purpose: Details the steps and obligations for both parties in case of termination.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#approval-signatures","title":"Approval Signatures:","text":"<p>Fields:</p> <ul> <li>Signatures of Authorized Representatives</li> <li>Approval Status (Pending, Approved, Rejected)</li> <li>Purpose: Confirms that the agreement has been reviewed and approved by authorized representatives.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#attachment-of-supporting-documents","title":"Attachment of Supporting Documents:","text":"<ul> <li>Description: Space for attaching any supporting documents, such as appendices or exhibits.</li> <li>Purpose: Provides additional details or references related to specific clauses in the agreement.</li> </ul> <p>Custom Fields:</p> <ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the organization.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the Supplier Agreement.</li> </ul>"},{"location":"modules/purchasing/supplier-agreement/#supplier-agreement-workflow","title":"Supplier Agreement Workflow:","text":""},{"location":"modules/purchasing/supplier-agreement/#drafting","title":"Drafting:","text":"<p>The legal or procurement team drafts the Supplier Agreement based on the negotiated terms and conditions.</p>"},{"location":"modules/purchasing/supplier-agreement/#internal-review","title":"Internal Review:","text":"<p>The agreement undergoes an internal review process to ensure alignment with organizational policies and legal standards.</p>"},{"location":"modules/purchasing/supplier-agreement/#negotiation","title":"Negotiation:","text":"<p>Negotiations take place between the buyer and the supplier to finalize the terms of the agreement.</p>"},{"location":"modules/purchasing/supplier-agreement/#approval","title":"Approval:","text":"<p>The Supplier Agreement is reviewed and approved by authorized representatives from both the buyer and the supplier.</p>"},{"location":"modules/purchasing/supplier-agreement/#signing","title":"Signing:","text":"<p>The authorized representatives sign the agreement, indicating their acceptance and commitment.</p>"},{"location":"modules/purchasing/supplier-agreement/#distribution","title":"Distribution:","text":"<p>Copies of the signed agreement are distributed to relevant parties involved in the implementation of the agreement.</p>"},{"location":"modules/purchasing/supplier-agreement/#implementation","title":"Implementation:","text":"<p>The terms of the agreement are implemented, and both parties fulfill their respective obligations.</p>"},{"location":"modules/purchasing/supplier-agreement/#monitoring-and-performance-evaluation","title":"Monitoring and Performance Evaluation:","text":"<p>The buyer monitors the supplier's performance and adherence to the agreement throughout its duration.</p>"},{"location":"modules/purchasing/supplier-agreement/#renewal-or-termination","title":"Renewal or Termination:","text":"<p>The agreement may be renewed, modified, or terminated based on the terms outlined in the agreement.</p>"},{"location":"modules/purchasing/supplier-agreement/#documentation-retention","title":"Documentation Retention:","text":"<p>The signed Supplier Agreement, along with related documents, is retained for record-keeping and audit purposes.</p> <p>A well-structured Supplier Agreement is essential for establishing a clear and mutually beneficial relationship between the buyer and the supplier. It provides a foundation for collaboration, sets expectations, and mitigates risks associated with the procurement of goods or services.</p>"},{"location":"modules/purchasing/supplier-payment/","title":"Supplier Payment Receipt","text":"<p>Supplier Payment Receipt (Acknowledgment of payment to a supplier) confirms that the buyer has made a payment for goods or services received from the supplier. It is issued by buyer to the supplier.</p>"},{"location":"modules/purchasing/supplier-payment/#payment-receipt-in-purchasing-details","title":"Payment Receipt (in Purchasing) Details:","text":""},{"location":"modules/purchasing/supplier-payment/#receipt-number","title":"Receipt Number:","text":"<ul> <li>Description: A unique identifier assigned to each payment receipt for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific receipt in financial and purchasing records.</li> </ul>"},{"location":"modules/purchasing/supplier-payment/#receipt-date","title":"Receipt Date:","text":"<ul> <li>Description: The date when the payment receipt is issued or acknowledged.</li> <li>Purpose: Provides a timestamp for tracking the timing of the payment acknowledgment.</li> </ul>"},{"location":"modules/purchasing/supplier-payment/#supplier-information","title":"Supplier Information:","text":"<p>Fields:</p> <ul> <li>Supplier Name</li> <li>Supplier Address</li> <li>Supplier Contact Information</li> <li>Purpose: Identifies the supplier for whom the payment is being acknowledged.</li> </ul>"},{"location":"modules/purchasing/supplier-payment/#buyer-information","title":"Buyer Information:","text":"<p>Fields:</p> <ul> <li>Buyer Name</li> <li>Buyer Address</li> <li>Buyer Contact Information</li> <li>Purpose: Specifies the buyer or purchasing entity issuing the payment acknowledgment.</li> </ul>"},{"location":"modules/purchasing/supplier-payment/#invoice-details","title":"Invoice Details:","text":"<p>Fields:</p> <ul> <li>Invoice Number</li> <li>Invoice Date</li> <li>Invoice Amount</li> <li>Purpose: References the original invoice for which the payment is being acknowledged.</li> </ul>"},{"location":"modules/purchasing/supplier-payment/#payment-details","title":"Payment Details:","text":"<p>Fields:</p> <ul> <li>Payment Amount</li> <li>Payment Date</li> <li>Payment Method (e.g., check, wire transfer, credit card)</li> <li>Transaction Reference or Confirmation Number</li> <li>Purpose: Specifies the details of the payment being acknowledged, including the amount, date, and method.</li> </ul>"},{"location":"modules/purchasing/supplier-payment/#currency-information","title":"Currency Information:","text":"<p>Fields:</p> <ul> <li>Currency Code</li> <li>Exchange Rate (if applicable)</li> <li>Purpose: Specifies the currency in which the payment was made and, if applicable, the exchange rate.</li> </ul>"},{"location":"modules/purchasing/supplier-payment/#authorized-signatures","title":"Authorized Signatures:","text":"<p>Fields:</p> <ul> <li>Signature of the Person Authorizing the Payment Receipt</li> <li>Approval Date</li> <li>Purpose: Confirms that the Payment Receipt has been reviewed and authorized by authorized individuals.</li> </ul>"},{"location":"modules/purchasing/supplier-payment/#notescomments","title":"Notes/Comments:","text":"<ul> <li>Description: Space for additional notes, comments, or observations related to the payment receipt.</li> <li>Purpose: Allows for any relevant information not covered by other fields to be documented.</li> </ul> <p>Custom Fields:</p> <ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the organization.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the Payment Receipt.</li> </ul>"},{"location":"modules/purchasing/supplier-payment/#payment-receipt-workflow","title":"Payment Receipt Workflow:","text":""},{"location":"modules/purchasing/supplier-payment/#payment-initiation","title":"Payment Initiation:","text":"<p>The buyer initiates the payment based on the details provided in the Purchase Invoice.</p>"},{"location":"modules/purchasing/supplier-payment/#payment-execution","title":"Payment Execution:","text":"<p>The payment is executed using the specified payment method.</p>"},{"location":"modules/purchasing/supplier-payment/#payment-acknowledgment","title":"Payment Acknowledgment:","text":"<p>The buyer generates a Payment Receipt to formally acknowledge the payment made to the supplier.</p>"},{"location":"modules/purchasing/supplier-payment/#verification","title":"Verification:","text":"<p>The Payment Receipt is verified by the buyer's finance or accounting team to ensure accuracy.</p>"},{"location":"modules/purchasing/supplier-payment/#authorization","title":"Authorization:","text":"<p>The Payment Receipt is reviewed and authorized by authorized personnel within the buyer's organization.</p>"},{"location":"modules/purchasing/supplier-payment/#issuance-to-supplier","title":"Issuance to Supplier:","text":"<p>The Payment Receipt is issued to the supplier, either electronically or as a physical document.</p>"},{"location":"modules/purchasing/supplier-payment/#documentation-retention","title":"Documentation Retention:","text":"<p>The Payment Receipt, along with related documents, is retained for record-keeping and audit purposes.</p> <p>The Payment Receipt serves as a confirmation that the payment for a purchase has been received and acknowledges the completion of the payment transaction between the buyer and the supplier.</p>"},{"location":"modules/reference-data/","title":"Reference Data","text":"<p>The Reference Data module in the codbex business suite provides a centralized repository for managing essential reference data used across various modules and functionalities within the system. This module serves as a cornerstone for standardizing and organizing reference data, ensuring consistency and accuracy in data representation throughout the platform.</p>"},{"location":"modules/reference-data/#key-features","title":"Key Features","text":"<ol> <li> <p>Centralized Repository: The module offers a centralized repository for storing reference data such as units of measures, currencies, countries, and other essential data elements.</p> </li> <li> <p>Standardization: It facilitates the standardization of reference data across different processes and functionalities within the codbex business suite, promoting uniformity and coherence in data usage.</p> </li> <li> <p>Customization: Users can customize and configure reference data according to their organization's specific requirements, including defining custom categories, attributes, and values.</p> </li> <li> <p>Reference Data Management: The module provides robust tools and interfaces for managing reference data, allowing users to create, update, delete, and search for reference data entries efficiently.</p> </li> </ol>"},{"location":"modules/reference-data/#functionality","title":"Functionality","text":""},{"location":"modules/reference-data/#units-of-measures","title":"Units of Measures","text":"<p>The Units of Measures sub-module allows users to define, maintain, and reference various units of measures essential for standardizing data representation across different processes and functionalities within the system.</p>"},{"location":"modules/reference-data/#currencies","title":"Currencies","text":"<p>The Currencies sub-module enables users to manage and maintain currency information, including currency codes, symbols, exchange rates, and other currency-related data elements.</p>"},{"location":"modules/reference-data/#countries-and-regions","title":"Countries and Regions","text":"<p>The Countries and Regions sub-module provides functionalities for managing and maintaining country and region information, including country codes, names, currencies, and geographic regions.</p>"},{"location":"modules/reference-data/#industries-and-sectors","title":"Industries and Sectors","text":"<p>The Industries and Sectors sub-module allows users to define and categorize industries and sectors relevant to their organization, facilitating better categorization and organization of data.</p>"},{"location":"modules/reference-data/#usage","title":"Usage","text":"<p>The Reference Data module is utilized across various modules and functionalities within the codbex business suite, including:</p> <ul> <li> <p>Product Management: Reference data such as units of measures and industries are essential for specifying product details and categorization.</p> </li> <li> <p>Financial Management: Reference data such as currencies and countries are referenced in financial transactions, reporting, and analysis.</p> </li> <li> <p>Order Processing: Reference data such as countries and regions are utilized in order processing for specifying shipping destinations and tax calculations.</p> </li> </ul>"},{"location":"modules/reference-data/#getting-started","title":"Getting Started","text":"<p>To start using the Reference Data module, navigate to the Reference Data section within the codbex business suite's menu. From there, select the specific sub-module you wish to manage or configure, such as Units of Measures, Currencies, Countries and Regions, or Industries and Sectors. Follow the provided instructions and interfaces to begin defining and managing reference data according to your organization's requirements.</p>"},{"location":"modules/reference-data/uom/","title":"Units of Measures","text":"<p>The Units of Measures module in the codbex business suite's Reference Data group provides a centralized repository for managing units of measurement used throughout the system. This module allows users to define, maintain, and reference various units of measures essential for standardizing and organizing data across different processes and functionalities within the platform.</p>"},{"location":"modules/reference-data/uom/#key-features","title":"Key Features","text":"<ol> <li> <p>Centralized Repository: The module serves as a central repository for storing all units of measures utilized within the system.</p> </li> <li> <p>Standardization: It facilitates the standardization of units of measurement across different processes and functionalities, ensuring consistency and accuracy in data representation.</p> </li> <li> <p>Customization: Users can define and customize units of measures according to their specific business requirements, including defining custom units, symbols, and conversion factors.</p> </li> <li> <p>Reference Data Management: Units of measures defined within this module can be easily referenced and utilized across various modules and functionalities within the codbex business suite.</p> </li> </ol>"},{"location":"modules/reference-data/uom/#functionality","title":"Functionality","text":""},{"location":"modules/reference-data/uom/#unit-definition","title":"Unit Definition","text":"<p>Users can define and configure units of measures using intuitive interfaces provided by the module. Each unit definition includes details such as unit name, symbol, description, and conversion factors.</p>"},{"location":"modules/reference-data/uom/#conversion-factors","title":"Conversion Factors","text":"<p>The module allows users to specify conversion factors between different units of measures. This feature enables seamless conversion of values between different units within the system.</p>"},{"location":"modules/reference-data/uom/#custom-units","title":"Custom Units","text":"<p>In addition to standard units of measures, users have the flexibility to define custom units tailored to their specific business needs. Custom units can be created with unique names, symbols, and conversion factors as required.</p>"},{"location":"modules/reference-data/uom/#usage","title":"Usage","text":"<p>The Units of Measures module plays a crucial role in various aspects of the codbex business suite, including:</p> <ul> <li> <p>Product Management: Units of measures are essential for specifying product quantities, dimensions, and weights.</p> </li> <li> <p>Inventory Management: Units of measures facilitate accurate tracking and management of inventory quantities and movements.</p> </li> <li> <p>Order Processing: Units of measures are utilized in order processing for specifying quantities and measurements of goods.</p> </li> <li> <p>Financial Management: Units of measures are referenced in financial transactions and reporting for accurate representation of monetary values and quantities.</p> </li> </ul>"},{"location":"modules/reference-data/uom/#getting-started","title":"Getting Started","text":"<p>To start utilizing the Units of Measures module, navigate to the Reference Data group within the codbex business suite's menu. From there, select the Units of Measures module to access the unit definition interface and begin defining and managing units of measures according to your organization's requirements.</p>"},{"location":"modules/sales/","title":"Sales","text":""},{"location":"modules/sales/#lead","title":"Lead","text":"<p>A Lead represents a potential customer who has shown interest in the products or services but has not yet become a paying customer. Leads are typically individuals or organizations that you are actively pursuing as potential clients.</p> <p>Key Components:</p> <ul> <li>Lead Information: Basic details about the potential customer, including name, contact information, and any initial interactions.</li> <li>Lead Source: The channel or method through which the lead was generated (e.g., website inquiry, referral, marketing campaign).</li> <li>Lead Status: Indicates the stage of the lead in the conversion process (e.g., New, Contacted, Qualified).</li> </ul> <p>Process:</p> <ul> <li>Lead Capture: Collect information about potential customers through various channels.</li> <li>Lead Qualification: Evaluate and qualify leads based on criteria such as interest level and potential for conversion.</li> <li>Lead Nurturing: Engage with leads through targeted communication to move them through the sales funnel.</li> </ul>"},{"location":"modules/sales/#opportunity","title":"Opportunity","text":"<p>An Opportunity represents a potential sale or deal with a qualified lead. It is a record of a potential revenue-generating transaction with a customer that is being actively pursued.</p> <p>Key Components:</p> <ul> <li>Opportunity Details: Information about the potential sale, including the product or service, expected revenue, and proposed timeline.</li> <li>Probability: The likelihood of closing the deal, often expressed as a percentage.</li> <li>Sales Stage: Indicates the current stage in the sales process (e.g., Discovery, Proposal, Negotiation).</li> </ul> <p>Process:</p> <ul> <li>Opportunity Creation: Convert a qualified lead into an opportunity when there's a potential for a sale.</li> <li>Sales Process: Progress through various sales stages, updating the opportunity details and probability as needed.</li> <li>Deal Closure: Mark the opportunity as won or lost based on the outcome of negotiations.</li> </ul>"},{"location":"modules/sales/#quotation","title":"Quotation","text":"<p>Quotations, or quotes, are documents that provide detailed pricing information for products or services offered to a potential customer. They serve as formal proposals and can be generated from opportunities or directly for specific customer requests.</p> <p>Key Components:</p> <ul> <li>Product/Service Details: A list of products or services being offered, along with quantities and prices.</li> <li>Total Cost: The overall cost of the proposed deal, including any applicable taxes or discounts.</li> <li>Validity Period: The timeframe within which the customer can accept the quotation.</li> </ul> <p>Process:</p> <ul> <li>Quotation Generation: Create a detailed quote based on the products or services associated with an opportunity or a customer request.</li> <li>Review and Approval: Internal review of the quotation, ensuring accuracy and alignment with pricing strategies.</li> <li>Customer Presentation: Share the quotation with the customer for consideration and negotiation.</li> </ul>"},{"location":"modules/sales/#sales-order","title":"Sales Order","text":"<p>A Sales Order is a document that confirms a customer's acceptance of a quotation. It serves as a formal request from the customer to purchase the specified products or services at the agreed-upon terms.</p> <p>Key Components:</p> <ul> <li>Customer Information: Details about the customer placing the order, including billing and shipping information.</li> <li>Product/Service Details: A comprehensive list of items included in the order, along with quantities and prices.</li> <li>Order Total: The total amount payable by the customer, inclusive of any taxes or discounts.</li> </ul> <p>Process:</p> <ul> <li>Customer Acceptance: Once the customer agrees to the terms outlined in the quotation, a sales order is created.</li> <li>Order Fulfillment: The sales order serves as a reference for the fulfillment team to pick, pack, and ship the products or deliver the services.</li> <li>Order Confirmation: Confirm the completion of the order, update the inventory, and generate relevant invoices.</li> </ul> <p>These components collectively form a structured sales process, allowing businesses to effectively manage leads, convert opportunities into deals, and streamline the quotation and sales order processes.</p>"},{"location":"modules/sales/customer-payment/","title":"Customer Payment Receipt","text":"<p>For acknowledging the receipt of payment from a customer, the standard document is often referred to as a \"Payment Receipt\" or \"Customer Receipt.\" This document confirms that the customer has made a payment, and it is typically issued by the seller or service provider. Below are the details of what a Payment Receipt in the context of receiving payment from a customer might include:</p>"},{"location":"modules/sales/customer-payment/#payment-receipt-customer-details","title":"Payment Receipt (Customer) Details:","text":""},{"location":"modules/sales/customer-payment/#receipt-number","title":"Receipt Number:","text":"<ul> <li>Description: A unique identifier assigned to each payment receipt for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific receipt in financial records.</li> </ul>"},{"location":"modules/sales/customer-payment/#receipt-date","title":"Receipt Date:","text":"<ul> <li>Description: The date when the payment receipt is issued to acknowledge the received payment.</li> <li>Purpose: Provides a timestamp for tracking the timing of the payment acknowledgment.</li> </ul>"},{"location":"modules/sales/customer-payment/#customer-information","title":"Customer Information:","text":"<p>Fields:</p> <ul> <li>Customer Name</li> <li>Customer Address</li> <li>Customer Contact Information</li> <li>Purpose: Identifies the customer who made the payment.</li> </ul>"},{"location":"modules/sales/customer-payment/#seller-information","title":"Seller Information:","text":"<p>Fields:</p> <ul> <li>Seller/Business Name</li> <li>Seller/Business Address</li> <li>Seller/Business Contact Information</li> <li>Purpose: Specifies the seller or service provider acknowledging the received payment.</li> </ul>"},{"location":"modules/sales/customer-payment/#invoice-details","title":"Invoice Details:","text":"<p>Fields:</p> <ul> <li>Invoice Number</li> <li>Invoice Date</li> <li>Invoice Amount</li> <li>Purpose: References the original invoice for which the payment is being acknowledged.</li> </ul>"},{"location":"modules/sales/customer-payment/#payment-details","title":"Payment Details:","text":"<p>Fields:</p> <ul> <li>Payment Amount</li> <li>Payment Date</li> <li>Payment Method (e.g., cash, check, electronic transfer)</li> <li>Transaction Reference or Confirmation Number</li> <li>Purpose: Specifies the details of the payment received, including the amount, date, and method.</li> </ul>"},{"location":"modules/sales/customer-payment/#currency-information","title":"Currency Information:","text":"<p>Fields:</p> <ul> <li>Currency Code</li> <li>Exchange Rate (if applicable)</li> <li>Purpose: Specifies the currency in which the payment was received and, if applicable, the exchange rate.</li> </ul>"},{"location":"modules/sales/customer-payment/#authorized-signatures","title":"Authorized Signatures:","text":"<p>Fields:</p> <ul> <li>Signature of the Person Authorizing the Payment Receipt</li> <li>Approval Date</li> <li>Purpose: Confirms that the Payment Receipt has been reviewed and authorized by authorized individuals.</li> </ul>"},{"location":"modules/sales/customer-payment/#notescomments","title":"Notes/Comments:","text":"<ul> <li>Description: Space for additional notes, comments, or observations related to the payment receipt.</li> <li>Purpose: Allows for any relevant information not covered by other fields to be documented.</li> </ul>"},{"location":"modules/sales/customer-payment/#custom-fields","title":"Custom Fields:","text":"<ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the organization.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the Payment Receipt.</li> </ul>"},{"location":"modules/sales/customer-payment/#payment-receipt-workflow","title":"Payment Receipt Workflow:","text":""},{"location":"modules/sales/customer-payment/#payment-receipt-generation","title":"Payment Receipt Generation:","text":"<p>The seller generates a Payment Receipt to formally acknowledge the payment received from the customer.</p>"},{"location":"modules/sales/customer-payment/#verification","title":"Verification:","text":"<p>The Payment Receipt is verified by the seller's finance or accounting team to ensure accuracy.</p>"},{"location":"modules/sales/customer-payment/#authorization","title":"Authorization:","text":"<p>The Payment Receipt is reviewed and authorized by authorized personnel within the seller's organization.</p>"},{"location":"modules/sales/customer-payment/#issuance-to-customer","title":"Issuance to Customer:","text":"<p>The Payment Receipt is issued to the customer, either electronically or as a physical document.</p>"},{"location":"modules/sales/customer-payment/#documentation-retention","title":"Documentation Retention:","text":"<p>The Payment Receipt, along with related documents, is retained for record-keeping and audit purposes.</p> <p>The Payment Receipt in the context of receiving payment from a customer serves as a formal acknowledgment of the payment made and provides both parties with a record of the completed financial transaction.</p>"},{"location":"modules/sales/lead/","title":"Lead","text":"<p>In Sales, a Lead represents a potential customer or prospect who has shown interest in the products or services offered by a business but has not yet become a customer. The Lead management process involves capturing, tracking, and nurturing potential opportunities until they mature into actual customers. Here are the details of what a Lead typically contains, including the key fields involved:</p>"},{"location":"modules/sales/lead/#lead-details","title":"Lead Details:","text":""},{"location":"modules/sales/lead/#lead-idnumber","title":"Lead ID/Number:","text":"<ul> <li>Description: A unique identifier assigned to each Lead for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific lead in the CRM system.</li> </ul>"},{"location":"modules/sales/lead/#lead-source","title":"Lead Source:","text":"<ul> <li>Description: Indicates the channel or method through which the Lead was acquired (e.g., website inquiry, trade show, referral).</li> <li>Purpose: Provides insights into the effectiveness of various marketing and sales channels.</li> </ul>"},{"location":"modules/sales/lead/#lead-status","title":"Lead Status:","text":"<ul> <li>Description: Represents the current stage of the lead in the sales pipeline (e.g., new, contacted, qualified, lost).</li> <li>Purpose: Facilitates tracking and categorization of leads based on their progress in the sales process.</li> </ul>"},{"location":"modules/sales/lead/#lead-owner","title":"Lead Owner:","text":"<ul> <li>Description: The individual or sales representative responsible for managing and nurturing the lead.</li> <li>Purpose: Assigns accountability and facilitates communication with the person handling the lead.</li> </ul>"},{"location":"modules/sales/lead/#contact-information","title":"Contact Information:","text":""},{"location":"modules/sales/lead/#fields","title":"Fields:","text":"<ul> <li>First Name</li> <li>Last Name</li> <li>Title</li> <li>Email</li> <li>Phone</li> <li>Purpose: Provides essential details for reaching and communicating with the lead.</li> </ul>"},{"location":"modules/sales/lead/#company-information","title":"Company Information:","text":""},{"location":"modules/sales/lead/#fields_1","title":"Fields:","text":"<ul> <li>Company Name</li> <li>Industry</li> <li>Size</li> <li>Website</li> <li>Purpose: Offers insights into the lead's business and helps in tailoring communications.</li> </ul>"},{"location":"modules/sales/lead/#address-information","title":"Address Information:","text":""},{"location":"modules/sales/lead/#fields_2","title":"Fields:","text":"<ul> <li>Street Address</li> <li>City</li> <li>State</li> <li>Zip Code</li> <li>Country</li> <li>Purpose: Provides location details and facilitates geographically targeted interactions.</li> </ul>"},{"location":"modules/sales/lead/#lead-description","title":"Lead Description:","text":"<ul> <li>Description: A free-text field for capturing additional information about the lead, such as specific needs or preferences.</li> <li>Purpose: Offers a space for detailed notes and context regarding the lead's requirements.</li> </ul>"},{"location":"modules/sales/lead/#productservice-of-interest","title":"Product/Service of Interest:","text":"<ul> <li>Description: Indicates the specific products or services the lead is interested in.</li> <li>Purpose: Guides sales efforts and helps in tailoring proposals to match the lead's needs.</li> </ul>"},{"location":"modules/sales/lead/#lead-score","title":"Lead Score:","text":"<ul> <li>Description: A numerical score assigned to the lead based on various criteria, indicating its potential value.</li> <li>Purpose: Helps prioritize leads and focus efforts on those with higher potential.</li> </ul>"},{"location":"modules/sales/lead/#lead-qualification-criteria","title":"Lead Qualification Criteria:","text":"<ul> <li>Description: Criteria used to determine whether a lead is qualified to move to the next stage of the sales process.</li> <li>Purpose: Provides guidelines for evaluating the suitability of a lead for conversion.</li> </ul>"},{"location":"modules/sales/lead/#next-stepsaction-items","title":"Next Steps/Action Items:","text":"<ul> <li>Description: Outlines the next actions or follow-up steps planned for the lead.</li> <li>Purpose: Guides the sales team in managing and progressing the lead through the sales funnel.</li> </ul>"},{"location":"modules/sales/lead/#attachmentsdocuments","title":"Attachments/Documents:","text":"<ul> <li>Description: Space for attaching relevant documents or files related to the lead (e.g., proposals, contracts).</li> <li>Purpose: Consolidates important information in one place for easy reference.</li> </ul>"},{"location":"modules/sales/lead/#lead-conversion-probability","title":"Lead Conversion Probability:","text":"<ul> <li>Description: An estimate of the likelihood that the lead will convert into a customer.</li> <li>Purpose: Assists in forecasting and planning sales efforts based on conversion probabilities.</li> </ul>"},{"location":"modules/sales/lead/#creation-date-and-last-modified-date","title":"Creation Date and Last Modified Date:","text":"<ul> <li>Description: Timestamps indicating when the lead record was created and last modified.</li> <li>Purpose: Provides a historical record of lead interactions and updates.</li> </ul>"},{"location":"modules/sales/lead/#custom-fields","title":"Custom Fields:","text":"<ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the business.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the business.</li> </ul>"},{"location":"modules/sales/lead/#lead-workflow","title":"Lead Workflow:","text":""},{"location":"modules/sales/lead/#lead-capture","title":"Lead Capture:","text":"<p>Leads are captured through various channels such as online forms, trade shows, or marketing campaigns.</p>"},{"location":"modules/sales/lead/#lead-entry","title":"Lead Entry:","text":"<p>Relevant information is entered into the CRM system to create a lead record.</p>"},{"location":"modules/sales/lead/#lead-qualification","title":"Lead Qualification:","text":"<p>Leads are assessed based on qualification criteria to determine their potential.</p>"},{"location":"modules/sales/lead/#lead-nurturing","title":"Lead Nurturing:","text":"<p>Ongoing communication and engagement with the lead to build a relationship and address their needs.</p>"},{"location":"modules/sales/lead/#lead-scoring","title":"Lead Scoring:","text":"<p>Leads are assigned scores based on their behavior, engagement, and potential value.</p>"},{"location":"modules/sales/lead/#lead-status-updates","title":"Lead Status Updates:","text":"<p>The lead status is updated as it progresses through the sales pipeline.</p>"},{"location":"modules/sales/lead/#communication-and-follow-up","title":"Communication and Follow-up:","text":"<p>Sales representatives reach out to leads, providing information and addressing inquiries.</p>"},{"location":"modules/sales/lead/#lead-conversion","title":"Lead Conversion:","text":"<p>Qualified leads are converted into opportunities, and further sales activities are initiated.</p>"},{"location":"modules/sales/lead/#lost-or-disqualified-leads","title":"Lost or Disqualified Leads:","text":"<p>Leads that do not meet qualification criteria or are not progressing are marked as lost or disqualified.</p>"},{"location":"modules/sales/lead/#reporting-and-analysis","title":"Reporting and Analysis:","text":"<p>Reports and analytics are generated to analyze lead performance and sales effectiveness.</p> <p>The Lead management process is crucial for businesses to identify and capitalize on potential opportunities, tailor their sales efforts, and ultimately convert leads into customers. By maintaining detailed lead records in a CRM system, organizations can streamline their sales processes and improve overall customer acquisition efforts.</p>"},{"location":"modules/sales/opportunity/","title":"Opportunity","text":"<p>In Sales, an Opportunity represents a potential sale or business deal with a qualified lead or prospect. Opportunities are used to track and manage the sales process, providing insights into potential revenue and allowing sales teams to prioritize and focus their efforts. Here are the details of what an Opportunity typically contains, including the key fields involved:</p>"},{"location":"modules/sales/opportunity/#opportunity-details","title":"Opportunity Details:","text":""},{"location":"modules/sales/opportunity/#opportunity-idnumber","title":"Opportunity ID/Number:","text":"<ul> <li>Description: A unique identifier assigned to each Opportunity for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific opportunity in the CRM system.</li> </ul>"},{"location":"modules/sales/opportunity/#opportunity-name","title":"Opportunity Name:","text":"<ul> <li>Description: A descriptive name or title for the opportunity, usually related to the product or service being considered.</li> <li>Purpose: Provides a clear reference to the opportunity and its associated offering.</li> </ul>"},{"location":"modules/sales/opportunity/#opportunity-stage","title":"Opportunity Stage:","text":"<ul> <li>Description: Indicates the current stage of the opportunity in the sales process (e.g., qualification, proposal, negotiation, closed-won, closed-lost).</li> <li>Purpose: Facilitates tracking and categorization of opportunities based on their progress.</li> </ul>"},{"location":"modules/sales/opportunity/#opportunity-owner","title":"Opportunity Owner:","text":"<ul> <li>Description: The individual or sales representative responsible for managing and closing the opportunity.</li> <li>Purpose: Assigns accountability and facilitates communication with the person handling the opportunity.</li> </ul>"},{"location":"modules/sales/opportunity/#opportunity-amount","title":"Opportunity Amount:","text":"<ul> <li>Description: The potential monetary value or revenue associated with the opportunity.</li> <li>Purpose: Quantifies the expected financial impact of the opportunity if successfully closed.</li> </ul>"},{"location":"modules/sales/opportunity/#close-date","title":"Close Date:","text":"<ul> <li>Description: The anticipated or targeted date by which the opportunity is expected to be closed or finalized.</li> <li>Purpose: Helps in setting timelines and planning sales activities.</li> </ul>"},{"location":"modules/sales/opportunity/#probability-of-close","title":"Probability of Close:","text":"<ul> <li>Description: A percentage representing the likelihood or probability of successfully closing the opportunity.</li> <li>Purpose: Assists in forecasting and planning based on the likelihood of conversion.</li> </ul>"},{"location":"modules/sales/opportunity/#opportunity-source","title":"Opportunity Source:","text":"<ul> <li>Description: Indicates the channel or method through which the opportunity was generated (e.g., inbound lead, referral, marketing campaign).</li> <li>Purpose: Provides insights into the effectiveness of various lead generation sources.</li> </ul>"},{"location":"modules/sales/opportunity/#customeraccount-information","title":"Customer/Account Information:","text":""},{"location":"modules/sales/opportunity/#fields","title":"Fields:","text":"<ul> <li>Company Name</li> <li>Industry</li> <li>Size</li> <li>Website</li> <li>Purpose: Offers insights into the customer's business and helps in tailoring sales efforts.</li> </ul>"},{"location":"modules/sales/opportunity/#contact-information","title":"Contact Information:","text":""},{"location":"modules/sales/opportunity/#fields_1","title":"Fields:","text":"<ul> <li>First Name</li> <li>Last Name</li> <li>Title</li> <li>Email</li> <li>Phone</li> <li>Purpose: Provides essential details for reaching and communicating with key contacts associated with the opportunity.</li> </ul>"},{"location":"modules/sales/opportunity/#opportunity-description","title":"Opportunity Description:","text":"<ul> <li>Description: A free-text field for capturing additional information about the opportunity, such as specific requirements, challenges, or client expectations.</li> <li>Purpose: Offers a space for detailed notes and context regarding the opportunity.</li> </ul>"},{"location":"modules/sales/opportunity/#productsservices-of-interest","title":"Products/Services of Interest:","text":"<ul> <li>Description: Indicates the specific products or services the customer is interested in within the context of the opportunity.</li> <li>Purpose: Guides sales efforts and helps in tailoring proposals to match the customer's needs.</li> </ul>"},{"location":"modules/sales/opportunity/#competitors-if-applicable","title":"Competitors (If Applicable):","text":"<ul> <li>Description: Lists any competitors that the organization is competing against for the opportunity.</li> <li>Purpose: Provides awareness of competitive landscape and helps in formulating competitive strategies.</li> </ul>"},{"location":"modules/sales/opportunity/#attachmentsdocuments","title":"Attachments/Documents:","text":"<ul> <li>Description: Space for attaching relevant documents or files related to the opportunity (e.g., proposals, contracts).</li> <li>Purpose: Consolidates important information in one place for easy reference.</li> </ul>"},{"location":"modules/sales/opportunity/#opportunity-type","title":"Opportunity Type:","text":"<ul> <li>Description: Classifies the opportunity based on its nature (e.g., new business, upsell, cross-sell, renewal).</li> <li>Purpose: Helps in categorizing and prioritizing different types of opportunities.</li> </ul>"},{"location":"modules/sales/opportunity/#sales-team","title":"Sales Team:","text":"<ul> <li>Description: Lists the members of the sales team involved in managing the opportunity.</li> <li>Purpose: Facilitates collaboration and communication within the sales team.</li> </ul>"},{"location":"modules/sales/opportunity/#custom-fields","title":"Custom Fields:","text":"<ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the business.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the opportunity.</li> </ul>"},{"location":"modules/sales/opportunity/#opportunity-workflow","title":"Opportunity Workflow:","text":""},{"location":"modules/sales/opportunity/#opportunity-creation","title":"Opportunity Creation:","text":"<p>Opportunities are created based on qualified leads or potential sales identified in the CRM system.</p>"},{"location":"modules/sales/opportunity/#opportunity-qualification","title":"Opportunity Qualification:","text":"<p>Opportunities are assessed to determine their potential, and qualification criteria are applied.</p>"},{"location":"modules/sales/opportunity/#opportunity-assignment","title":"Opportunity Assignment:","text":"<p>An owner is assigned to the opportunity, typically a sales representative responsible for managing the sales process.</p>"},{"location":"modules/sales/opportunity/#progress-tracking","title":"Progress Tracking:","text":"<p>The opportunity progresses through various stages, with regular updates on its status, amount, and probability of close.</p>"},{"location":"modules/sales/opportunity/#communication-and-collaboration","title":"Communication and Collaboration:","text":"<p>Sales representatives communicate with the customer, address inquiries, and collaborate with the sales team.</p>"},{"location":"modules/sales/opportunity/#proposal-and-presentation","title":"Proposal and Presentation:","text":"<p>Relevant documents, proposals, or presentations are created and shared with the customer.</p>"},{"location":"modules/sales/opportunity/#negotiation","title":"Negotiation:","text":"<p>Negotiations may take place, and adjustments to terms, pricing, or scope may be discussed.</p>"},{"location":"modules/sales/opportunity/#closing","title":"Closing:","text":"<p>The opportunity is marked as closed, either as \"won\" when a deal is successfully closed or as \"lost\" when the opportunity does not materialize.</p>"},{"location":"modules/sales/opportunity/#follow-up-and-upsell-if-applicable","title":"Follow-up and Upsell (If Applicable):","text":"<p>After closure, follow-up activities may include post-sale support, customer satisfaction surveys, or identifying upsell opportunities.</p>"},{"location":"modules/sales/opportunity/#reporting-and-analysis","title":"Reporting and Analysis:","text":"<p>Reports and analytics are generated to analyze opportunity performance, win rates, and sales effectiveness.</p> <p>Effectively managing opportunities in a CRM system allows organizations to streamline their sales processes, optimize resource allocation, and enhance their ability to convert potential deals into actual revenue-generating customers.</p>"},{"location":"modules/sales/quotation/","title":"Quotation","text":"<p>In Sales, a Quotation (or Quote) is a formal document provided by a business to a prospective customer. The quotation outlines the products or services being offered, their corresponding prices, terms and conditions, and other relevant details. The goal of a quotation is to communicate a detailed proposal to the customer, helping them make informed decisions about whether to proceed with the purchase. Here are the details of what a Quotation typically contains, including the key fields involved:</p>"},{"location":"modules/sales/quotation/#quotation-details","title":"Quotation Details:","text":""},{"location":"modules/sales/quotation/#quotation-idnumber","title":"Quotation ID/Number:","text":"<ul> <li>Description: A unique identifier assigned to each Quotation for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific quotation in the CRM system.</li> </ul>"},{"location":"modules/sales/quotation/#quotation-date","title":"Quotation Date:","text":"<ul> <li>Description: The date when the quotation is issued or created.</li> <li>Purpose: Provides a timestamp for the validity period of the quotation and for tracking timelines.</li> </ul>"},{"location":"modules/sales/quotation/#quotation-expiry-date","title":"Quotation Expiry Date:","text":"<ul> <li>Description: The date until which the quotation is valid. After this date, the quoted prices and terms may no longer be applicable.</li> <li>Purpose: Sets a timeframe for the customer to consider the proposal and make a decision.</li> </ul>"},{"location":"modules/sales/quotation/#customerprospect-information","title":"Customer/Prospect Information:","text":""},{"location":"modules/sales/quotation/#fields","title":"Fields:","text":"<ul> <li>Customer Name</li> <li>Contact Person</li> <li>Address</li> <li>Email</li> <li>Phone</li> <li>Purpose: Identifies the customer or prospect receiving the quotation and provides contact details.</li> </ul>"},{"location":"modules/sales/quotation/#quotation-status","title":"Quotation Status:","text":"<ul> <li>Description: Indicates the current status of the quotation (e.g., drafted, sent, accepted, declined).</li> <li>Purpose: Facilitates tracking and categorization of quotations based on their status.</li> </ul>"},{"location":"modules/sales/quotation/#productsservices-offered","title":"Products/Services Offered:","text":""},{"location":"modules/sales/quotation/#fields_1","title":"Fields:","text":"<ul> <li>Product/Service Name</li> <li>Description</li> <li>Quantity</li> <li>Unit Price</li> <li>Total Price</li> <li>Purpose: Lists the items or services being offered, along with their quantities and prices.</li> </ul>"},{"location":"modules/sales/quotation/#terms-and-conditions","title":"Terms and Conditions:","text":"<ul> <li>Description: Outlines the terms and conditions associated with the quotation, including payment terms, delivery terms, and any other contractual obligations.</li> <li>Purpose: Sets expectations and clarifies the conditions under which the customer is expected to proceed.</li> </ul>"},{"location":"modules/sales/quotation/#discounts-and-taxes","title":"Discounts and Taxes:","text":""},{"location":"modules/sales/quotation/#fields_2","title":"Fields:","text":"<ul> <li>Discount Percentage</li> <li>Discount Amount</li> <li>Tax Percentage</li> <li>Tax Amount</li> <li>Purpose: Specifies any applicable discounts or taxes associated with the quoted prices.</li> </ul>"},{"location":"modules/sales/quotation/#total-quotation-amount","title":"Total Quotation Amount:","text":"<ul> <li>Description: The overall total amount the customer is expected to pay, including all line items, discounts, and taxes.</li> <li>Purpose: Provides a clear summary of the financial commitment associated with the quotation.</li> </ul>"},{"location":"modules/sales/quotation/#validity-notes","title":"Validity Notes:","text":"<ul> <li>Description: Additional notes or comments regarding the validity period, special conditions, or any other relevant information.</li> <li>Purpose: Offers a space for adding context or specific instructions related to the quotation.</li> </ul>"},{"location":"modules/sales/quotation/#quotation-owner","title":"Quotation Owner:","text":"<ul> <li>Description: The individual or sales representative responsible for managing and following up on the quotation.</li> <li>Purpose: Assigns accountability and facilitates communication with the person handling the quotation.</li> </ul>"},{"location":"modules/sales/quotation/#attachmentsdocuments","title":"Attachments/Documents:","text":"<ul> <li>Description: Space for attaching relevant documents or files related to the quotation (e.g., product brochures, additional specifications).</li> <li>Purpose: Consolidates important information for the customer's reference.</li> </ul>"},{"location":"modules/sales/quotation/#custom-fields","title":"Custom Fields:","text":"<ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the business.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the quotation.</li> </ul>"},{"location":"modules/sales/quotation/#quotation-workflow","title":"Quotation Workflow:","text":""},{"location":"modules/sales/quotation/#quotation-creation","title":"Quotation Creation:","text":"<p>Quotations are created based on customer requests, sales negotiations, or as part of the sales process.</p>"},{"location":"modules/sales/quotation/#productservice-selection","title":"Product/Service Selection:","text":"<p>The products or services to be included in the quotation are selected based on customer requirements.</p>"},{"location":"modules/sales/quotation/#pricing-and-discounting","title":"Pricing and Discounting:","text":"<p>Prices are determined for each item, and any applicable discounts are applied.</p>"},{"location":"modules/sales/quotation/#terms-and-conditions-inclusion","title":"Terms and Conditions Inclusion:","text":"<p>The terms and conditions associated with the quotation are added, covering aspects such as payment terms, delivery, and warranties.</p>"},{"location":"modules/sales/quotation/#validation-and-review","title":"Validation and Review:","text":"<p>The quotation is reviewed to ensure accuracy, completeness, and compliance with company policies.</p>"},{"location":"modules/sales/quotation/#quotation-issuance","title":"Quotation Issuance:","text":"<p>The quotation is officially issued or sent to the customer for their consideration.</p>"},{"location":"modules/sales/quotation/#follow-up-and-negotiation","title":"Follow-up and Negotiation:","text":"<p>Sales representatives follow up with the customer, address inquiries, and negotiate terms if necessary.</p>"},{"location":"modules/sales/quotation/#quotation-acceptance-or-rejection","title":"Quotation Acceptance or Rejection:","text":"<p>The customer either accepts the quotation, initiating further steps in the sales process, or rejects it.</p>"},{"location":"modules/sales/quotation/#quotation-conversion","title":"Quotation Conversion:","text":"<p>If accepted, the quotation may be converted into a sales order or other relevant document to initiate the fulfillment process.</p>"},{"location":"modules/sales/quotation/#reporting-and-analysis","title":"Reporting and Analysis:","text":"<p>Reports and analytics are generated to analyze quotation performance, conversion rates, and sales effectiveness.</p> <p>Effectively managing quotations in a CRM system allows businesses to streamline their sales processes, improve communication with customers, and increase the likelihood of successful deal closures. Quotations serve as critical documents in the sales cycle, providing transparency and clarity to both the business and the customer.</p>"},{"location":"modules/sales/sales-invoice/","title":"Sales Invoice","text":"<p>A Sales Invoice is a document issued by a seller to a buyer, indicating the products or services provided, their quantities, prices, and the agreed-upon terms of sale. It serves as a formal request for payment from the buyer. Here are the details of what a Sales Invoice typically contains, including key fields:</p>"},{"location":"modules/sales/sales-invoice/#sales-invoice-details","title":"Sales Invoice Details:","text":""},{"location":"modules/sales/sales-invoice/#invoice-number","title":"Invoice Number:","text":"<ul> <li>Description: A unique identifier assigned to each Sales Invoice for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific invoice in financial and sales records.</li> </ul>"},{"location":"modules/sales/sales-invoice/#invoice-date","title":"Invoice Date:","text":"<ul> <li>Description: The date when the Sales Invoice is issued.</li> <li>Purpose: Provides a timestamp for tracking the timing of the transaction.</li> </ul>"},{"location":"modules/sales/sales-invoice/#seller-information","title":"Seller Information:","text":"<p>Fields:</p> <ul> <li>Seller/Business Name</li> <li>Seller/Business Address</li> <li>Seller/Business Contact Information</li> <li>Purpose: Identifies the seller or company issuing the invoice.</li> </ul>"},{"location":"modules/sales/sales-invoice/#buyer-information","title":"Buyer Information:","text":"<p>Fields:</p> <ul> <li>Buyer Name</li> <li>Buyer Address</li> <li>Buyer Contact Information</li> <li>Purpose: Specifies the buyer or customer to whom the invoice is addressed.</li> </ul>"},{"location":"modules/sales/sales-invoice/#payment-terms","title":"Payment Terms:","text":"<ul> <li>Description: Specifies the terms and conditions under which payment is expected, including due date, discounts, and any other relevant terms.</li> <li>Purpose: Provides clarity on when and how the payment is expected.</li> </ul>"},{"location":"modules/sales/sales-invoice/#reference-documents","title":"Reference Documents:","text":"<p>Fields:</p> <ul> <li>Sales Order Number (if applicable)</li> <li>Delivery Note Number (if applicable)</li> <li>Purpose: References the sales order and delivery note related to the goods or services being invoiced.</li> </ul>"},{"location":"modules/sales/sales-invoice/#item-details","title":"Item Details:","text":"<p>Fields:</p> <ul> <li>Item Code/ID</li> <li>Item Description</li> <li>Quantity</li> <li>Unit Price</li> <li>Total Amount</li> <li>Purpose: Lists the specific items or services provided, including details of quantity, pricing, and total amounts.</li> </ul>"},{"location":"modules/sales/sales-invoice/#subtotal","title":"Subtotal:","text":"<ul> <li>Description: The sum of the individual item amounts before applying taxes or additional charges.</li> <li>Purpose: Provides the total cost of the goods or services before additional charges.</li> </ul>"},{"location":"modules/sales/sales-invoice/#tax-details","title":"Tax Details:","text":"<p>Fields:</p> <ul> <li>Type of Tax (e.g., VAT, GST)</li> <li>Tax Rate</li> <li>Tax Amount</li> <li>Purpose: Breaks down the applicable taxes on the invoice.</li> </ul>"},{"location":"modules/sales/sales-invoice/#total-amount","title":"Total Amount:","text":"<ul> <li>Description: The grand total amount payable, including the sum of the subtotal, taxes, and any additional charges.</li> <li>Purpose: Represents the total amount due for payment.</li> </ul>"},{"location":"modules/sales/sales-invoice/#currency-information","title":"Currency Information:","text":"<p>Fields:</p> <ul> <li>Currency Code</li> <li>Exchange Rate (if applicable)</li> <li>Purpose: Specifies the currency in which the invoice is issued and, if applicable, the exchange rate.</li> </ul>"},{"location":"modules/sales/sales-invoice/#authorized-signatures","title":"Authorized Signatures:","text":"<p>Fields:</p> <ul> <li>Signature of the Person Authorizing the Invoice</li> <li>Approval Date</li> <li>Purpose: Confirms that the Sales Invoice has been reviewed and authorized by authorized individuals.</li> </ul>"},{"location":"modules/sales/sales-invoice/#notescomments","title":"Notes/Comments:","text":"<ul> <li>Description: Space for additional notes, comments, or observations related to the invoice.</li> <li>Purpose: Allows for any relevant information not covered by other fields to be documented.</li> </ul> <p>Custom Fields:</p> <ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the organization.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the Sales Invoice.</li> </ul>"},{"location":"modules/sales/sales-invoice/#sales-invoice-workflow","title":"Sales Invoice Workflow:","text":""},{"location":"modules/sales/sales-invoice/#order-processing","title":"Order Processing:","text":"<p>A sales order may precede the creation of a sales invoice. During this phase, the buyer places an order for goods or services.</p>"},{"location":"modules/sales/sales-invoice/#invoice-generation","title":"Invoice Generation:","text":"<p>The seller generates a Sales Invoice based on the order details, indicating the products or services provided.</p>"},{"location":"modules/sales/sales-invoice/#verification","title":"Verification:","text":"<p>The Sales Invoice is verified by the seller's finance or accounting team to ensure accuracy.</p>"},{"location":"modules/sales/sales-invoice/#authorization","title":"Authorization:","text":"<p>The Sales Invoice is reviewed and authorized by authorized personnel within the seller's organization.</p>"},{"location":"modules/sales/sales-invoice/#issuance-to-customer","title":"Issuance to Customer:","text":"<p>The Sales Invoice is issued to the customer, either electronically or as a physical document.</p>"},{"location":"modules/sales/sales-invoice/#payment-initiation","title":"Payment Initiation:","text":"<p>The customer initiates the payment based on the details provided in the Sales Invoice.</p>"},{"location":"modules/sales/sales-invoice/#documentation-retention","title":"Documentation Retention:","text":"<p>The Sales Invoice, along with related documents, is retained for record-keeping and audit purposes.</p> <p>The Sales Invoice serves as a crucial document in the sales process, providing a formal record of the transaction and facilitating transparent and accurate financial transactions between sellers and buyers.</p>"},{"location":"modules/sales/sales-order/","title":"Sales Order","text":"<p>In Customer Relationship Management (CRM) systems, a Sales Order is a document that represents a formal request or confirmation for the delivery of products or services to a customer. It is a crucial step in the sales process, indicating the customer's intent to purchase and providing the necessary details for order fulfillment. Here are the details of what a Sales Order typically contains, including the key fields involved:</p>"},{"location":"modules/sales/sales-order/#sales-order-details","title":"Sales Order Details:","text":""},{"location":"modules/sales/sales-order/#sales-order-idnumber","title":"Sales Order ID/Number:","text":"<ul> <li>Description: A unique identifier assigned to each Sales Order for tracking and reference purposes.</li> <li>Purpose: Helps in uniquely identifying and referencing the specific sales order in the CRM system.</li> </ul>"},{"location":"modules/sales/sales-order/#order-date","title":"Order Date:","text":"<ul> <li>Description: The date when the sales order is created or confirmed.</li> <li>Purpose: Provides a timestamp for tracking timelines and order processing.</li> </ul>"},{"location":"modules/sales/sales-order/#customer-information","title":"Customer Information:","text":""},{"location":"modules/sales/sales-order/#fields","title":"Fields:","text":"<ul> <li>Customer Name</li> <li>Contact Person</li> <li>Address</li> <li>Email</li> <li>Phone</li> <li>Purpose: Identifies the customer receiving the products or services and provides contact details.</li> </ul>"},{"location":"modules/sales/sales-order/#sales-order-status","title":"Sales Order Status:","text":"<ul> <li>Description: Indicates the current status of the sales order (e.g., pending, confirmed, shipped, delivered).</li> <li>Purpose: Facilitates tracking and categorization of sales orders based on their status in the fulfillment process.</li> </ul>"},{"location":"modules/sales/sales-order/#productservice-details","title":"Product/Service Details:","text":""},{"location":"modules/sales/sales-order/#fields_1","title":"Fields:","text":"<ul> <li>Product/Service Name</li> <li>Description</li> <li>Quantity</li> <li>Unit Price</li> <li>Total Price</li> <li>Purpose: Lists the items or services ordered, along with their quantities and prices.</li> </ul>"},{"location":"modules/sales/sales-order/#delivery-information","title":"Delivery Information:","text":""},{"location":"modules/sales/sales-order/#fields_2","title":"Fields:","text":"<ul> <li>Delivery Date</li> <li>Shipping Method</li> <li>Shipping Address</li> <li>Purpose: Specifies when and how the ordered items will be delivered and provides shipping details.</li> </ul>"},{"location":"modules/sales/sales-order/#payment-terms","title":"Payment Terms:","text":"<ul> <li>Description: Outlines the terms and conditions related to payment, including due dates and payment methods.</li> <li>Purpose: Sets expectations for the customer regarding payment obligations.</li> </ul>"},{"location":"modules/sales/sales-order/#discounts-and-taxes","title":"Discounts and Taxes:","text":""},{"location":"modules/sales/sales-order/#fields_3","title":"Fields:","text":"<ul> <li>Discount Percentage</li> <li>Discount Amount</li> <li>Tax Percentage</li> <li>Tax Amount</li> <li>Purpose: Specifies any applicable discounts or taxes associated with the order.</li> </ul>"},{"location":"modules/sales/sales-order/#total-order-amount","title":"Total Order Amount:","text":"<ul> <li>Description: The overall total amount the customer is expected to pay, including all line items, discounts, and taxes.</li> <li>Purpose: Provides a clear summary of the financial commitment associated with the sales order.</li> </ul>"},{"location":"modules/sales/sales-order/#sales-order-owner","title":"Sales Order Owner:","text":"<ul> <li>Description: The individual or sales representative responsible for managing and overseeing the sales order.</li> <li>Purpose: Assigns accountability and facilitates communication with the person handling the order.</li> </ul>"},{"location":"modules/sales/sales-order/#attachmentsdocuments","title":"Attachments/Documents:","text":"<ul> <li>Description: Space for attaching relevant documents or files related to the sales order (e.g., invoices, contracts).</li> <li>Purpose: Consolidates important information for the customer's reference and internal record-keeping.</li> </ul>"},{"location":"modules/sales/sales-order/#shipping-and-handling-charges","title":"Shipping and Handling Charges:","text":""},{"location":"modules/sales/sales-order/#fields_4","title":"Fields:","text":"<ul> <li>Shipping Charges</li> <li>Handling Charges</li> <li>Purpose: Specifies any additional charges associated with shipping and handling.</li> </ul>"},{"location":"modules/sales/sales-order/#order-notescomments","title":"Order Notes/Comments:","text":"<ul> <li>Description: Free-text field for adding any specific notes, comments, or instructions related to the sales order.</li> <li>Purpose: Offers a space for including additional context or information not covered by structured fields.</li> </ul>"},{"location":"modules/sales/sales-order/#custom-fields","title":"Custom Fields:","text":"<ul> <li>Description: Additional fields that can be customized based on the specific needs and requirements of the business.</li> <li>Purpose: Allows flexibility in capturing unique information relevant to the sales order.</li> </ul>"},{"location":"modules/sales/sales-order/#sales-order-workflow","title":"Sales Order Workflow:","text":""},{"location":"modules/sales/sales-order/#sales-order-creation","title":"Sales Order Creation:","text":"<p>Sales orders are created based on confirmed quotations, customer requests, or as part of the order fulfillment process.</p>"},{"location":"modules/sales/sales-order/#productservice-selection","title":"Product/Service Selection:","text":"<p>The products or services to be included in the sales order are selected based on customer requirements and previously agreed-upon quotations.</p>"},{"location":"modules/sales/sales-order/#pricing-and-discounting","title":"Pricing and Discounting:","text":"<p>Prices are determined for each item, and any applicable discounts are applied.</p>"},{"location":"modules/sales/sales-order/#delivery-and-shipping-details","title":"Delivery and Shipping Details:","text":"<p>Delivery dates, shipping methods, and shipping addresses are specified.</p>"},{"location":"modules/sales/sales-order/#validation-and-review","title":"Validation and Review:","text":"<p>The sales order is reviewed to ensure accuracy, completeness, and compliance with company policies.</p>"},{"location":"modules/sales/sales-order/#sales-order-confirmation","title":"Sales Order Confirmation:","text":"<p>The sales order is confirmed, and the customer is notified of the order details and expected delivery.</p>"},{"location":"modules/sales/sales-order/#order-fulfillment","title":"Order Fulfillment:","text":"<p>The ordered items are picked, packed, and prepared for shipping or delivery.</p>"},{"location":"modules/sales/sales-order/#shipping-and-tracking","title":"Shipping and Tracking:","text":"<p>The items are shipped, and tracking information may be provided to the customer.</p>"},{"location":"modules/sales/sales-order/#invoice-generation","title":"Invoice Generation:","text":"<p>An invoice is generated based on the sales order for payment processing.</p>"},{"location":"modules/sales/sales-order/#payment-receipt","title":"Payment Receipt:","text":"<p>The customer submits payment based on the agreed-upon terms.</p>"},{"location":"modules/sales/sales-order/#status-update","title":"Status Update:","text":"<p>The status of the sales order is updated to reflect its progress (e.g., from confirmed to shipped).</p>"},{"location":"modules/sales/sales-order/#follow-up-and-customer-communication","title":"Follow-up and Customer Communication:","text":"<p>Sales representatives may follow up with the customer to ensure satisfaction and address any post-order inquiries.</p>"},{"location":"modules/sales/sales-order/#reporting-and-analysis","title":"Reporting and Analysis:","text":"<p>Reports and analytics are generated to analyze sales order performance, fulfillment efficiency, and customer satisfaction.</p> <p>Effectively managing sales orders in a CRM system allows businesses to streamline their order fulfillment process, improve communication with customers, and enhance overall customer satisfaction. Sales orders play a pivotal role in converting confirmed opportunities into tangible revenue-generating transactions.</p>"},{"location":"platform/","title":"Platform Documentation","text":"<p>Welcome to the Platform Documentation for codbex a powerful cloud development platform that simplifies application development and deployment.! This comprehensive documentation serves as a detailed guide to understanding and utilizing the various components and features of our platform. Whether you're a new user seeking to familiarize yourself with the platform's capabilities or an experienced developer looking for advanced functionalities, this documentation provides valuable insights and resources to support your journey.</p>"},{"location":"platform/#languages","title":"Languages","text":"<p>Explore the various programming languages supported by our platform, including:</p> <ul> <li>JavaScript</li> <li>TypeScript</li> <li>Python</li> <li>ABAP</li> </ul>"},{"location":"platform/#engines","title":"Engines","text":"<p>Discover the powerful engines and runtime environments that drive our platform, including:</p> <ul> <li>JavaScript</li> <li>TypeScript</li> <li>Python</li> <li>Commands</li> <li>Jobs</li> <li>Listeners</li> <li>Web</li> <li>Wiki</li> <li>WebSockets</li> <li>Security</li> <li>OpenAPI</li> <li>OData</li> <li>Templates</li> <li>Content Management System (CMS)</li> <li>Business Process Management (BPM)</li> <li>Integration Engine (Apache Camel)</li> <li>FTP</li> <li>SFTP</li> </ul>"},{"location":"platform/#artefacts","title":"Artefacts","text":"<p>Learn about the various artefacts and file formats supported by our platform, including:</p> <ul> <li>Access Constraints Artefact</li> <li>BPMN v2.0 Files</li> <li>Apache Camel Routes Files (*.camel)</li> <li>Command Files (*.command)</li> <li>Confluence Wiki Files (*.confluence)</li> <li>Markdown Wiki Format Support</li> <li>CSV Files and CSV Import Model (CSVIM)</li> <li>DataSources Files (*.datasource)</li> <li>Extension Points Files (*.extensionpoint)</li> <li>Extensions Files (*.extension)</li> <li>Job Files (*.job)</li> <li>Listener Files (*.listener)</li> <li>Table Artefact (*.table)</li> <li>View Artefact (*.view)</li> <li>Websocket Artefact</li> <li>Schema Artefact (*.schema)</li> <li>JavaScript Files (.js, .mjs)</li> <li>TypeScript Files (*.ts)</li> <li>OpenAPI Artefact (*.openapi)</li> </ul>"},{"location":"platform/#sdk-api","title":"SDK (API)","text":"<p>Explore the Software Development Kit (SDK) for building custom integrations and extending platform functionality, including:</p> <ul> <li>BPM</li> <li>CMS</li> <li>Core</li> <li>Database</li> <li>Extensions</li> <li>Git</li> <li>HTTP</li> <li>Indexing</li> <li>IO</li> <li>Job</li> <li>Log</li> <li>Mail</li> <li>Messaging</li> <li>Net</li> <li>Platform</li> <li>Security</li> <li>Template</li> <li>Test</li> <li>Utils</li> </ul>"},{"location":"platform/#widgets-ui","title":"Widgets (UI)","text":"<p>Discover the collection of User Interface (UI) widgets available for creating interactive and visually appealing applications, including:</p> <ul> <li>UI Widgets</li> </ul>"},{"location":"platform/#services-rest","title":"Services (REST)","text":"<p>Explore the RESTful services provided by our platform for seamless integration and interoperability, including:</p> <ul> <li>RESTful Services</li> </ul> <p>Explore the documentation to gain a deeper understanding of the codbex platform. Whether you're developing in multiple languages, designing integration flows, managing artefacts, or building RESTful services, this index serves as a concise guide to the platform's key features.</p>"},{"location":"platform/artefacts/","title":"Artefacts","text":"<p>Explore detailed documentation for various artefacts available in the codbex platform:</p> <ol> <li>Access Constraints (*.access)</li> <li>BPMN v2.0 Files (*.bpmn)</li> <li>Apache Camel Routes Files (*.camel)</li> <li>Command Files (*.command)</li> <li>Confluence Wiki Files (*.confluence)</li> <li>CSV Files and CSV Import Model (CSVIM)</li> <li>DataSources Files (*.datasource)</li> <li>Database Schema Model (*.dsm)</li> <li>Entity Data Model (*.edm)</li> <li>Entity Files (*.entity)</li> <li>Exposes (project.json/exposes)</li> <li>Extensions Files (*.extension)</li> <li>Extension Points Files (*.extensionpoint)</li> <li>Form Files (*.form)</li> <li>HTML Files (*.html)</li> <li>Job Files (*.job)</li> <li>JavaScript Files (.js, .mjs)</li> <li>Listener Files (*.listener)</li> <li>Markdown Wiki Format Support</li> <li>Application Model file (*.model)</li> <li>OData (*.odata)</li> <li>OpenAPI Artefact (*.openapi)</li> <li>Python Files (*.py)</li> <li>Role Files (*.role)</li> <li>Schema Artefact (*.schema)</li> <li>Table Artefact (*.table)</li> <li>Template Files (template.js)</li> <li>TypeScript Files (*.ts)</li> <li>View Artefact (*.view)</li> <li>Websocket Artefact (*.websocket)</li> </ol> <p>Feel free to click on each artefact to access its detailed documentation and learn more about its features, use cases, and configuration options.</p>"},{"location":"platform/artefacts/access/","title":"Access Constraints","text":"<p>File extension: <code>*.access</code></p>"},{"location":"platform/artefacts/access/#overview","title":"Overview:","text":"<p>The codbex platform uses access control through access files (<code>.access</code>) to define access constraints for different artifacts. These files are processed by the Security Engine to enforce security policies. Below is a general description of the access constraints in a JSON <code>.access</code> file:</p>"},{"location":"platform/artefacts/access/#access-constraints-json-structure","title":"Access Constraints JSON Structure:","text":"<p>The access constraints file typically has a JSON structure with specific properties for defining access rules for different roles or users.</p> <p>Example:</p> <pre><code>{\n   \"constraints\":[\n      {\n         \"scope\":\"HTTP\",\n         \"path\":\"/myproject/myfolder/myartifact1.txt\",\n         \"method\":\"*\",\n         \"roles\":[\n            \"myrole1\",\n            \"myrole2\"\n         ]\n      },\n      {\n         \"scope\":\"HTTP\",\n         \"path\":\"/myproject/myfolder/myartifact2.txt\",\n         \"method\":\"GET\",\n         \"roles\":[\n            \"myrole3\",\n            \"myrole4\"\n         ]\n      }\n   ]\n}\n</code></pre> <p>Explanation of Properties:</p> <ul> <li> <p>constraints (Array): An array containing individual access rules.</p> </li> <li> <p>scope (String): The scope of the access rule. Common values include \"HTTP\" or \"WS.\" It specifies where the resource is located.</p> </li> <li> <p>roles (Array): The roles for which the access rule is defined. It can be a specific user role or a built-in role such as <code>Everyone</code> or <code>Developer</code>.</p> </li> <li> <p>methods (String): HTTP method for which the access rule is applied (e.g., \"GET\", \"POST\", \"PUT\", \"DELETE\").</p> </li> <li> <p>path (String): The path to the resource or endpoint to which the access rule applies. It can include wildcards for broader matching.</p> </li> </ul> <p>Notes:</p> <ul> <li>The access constraints are evaluated based on the order in which they appear in the file. The first and/or longest matching rule is applied.</li> <li>Users who do not match any defined access rule may have default access, which is often read-only or no access at all.</li> <li>Access constraints contribute to the overall security model of the platform, helping to control who can perform specific actions on resources within the platform.</li> </ul>"},{"location":"platform/artefacts/access/#notes","title":"Notes","text":"<p>Always refer to the latest documentation or release notes for codbex platform, as details and features may evolve over time.</p> <p>The Access Constraints are processed by the Security Engine.</p>"},{"location":"platform/artefacts/bpmn/","title":"Business Process Model and Notation","text":"<p>File extension: <code>*.bpmn</code></p>"},{"location":"platform/artefacts/bpmn/#overview","title":"Overview:","text":"<p>The codbex platform provides support for BPMN (Business Process Model and Notation) v2.0 files, allowing users to model, design, and execute business processes within the runtime container. Below is an overview of the BPMN support in the platform:</p>"},{"location":"platform/artefacts/bpmn/#bpmn-v20-support","title":"BPMN v2.0 Support:","text":""},{"location":"platform/artefacts/bpmn/#modeling-environment","title":"Modeling Environment:","text":"<p>The codbex platform includes a visual modeling environment for BPMN 2.0. Users can create and edit BPMN diagrams through a web-based graphical editor, allowing for the design of business processes using BPMN notation.</p>"},{"location":"platform/artefacts/bpmn/#graphical-editor","title":"Graphical Editor:","text":"<p>The graphical editor within the platform enables users to draw BPMN diagrams by dragging and dropping elements onto the canvas. It provides an intuitive interface for defining the structure and flow of business processes.</p>"},{"location":"platform/artefacts/bpmn/#bpmn-elements","title":"BPMN Elements:","text":"<p>The codbex platform supports a variety of BPMN 2.0 elements, including tasks, gateways, events, and connectors. Users can model complex processes by combining these elements in a visual representation.</p>"},{"location":"platform/artefacts/bpmn/#process-validation","title":"Process Validation:","text":"<p>The BPMN editor in codbex platform often includes validation features to ensure that the modeled processes adhere to BPMN 2.0 standards. This helps in identifying and correcting errors in the design phase.</p>"},{"location":"platform/artefacts/bpmn/#integration-with-other-artifacts","title":"Integration with Other Artifacts:","text":"<p>BPMN diagrams can be integrated with other artifacts in the platform. For example, BPMN processes may interact with scripting services, database tables, or web services within the same codbex environment.</p>"},{"location":"platform/artefacts/bpmn/#execution-of-bpmn-processes","title":"Execution of BPMN Processes:","text":"<p>The platform supports the execution of BPMN processes. Once a BPMN diagram is created and saved, it can be deployed and executed within the runtime environment. This enables the automation of business processes defined in BPMN.</p>"},{"location":"platform/artefacts/bpmn/#collaboration-and-version-control","title":"Collaboration and Version Control:","text":"<p>The codbex platform offer collaboration features, allowing multiple users to work on BPMN diagrams simultaneously. Additionally, version control capabilities help in managing different versions of BPMN processes.</p>"},{"location":"platform/artefacts/bpmn/#monitoring-and-analytics","title":"Monitoring and Analytics:","text":"<p>Depending on the features available in the specific version of the codbex platform, there are variety monitoring and analytics tools to track the execution of BPMN processes. These tools provide insights into process performance and bottlenecks.</p>"},{"location":"platform/artefacts/bpmn/#how-to-use-bpmn","title":"How to Use BPMN:","text":""},{"location":"platform/artefacts/bpmn/#access-bpmn-editor","title":"Access BPMN Editor:","text":"<ul> <li>Log in to your codbex platform instance and navigate to the BPMN modeling environment.</li> </ul>"},{"location":"platform/artefacts/bpmn/#create-a-new-bpmn-diagram","title":"Create a New BPMN Diagram:","text":"<ul> <li>Start a new BPMN diagram, either from scratch or by importing an existing BPMN 2.0 file.</li> </ul>"},{"location":"platform/artefacts/bpmn/#model-the-business-process","title":"Model the Business Process:","text":"<ul> <li>Use the graphical editor to model the business process by adding BPMN elements, connecting them, and defining the flow.</li> </ul>"},{"location":"platform/artefacts/bpmn/#validate-and-save","title":"Validate and Save:","text":"<ul> <li>Validate the BPMN diagram to ensure it follows BPMN 2.0 standards. Save the diagram in the environment.</li> </ul>"},{"location":"platform/artefacts/bpmn/#deploy-and-execute","title":"Deploy and Execute:","text":"<ul> <li>Deploy the BPMN process to the runtime environment. Once deployed, it can be triggered and executed as needed.</li> </ul>"},{"location":"platform/artefacts/bpmn/#collaborate-and-monitor-optional","title":"Collaborate and Monitor (Optional):","text":"<ul> <li>Collaborate with other users if needed and monitor the execution of BPMN processes using available tools.</li> </ul>"},{"location":"platform/artefacts/bpmn/#notes","title":"Notes","text":"<p>Please note that the specific features and user interface details may vary based on the version of codbex platform you are using. Always refer to the official documentation or release notes for the most up-to-date information on BPMN support in platform.</p> <p>The BPMN artefacts are processed by the BPM Engine.</p>"},{"location":"platform/artefacts/camel/","title":"Apache Camel Routes","text":"<p>File extension: <code>*.camel</code></p>"},{"location":"platform/artefacts/camel/#overview","title":"Overview:","text":"<p>The codbex provides support for Apache Camel Routes through the Camel Editor. The Camel Editor allows developers to design and edit Camel routes using graphical tools, making it easier to create and visualize integration solutions.</p> <p>Here is an overview of the support for Apache Camel Routes files (<code>*.camel</code>) in the platform:</p>"},{"location":"platform/artefacts/camel/#apache-camel-editor","title":"Apache Camel Editor:","text":""},{"location":"platform/artefacts/camel/#graphical-design","title":"Graphical Design:","text":"<p>The platform built-in Camel Editor provides a graphical interface for designing Camel routes. This allows developers to visually define the flow of integration processes using components provided by Apache Camel.</p>"},{"location":"platform/artefacts/camel/#palette-of-components","title":"Palette of Components:","text":"<p>The editor includes a palette of Camel components that users can drag and drop onto the canvas. These components represent various integration patterns and actions that can be configured to create complex routes.</p>"},{"location":"platform/artefacts/camel/#property-editors","title":"Property Editors:","text":"<p>Each Camel component on the canvas has a corresponding property editor, enabling developers to configure the behavior of the component. This includes setting parameters, defining endpoints, and specifying data transformations.</p>"},{"location":"platform/artefacts/camel/#code-view","title":"Code View:","text":"<p>While the graphical editor is the primary interface, the tooling also allows developers to view and edit the underlying Camel route code in XML format. This provides a way to fine-tune configurations or work directly with the XML if preferred.</p>"},{"location":"platform/artefacts/camel/#camel-route-files-camel","title":"Camel Route Files (<code>*.camel</code>):","text":""},{"location":"platform/artefacts/camel/#file-format","title":"File Format:","text":"<p>Apache Camel routes in the codbex platform are typically stored in files with a <code>.camel</code> extension. These files contain the XML representation of the Camel routes created using the Camel Editor.</p>"},{"location":"platform/artefacts/camel/#editing-and-versioning","title":"Editing and Versioning:","text":"<p>Developers can use the integrated development environment (IDE) to edit and version control their Camel route files. The platform supports collaborative development, allowing multiple developers to work on the same project.</p>"},{"location":"platform/artefacts/camel/#deployment","title":"Deployment:","text":"<p>Once Camel routes are designed and configured, they can be deployed within the runtime environment. This enables the execution of integration processes defined in the Camel routes.</p>"},{"location":"platform/artefacts/camel/#integration-with-other-artifacts","title":"Integration with Other Artifacts:","text":""},{"location":"platform/artefacts/camel/#combining-with-other-artifacts","title":"Combining with Other Artifacts:","text":"<p>Camel routes can be part of larger codbex platform projects, integrating seamlessly with other artifacts such as scripting services, web pages, and data models. This enables the creation of comprehensive solutions that include both integration and application logic.</p>"},{"location":"platform/artefacts/camel/#collaborative-development","title":"Collaborative Development:","text":"<p>Camel routes, like other artifacts, can be collaboratively developed by multiple team members using the platform's collaborative features. This fosters teamwork and accelerates the development lifecycle.</p>"},{"location":"platform/artefacts/camel/#notes","title":"Notes","text":"<p>As software evolves, features and capabilities may be enhanced, and it's recommended to refer to the latest documentation or release notes for the most up-to-date information on Apache Camel support.</p> <p>The Apache Camel artefacts are processed by the Integrations Engine.</p>"},{"location":"platform/artefacts/command/","title":"Command","text":"<p>File extension: <code>*.command</code></p>"},{"location":"platform/artefacts/command/#overview","title":"Overview:","text":"<p>The codbex provides provides support for command files (*.command) as a way to define and execute commands in the runtime environment. Command files are written in JSON, and they allow users to define and run server-side scripts or execute specific tasks within the platform.</p> <p>Here's an overview of the support for Command files (*.command):</p>"},{"location":"platform/artefacts/command/#command-files","title":"Command Files:","text":""},{"location":"platform/artefacts/command/#file-format","title":"File Format:","text":"<p>Command files have a <code>.command</code> file extension and are written in JSON. These files typically contain reference to server-side script code that can interact with various aspects of the runtime environment or shell script interacting with the underliying operating system.</p> <p>Example:</p> <pre><code>{\n    \"description\": \"command description\",\n    \"contentType\": \"text/plain\",\n    \"set\": {\n        \"GREETING\": \"hello world!\"\n    },\n    \"unset\": [\n        \"BYE\"\n    ],\n    \"commands\": [\n        {\n            \"os\": \"linux\",\n            \"command\": \"sh print.sh\"\n        },\n        {\n            \"os\": \"mac\",\n            \"command\": \"sh print.sh\"\n        },\n        {\n            \"os\": \"windows\",\n            \"command\": \"print.bat\"\n        }\n    ]\n}\n</code></pre> <p>The provided example is a JSON representation of a command file. Let's break down the structure and elements of this command file:</p>"},{"location":"platform/artefacts/command/#elements-of-the-command-file","title":"Elements of the Command File:","text":"<ul> <li> <p>description: A description providing information about the purpose or nature of the command.</p> </li> <li> <p>contentType: Specifies the content type, indicating the type of data expected or returned. In this example, it is set to \"text/plain.\"</p> </li> <li> <p>set: A section where variables are set. In this case, a variable named \"GREETING\" is set with the value \"hello world!\"</p> </li> <li> <p>unset: An array of variables to unset or remove. In this example, the variable \"BYE\" is to be unset.</p> </li> <li> <p>commands: An array of commands to be executed based on the operating system.</p> </li> </ul>"},{"location":"platform/artefacts/command/#command-object","title":"Command Object:","text":"<ul> <li> <p>os: Specifies the operating system for which the command is intended. Can be \"linux,\" \"mac,\" or \"windows.\"</p> </li> <li> <p>command: The actual command to be executed. For Linux and macOS, it is \"sh print.sh,\" and for Windows, it is \"print.bat.\"</p> </li> </ul>"},{"location":"platform/artefacts/command/#usage-and-execution","title":"Usage and Execution:","text":"<p>When this command file is executed in the environment, it will perform the following actions:</p> <ul> <li>Set the variable \"GREETING\" to \"hello world!\"</li> <li>Unset the variable \"BYE.\"</li> <li>Execute different commands based on the operating system:<ul> <li>On Linux and macOS, it will execute the shell script \"print.sh.\"</li> <li>On Windows, it will execute the batch file \"print.bat.\"</li> </ul> </li> </ul> <p>Note:</p> <p>Ensure that the specified shell script (\"print.sh\") and batch file (\"print.bat\") exist and are appropriately configured in the respective operating system environments.</p> <p>This command file structure is a versatile way to define and execute commands, making it useful for various scenarios, including environment setup, configuration changes, or system interactions. Adjustments can be made based on specific requirements and the desired behavior in different operating systems.</p>"},{"location":"platform/artefacts/command/#scripting-capabilities","title":"Scripting Capabilities:","text":"<p>Command files leverage the scripting capabilities of the platform, allowing developers to write server-side JavaScript code that can perform operations such as data manipulation, file handling, or integration with other services.</p>"},{"location":"platform/artefacts/command/#execution-environment","title":"Execution Environment:","text":"<p>Command files are executed within the runtime environment. This means that they have access to the platform's APIs, services, and resources, enabling developers to create powerful and customizable server-side logic.</p>"},{"location":"platform/artefacts/command/#features-and-use-cases","title":"Features and Use Cases:","text":""},{"location":"platform/artefacts/command/#task-automation","title":"Task Automation:","text":"<p>Command files are commonly used for task automation within the platform. Developers can define scripts to perform routine tasks, data processing, or other server-side operations without manual intervention.</p>"},{"location":"platform/artefacts/command/#integration","title":"Integration:","text":"<p>Command files can be used to integrate with other artifacts, such as database tables, entities, or web services. This enables the creation of comprehensive solutions where command files interact with other components within the platform.</p>"},{"location":"platform/artefacts/command/#collaborative-development","title":"Collaborative Development:","text":"<p>Like other artifacts in the codbex platform, command files can be part of collaborative development projects. Multiple developers can work on the same project, share and version control command files, fostering teamwork and efficient development practices.</p>"},{"location":"platform/artefacts/command/#execution","title":"Execution:","text":"<p>Command files can be executed within the platform using various methods, such as the scripting services, scheduled jobs, or manual triggering through the Web IDE or the REST endpoint.</p>"},{"location":"platform/artefacts/command/#notes","title":"Notes","text":"<p>It's important to note that features and capabilities may evolve over time, so it's recommended to refer to the latest documentation or release notes for the most up-to-date information on command file support and usage.</p> <p>The Command artefacts are processed by the Command Engine.</p>"},{"location":"platform/artefacts/confluence/","title":"Confluence","text":"<p>File extension: <code>*.confluence</code></p>"},{"location":"platform/artefacts/confluence/#overview","title":"Overview:","text":"<p>The codbex platform provides support for Confluence wiki files (*.confluence), allowing users to seamlessly integrate and manage Confluence content within the platform. This support enables collaborative development and documentation workflows by combining the strengths of both codbex and Confluence.</p>"},{"location":"platform/artefacts/confluence/#key-features","title":"Key Features:","text":""},{"location":"platform/artefacts/confluence/#confluence-integration","title":"Confluence Integration:","text":"<ul> <li>The codbex platform allows you to import, edit, and manage Confluence wiki files directly within the Web IDE.</li> </ul>"},{"location":"platform/artefacts/confluence/#editing-and-versioning","title":"Editing and Versioning:","text":"<ul> <li>Utilize the Web IDE to edit Confluence wiki files collaboratively. Leverage version control features to track changes and manage document history.</li> </ul>"},{"location":"platform/artefacts/confluence/#content-visualization","title":"Content Visualization:","text":"<ul> <li>Preview Confluence wiki files within the Web IDE to ensure accurate rendering and formatting.</li> </ul>"},{"location":"platform/artefacts/confluence/#collaborative-development","title":"Collaborative Development:","text":"<ul> <li>Collaborate with team members on Confluence wiki content by sharing and editing files in real-time using platform's collaborative development features.</li> </ul>"},{"location":"platform/artefacts/confluence/#getting-started","title":"Getting Started:","text":""},{"location":"platform/artefacts/confluence/#importing-confluence-wiki-files","title":"Importing Confluence Wiki Files:","text":"<ul> <li>Use the Web IDE to import existing Confluence wiki files into your project.</li> </ul>"},{"location":"platform/artefacts/confluence/#editing-confluence-content","title":"Editing Confluence Content:","text":"<ul> <li>Open Confluence wiki files in the Web IDE to edit content using the integrated markdown editor.</li> </ul>"},{"location":"platform/artefacts/confluence/#version-control","title":"Version Control:","text":"<ul> <li>Leverage the version control capabilities to manage changes, commit versions, and track the history of Confluence wiki files.</li> </ul>"},{"location":"platform/artefacts/confluence/#example","title":"Example","text":"<p>Below is an example of a simple Confluence wiki file (example.confluence):</p> <pre><code>h1. Welcome to Confluence wiki pages\n</code></pre> <p>This is an example Confluence page supported by the codbex platform.</p> <p>Features:</p> <ul> <li>Integration with Confluence</li> <li>Collaborative editing using Web IDE</li> <li>Version control for Confluence wiki files</li> </ul>"},{"location":"platform/artefacts/confluence/#best-practices","title":"Best Practices:","text":"<ul> <li> <p>Familiarize Yourself with Confluence Syntax:</p> <ul> <li>Confluence wiki files use a specific syntax. Refer to Confluence documentation for syntax guidelines.</li> </ul> </li> <li> <p>Regularly Commit Changes:</p> <ul> <li>Use the version control features to commit changes regularly, ensuring a well-documented history of modifications.</li> </ul> </li> <li> <p>Test Rendering:</p> <ul> <li>Before publishing or updating Confluence content, preview the rendering within the Web IDE to catch any formatting issues.</li> </ul> </li> </ul>"},{"location":"platform/artefacts/confluence/#conclusion","title":"Conclusion:","text":"<p>The integration of Confluence wiki files support enhances collaboration and documentation workflows, providing a seamless environment for managing Confluence content alongside other development artifacts. Leverage the features of the platform to streamline your development and documentation processes.</p> <p>The Confluence artefacts are processed by the Wiki Engine.</p>"},{"location":"platform/artefacts/csv/","title":"Comma-Separated Values","text":"<p>File extension: <code>*.csv</code></p>"},{"location":"platform/artefacts/csv/#overview","title":"Overview:","text":"<p>CSV (Comma-Separated Values) files are commonly used for tabular data storage, and they serve various use cases within the codbex platform. Here are some use cases for <code>*.csv</code> files within the platform, especially for predefined data load:</p>"},{"location":"platform/artefacts/csv/#data-import-and-export","title":"Data Import and Export:","text":"<p>CSV files are widely used for importing and exporting data in tabular format. In the platform, you can use CSV files to quickly transfer data between different systems or to and from databases.</p>"},{"location":"platform/artefacts/csv/#predefined-data-load","title":"Predefined Data Load:","text":"<p>CSV files are commonly employed to load predefined data into a database. For example, when setting up a new application or environment, you can use CSV files to populate initial data into tables, providing a convenient way to seed databases with sample or default data.</p>"},{"location":"platform/artefacts/csv/#data-migration","title":"Data Migration:","text":"<p>During data migration processes, CSV files can be used as an intermediary format to move data from one system to another. This is particularly useful when transitioning between different versions of a system or migrating data to a new platform.</p>"},{"location":"platform/artefacts/csv/#batch-processing","title":"Batch Processing:","text":"<p>The platform supports batch processing, and CSV files can be a convenient input format for batch jobs. You can create scripts or services that read data from CSV files, perform batch operations, and update databases or other systems accordingly.</p>"},{"location":"platform/artefacts/csv/#testing-and-development","title":"Testing and Development:","text":"<p>In the development and testing phase, CSV files can be utilized to provide test data for applications. Developers can create CSV files containing various data scenarios to test the functionality and performance of their applications.</p>"},{"location":"platform/artefacts/csv/#data-sharing-between-applications","title":"Data Sharing Between Applications:","text":"<p>CSV files provide a standardized and lightweight format for sharing data between different applications. This is particularly beneficial when integrating or exchanging data with external systems or services.</p>"},{"location":"platform/artefacts/csv/#simple-data-analysis","title":"Simple Data Analysis:","text":"<p>For quick data analysis tasks, CSV files can be a convenient choice. You can use spreadsheet software or import CSV files into data analysis tools to perform basic analysis on the contained data.</p>"},{"location":"platform/artefacts/csv/#structured-data-input-for-scripts","title":"Structured Data Input for Scripts:","text":"<p>When developing scripts or services within the platform, CSV files can serve as a structured input source. Scripts can read data from CSV files to perform specific operations, enhancing data processing capabilities.</p>"},{"location":"platform/artefacts/csv/#conclusion","title":"Conclusion:","text":"<p>To leverage these use cases, the codbex platform provides APIs and tools for working with CSV files, making it straightforward to read, write, and manipulate data in this popular tabular format.</p>"},{"location":"platform/artefacts/csvim/","title":"CSVIM (Comma Separated Values Import Model)","text":"<p>File extension: <code>*.csvim</code></p>"},{"location":"platform/artefacts/csvim/#overview","title":"Overview:","text":"<p>The CSVIM (Comma Separated Values Import Model) file is used in the codbex platform to define the parameters and configuration for importing data from CSV files into a specified table in the database. This model allows you to customize the import process based on your specific requirements.</p>"},{"location":"platform/artefacts/csvim/#csvim-file-structure","title":"CSVIM File Structure","text":"<p>A typical CSVIM file has the following structure:</p> <pre><code>{\n  \"files\": [\n    {\n      \"table\": \"MY_DATA\",\n      \"schema\": \"PUBLIC\",\n      \"file\": \"/my-project/csvim/data.csv\",\n      \"header\": true,\n      \"useHeaderNames\": true,\n      \"delimField\": \",\",\n      \"delimEnclosing\": \"\\\"\",\n      \"distinguishEmptyFromNull\": true\n    }\n    // Additional file configurations can be added...\n  ]\n}\n</code></pre>"},{"location":"platform/artefacts/csvim/#csvim-file-properties","title":"CSVIM File Properties:","text":"<ul> <li> <p><code>table</code> (String): Specifies the name of the table in the database where the data will be imported.</p> </li> <li> <p><code>schema</code> (String, Optional): Specifies the schema of the table. If not provided, the default schema is used.</p> </li> <li> <p><code>file</code> (String): Specifies the path to the CSV file that contains the data to be imported.</p> </li> <li> <p><code>header</code> (Boolean): Indicates whether the CSV file contains a header row. If set to true, the first row is treated as a header and skipped during the import.</p> </li> <li> <p><code>useHeaderNames</code> (Boolean): Specifies whether to use header names when mapping columns. If set to true, header names are used.</p> </li> <li> <p><code>delimField</code> (String): Specifies the delimiter used between fields in the CSV file, such as a comma (<code>,</code>).</p> </li> <li> <p><code>delimEnclosing</code> (String): Specifies the enclosing character for fields in the CSV file, such as double quotes (<code>\"</code>).</p> </li> <li> <p><code>distinguishEmptyFromNull</code> (Boolean): Specifies whether to distinguish empty values from <code>null</code>. If set to true, empty values are treated as null during the import.</p> </li> </ul>"},{"location":"platform/artefacts/csvim/#example-usage","title":"Example Usage:","text":"<p>In the provided example, a CSV file (<code>/my-project/csvim/data.csv</code>) is imported into the <code>MY_DATA</code> table in the <code>PUBLIC</code> schema. The CSV file has a header, and header names are used for column mapping. The fields are delimited by a comma (<code>,</code>), and double quotes (<code>\"</code>) are used for enclosing fields. Empty values are distinguished from <code>null</code>.</p>"},{"location":"platform/artefacts/csvim/#getting-started","title":"Getting Started","text":""},{"location":"platform/artefacts/csvim/#create-csvim-file","title":"Create CSVIM File:","text":"<p>Create a new CSVIM file or modify an existing one based on your import requirements.</p>"},{"location":"platform/artefacts/csvim/#configure-file-properties","title":"Configure File Properties:","text":"<p>Adjust the properties within the files array to specify the target table, schema, CSV file path, and import settings.</p>"},{"location":"platform/artefacts/csvim/#import-data","title":"Import Data:","text":"<p>Use the CSVIM file to initiate the data import process. This is done through the import mechanisms provided by the platform.</p>"},{"location":"platform/artefacts/csvim/#best-practices","title":"Best Practices","text":""},{"location":"platform/artefacts/csvim/#validate-csv-data","title":"Validate CSV Data:","text":"<p>Ensure that the CSV file is well-formed and matches the specified configuration in the CSVIM file.</p>"},{"location":"platform/artefacts/csvim/#review-import-results","title":"Review Import Results:","text":"<p>After importing data, review any log or error messages to ensure a successful import.</p>"},{"location":"platform/artefacts/csvim/#backup-data","title":"Backup Data:","text":"<p>Before performing data imports, consider backing up existing data in the target table to prevent accidental data loss.</p>"},{"location":"platform/artefacts/csvim/#conclusion","title":"Conclusion:","text":"<p>The CSVIM (Comma Separated Values Import Model) in the codbex platform provides a flexible and configurable approach to importing data from CSV files into database tables. Customize the CSVIM file based on your data and import requirements to streamline the data loading process.</p>"},{"location":"platform/artefacts/datasource/","title":"DataSource","text":"<p>File extension: <code>*.datasource</code></p>"},{"location":"platform/artefacts/datasource/#overview","title":"Overview:","text":"<p>The <code>*.datasource</code> files in the codbex platform are used to define and configure data sources. These files specify the details required to connect to a database.</p> <p>Here's an explanation of the example <code>MyDB.datasource</code> file and its properties:</p> <pre><code>{\n  \"location\": \"/my-project/datasources/MyDB.datasource\",\n  \"name\": \"MyDB\",\n  \"driver\": \"org.h2.Driver\",\n  \"url\": \"jdbc:h2:file:./target/codbex/h2/MyDB\",\n  \"username\": \"sa\",\n  \"password\": \"\"\n}\n</code></pre> <p>Properties:</p> <ul> <li><code>location</code> (String): Specifies the location or path of the datasource file within the project. In this example, it is located at <code>/my-project/datasources/MyDB.datasource.</code></li> <li><code>name</code> (String): Represents the name of the datasource. This is a user-defined name that helps identify and reference the datasource. In this example, it is named <code>MyDB.</code></li> <li><code>driver</code> (String): Defines the JDBC driver class for the database or service. In this example, the driver class is \"org.h2.Driver,\" which is commonly used for the H2 database.</li> <li><code>url</code> (String): Specifies the JDBC connection URL for accessing the database. The URL format is specific to the database type. In this case, it is <code>jdbc:h2:file:./target/codbex/h2/MyDB</code> for an H2 database.</li> <li><code>username</code> (String): Provides the username for connecting to the database. In this example, the username is <code>sa</code>.</li> <li><code>password</code> (String): Represents the password associated with the provided username. In this case, the password is an empty string, but it would typically be populated with the actual password.</li> </ul>"},{"location":"platform/artefacts/datasource/#getting-started","title":"Getting Started:","text":""},{"location":"platform/artefacts/datasource/#create-a-datasource-file","title":"Create a Datasource File:","text":"<p>Create a new <code>*.datasource</code> file or modify an existing one based on your specific datasource requirements.</p>"},{"location":"platform/artefacts/datasource/#configure-datasource-properties","title":"Configure Datasource Properties:","text":"<p>Adjust the properties within the file to match the details of your target database or service. Update the location, name, driver class, URL, username, password, and nature accordingly.</p>"},{"location":"platform/artefacts/datasource/#use-datasource-in-scripts-or-services","title":"Use Datasource in Scripts or Services:","text":"<p>Once configured, you can reference the datasource in your project to establish connections to the associated database or service.</p>"},{"location":"platform/artefacts/datasource/#best-practices","title":"Best Practices:","text":""},{"location":"platform/artefacts/datasource/#secure-credentials","title":"Secure Credentials:","text":"<p>If using sensitive information such as passwords, ensure that the <code>*.datasource</code> files are appropriately secured. Avoid storing plaintext passwords and consider using secure storage mechanisms.</p>"},{"location":"platform/artefacts/datasource/#validate-connection","title":"Validate Connection:","text":"<p>After configuring a datasource, validate the connection to the associated database or service to ensure that the provided details are correct.</p>"},{"location":"platform/artefacts/datasource/#conclusion","title":"Conclusion:","text":"<p>The <code>*.datasource</code> files in the platform provide a convenient and standardized way to configure and manage connections to databases or external services. Customize these files based on your specific datasource requirements to streamline data access within your applications.</p>"},{"location":"platform/artefacts/dsm/","title":"Database Schema Model","text":"<p>File extension: <code>*.dsm</code></p>"},{"location":"platform/artefacts/dsm/#overview","title":"Overview","text":"<p>The Database Schema Model (DSM) artefact in codbex platform is a representation of the database schema structure in a declarative format. It allows users to define and manage database schema metadata, including tables, columns, constraints, and relationships.</p>"},{"location":"platform/artefacts/dsm/#syntax","title":"Syntax","text":"<p>The syntax of a DSM file is XML, representing a hierarchical structure of tables and their attributes.</p>"},{"location":"platform/artefacts/dsm/#purpose","title":"Purpose","text":"<p>DSM files facilitate data modeling by providing a structured approach to define and visualize database schemas. They help in planning and designing database structures before implementation.</p>"},{"location":"platform/artefacts/edm/","title":"Entity Data Model","text":"<p>File extension: <code>*.edm</code></p>"},{"location":"platform/artefacts/edm/#overview","title":"Overview","text":"<p>The Entity Data Model (EDM) artefact in the codbex platform is an XML file used by the Entity Data Modeler to define the domain model of applications. It provides a structured representation of entities, relationships, and properties, allowing developers to design and manage data models for their applications.</p>"},{"location":"platform/artefacts/edm/#purpose","title":"Purpose","text":"<p>The EDM artefact serves several purposes:</p> <ol> <li> <p>Data Modeling: Developers can use the EDM file to model the domain-specific entities and their relationships within an application. This includes defining entities, attributes, associations, and inheritance hierarchies.</p> </li> <li> <p>Code Generation: The EDM file acts as a source for code generation (via *.model), enabling the automatic creation of data access code, such as entity classes, repositories, and database schema scripts. This accelerates the development process and ensures consistency between the data model and application code.</p> </li> </ol>"},{"location":"platform/artefacts/edm/#syntax","title":"Syntax","text":"<p>The syntax of an EDM file is XML-based, following the Entity Data Model schema. It consists of elements representing entities, properties, associations, and other metadata related to the domain model.</p>"},{"location":"platform/artefacts/edm/#usage","title":"Usage","text":"<p>EDM files are typically used in the following scenarios:</p> <ul> <li> <p>Application Development: Developers use EDM files to define the data model of their applications, including entities, properties, and associations. This serves as a blueprint for implementing database schemas, entity classes, and data access logic.</p> </li> <li> <p>Code Generation: EDM files are consumed by code generation tools or frameworks to automatically generate code artifacts based on the defined data model. This includes generating entity classes, data access layers, and database scripts tailored to the application's requirements.</p> </li> </ul>"},{"location":"platform/artefacts/edm/#conclusion","title":"Conclusion","text":"<p>The Entity Data Model (EDM) artefact in codbex provides a standardized approach to define and manage the domain model of applications. By representing entities, properties, and relationships in a structured XML format, EDM files enable developers to design, generate, and integrate data models seamlessly within their development workflows.</p>"},{"location":"platform/artefacts/entity/","title":"Entity","text":"<p>File extension: <code>*.hbm.xml</code></p>"},{"location":"platform/artefacts/entity/#overnvew","title":"Overnvew","text":"<p>Hibernate Mapping Files (<code>*.hbm.xml</code>) are XML-based configuration files used by the Hibernate ORM framework to define the mapping between domain objects (entities) and database tables. These files provide a declarative way to specify how entities are persisted, loaded, and managed by Hibernate.</p>"},{"location":"platform/artefacts/entity/#purpose","title":"Purpose","text":"<p>Hibernate Mapping Files serve several purposes:</p> <ol> <li> <p>Entity Mapping: The primary purpose of Hibernate Mapping Files is to map domain objects (entities) to corresponding database tables. Developers specify the entity name, table name, primary key, properties, and associations with other entities using XML elements.</p> </li> <li> <p>ORM Configuration: Hibernate Mapping Files are used to configure Object-Relational Mapping (ORM) settings for Hibernate. Developers can specify the mapping between entity properties and database columns, as well as define inheritance hierarchies, associations, and fetching strategies.</p> </li> <li> <p>Database Interaction: By defining entity mappings in Hibernate Mapping Files, developers can interact with the database using Hibernate's ORM capabilities. This includes persisting entities, loading them from the database, executing queries, and performing CRUD operations.</p> </li> </ol>"},{"location":"platform/artefacts/entity/#syntax","title":"Syntax","text":"<p>The syntax of Hibernate Mapping Files is XML-based, consisting of elements representing entity mappings and their attributes. Here's a simplified example of a Hibernate Mapping File:</p> <pre><code>&lt;!DOCTYPE hibernate-mapping PUBLIC\n    \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n    \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;\n\n&lt;hibernate-mapping&gt;\n    &lt;class name=\"com.example.Product\" table=\"products\"&gt;\n        &lt;id name=\"id\" type=\"long\"&gt;\n            &lt;generator class=\"native\" /&gt;\n        &lt;/id&gt;\n        &lt;property name=\"name\" column=\"product_name\" type=\"string\" /&gt;\n        &lt;property name=\"price\" column=\"product_price\" type=\"double\" /&gt;\n        &lt;set name=\"categories\" table=\"product_category\" inverse=\"true\" cascade=\"all\"&gt;\n            &lt;key column=\"product_id\" /&gt;\n            &lt;many-to-many column=\"category_id\" class=\"com.example.Category\" /&gt;\n        &lt;/set&gt;\n    &lt;/class&gt;\n&lt;/hibernate-mapping&gt;\n</code></pre>"},{"location":"platform/artefacts/entity/#usage","title":"Usage","text":"<p>Hibernate Mapping Files are typically used in the following scenarios:</p> <ul> <li> <p>ORM Configuration: Developers use Hibernate Mapping Files to configure entity mappings and ORM settings for Hibernate. This includes specifying table names, primary keys, column mappings, associations, and inheritance strategies.</p> </li> <li> <p>Database Interaction: Hibernate Mapping Files facilitate database interaction using Hibernate's ORM capabilities. Developers can persist, load, update, and delete entities using Hibernate sessions and transactions, based on the defined entity mappings.</p> </li> <li> <p>Code Generation: Hibernate Mapping Files can be consumed by code generation tools or frameworks to automatically generate entity classes, database schema scripts, and other artifacts. This helps streamline the development process and ensures consistency between the data model and application code.</p> </li> </ul>"},{"location":"platform/artefacts/entity/#conclusion","title":"Conclusion","text":"<p>Hibernate Mapping Files (<code>*.hbm.xml</code>) provide a powerful mechanism for defining entity mappings and configuring ORM settings in Hibernate. By specifying entity-to-table mappings and other metadata in XML format, developers can seamlessly integrate their applications with relational databases and leverage Hibernate's ORM capabilities.</p>"},{"location":"platform/artefacts/exposes/","title":"Exposes Section in Project (project.json) File","text":"<p>File: <code>project.json</code>/<code>exposes</code></p>"},{"location":"platform/artefacts/exposes/#overview","title":"Overview","text":"<p>The \"exposes\" section in the Project (<code>project.json</code>) file specifies the modules or resources that are exposed to consumers or other parts of the application. It allows developers to define what components or functionalities of the project should be made accessible externally.</p>"},{"location":"platform/artefacts/exposes/#purpose","title":"Purpose","text":"<p>The \"exposes\" section serves several purposes:</p> <ol> <li> <p>Module Exposure: Developers can use the \"exposes\" section to specify which modules of the project should be exposed to other parts of the application or external consumers. This includes UI components, APIs, services, libraries, or any other resources that need to be accessed by other modules or applications.</p> </li> <li> <p>Resource Accessibility: By defining what modules or resources are exposed, developers can control the visibility and accessibility of various components within the project. This helps in encapsulating implementation details and promoting modular design principles.</p> </li> <li> <p>Integration Points: The \"exposes\" section defines integration points for consuming modules or external applications. It provides a clear indication of what functionalities are available for use and how they can be accessed or consumed.</p> </li> </ol>"},{"location":"platform/artefacts/exposes/#syntax","title":"Syntax","text":"<p>The syntax of the \"exposes\" section is a JSON array containing strings representing the names or identifiers of the modules or resources being exposed. Here's a simplified example:</p> <pre><code>{\n  \"exposes\": [\n    \"ui\",\n    \"samples\"\n  ]\n}\n</code></pre> <p>In this example, the project exposes two modules named \"ui\" and \"samples\" to other parts of the application or external consumers.</p>"},{"location":"platform/artefacts/exposes/#usage","title":"Usage","text":"<p>The \"exposes\" section is typically used in the following scenarios:</p> <ul> <li> <p>UI Components: Developers use the \"exposes\" section to expose UI components, such as pages, widgets, templates, or stylesheets, to be consumed by other parts of the application or external applications.</p> </li> <li> <p>API Endpoints: The \"exposes\" section can specify API endpoints or services that are exposed for consumption by other modules or external clients. This includes RESTful APIs, GraphQL endpoints, WebSocket endpoints, or any other types of services.</p> </li> <li> <p>Library Sharing: Developers can expose libraries, utilities, or helper functions to be shared and reused by other modules within the project or by external applications.</p> </li> </ul>"},{"location":"platform/artefacts/exposes/#conclusion","title":"Conclusion","text":"<p>The \"exposes\" section in the Project (<code>project.json</code>) file allows developers to specify which modules or resources of the project should be exposed for consumption by other parts of the application or external consumers. By defining integration points and resource accessibility, developers can promote modular design, encapsulation, and reusability within their projects.</p>"},{"location":"platform/artefacts/extension/","title":"Extension","text":"<p>File extension: <code>*.extension</code></p>"},{"location":"platform/artefacts/extension/#overview","title":"Overview","text":"<p>The <code>*.extension</code> files in the codbex platform are used to define extensions that contribute additional functionality or modifications to a specific extension point within the platform.</p> <p>Here's an explanation of the example <code>myextension.extension</code> file and its properties:</p> <pre><code>{\n  \"location\": \"/my-project/extensions/myextension.extension\",\n  \"module\": \"/my-project/extensions/myscript\",\n  \"extensionPoint\": \"/my-project/extensions/myextensionpoint\",\n  \"description\": \"My Extension\",\n  \"createdBy\": \"admin\",\n  \"createdAt\": \"2022-07-06T3:24:12+0000\"\n}\n</code></pre> <p>Properties:</p> <ul> <li><code>location</code> (String): Specifies the location or path of the extension file within the project. In this example, it is located at <code>/my-project/extensions/myextension.extension</code>.</li> <li><code>module</code> (String): Specifies the location or path of the module or script that provides the implementation of the extension. In this example, the module is <code>/my-project/extensions/myscript</code>.</li> <li><code>extensionPoint</code> (String): Represents the unique name or identifier of the extension point to which this extension contributes. It should match the name of an existing extension point. In this example, it is <code>/my-project/extensions/myextensionpoint</code>.</li> <li>description (String): Provides a description of the extension, describing its purpose or functionality. In this example, the description is <code>My Extension</code>.</li> <li><code>createdBy</code> (String): Indicates the entity or user who created the extension. In this example, it is marked as <code>admin</code>.</li> <li><code>createdAt</code> (String): Represents the timestamp when the extension was created. The timestamp follows the ISO 8601 format. In this example, it is <code>2022-07-06T3:24:12+0000</code>.</li> </ul>"},{"location":"platform/artefacts/extension/#example-usage","title":"Example Usage:","text":"<p>The example test.extension file defines a test extension that contributes functionality to the <code>myextension</code> extension point within the platform.</p>"},{"location":"platform/artefacts/extension/#getting-started","title":"Getting Started:","text":""},{"location":"platform/artefacts/extension/#create-an-extension-file","title":"Create an Extension File:","text":"<p>Create a new `*.extension`` file or modify an existing one based on your specific extension requirements.</p>"},{"location":"platform/artefacts/extension/#configure-extension-properties","title":"Configure Extension Properties:","text":"<p>Adjust the properties within the file to match the details of your extension. Update the location, module, extensionPoint, description, createdBy, and createdAt accordingly.</p>"},{"location":"platform/artefacts/extension/#implement-extension-logic","title":"Implement Extension Logic:","text":"<p>Create the associated module or script (e.g., <code>/my-project/extensions/myscript</code>) to provide the implementation logic for the extension. This script should contain the functionality you want to contribute to the extension point.</p>"},{"location":"platform/artefacts/extension/#register-extension-point","title":"Register Extension Point:","text":"<p>Ensure that the extension point specified in extensionPoint property exists and is registered within the platform. Extensions contribute to existing extension points.</p>"},{"location":"platform/artefacts/extension/#best-practices","title":"Best Practices:","text":""},{"location":"platform/artefacts/extension/#clear-naming-conventions","title":"Clear Naming Conventions:","text":"<p>Follow clear and consistent naming conventions for extensions to ensure easy identification and reference.</p>"},{"location":"platform/artefacts/extension/#documentation-and-comments","title":"Documentation and Comments:","text":"<p>Provide meaningful descriptions for extensions and document the purpose and usage of the contributed functionality. Additionally, add comments within the associated module or script to explain the implementation.</p>"},{"location":"platform/artefacts/extension/#conclusion","title":"Conclusion:","text":"<p>The <code>*.extension</code> files in the codbex platform allow you to extend and enhance the functionality of the platform by contributing additional features or modifications to existing extension points. Customize extensions based on your specific requirements to enable modular and extensible applications.</p>"},{"location":"platform/artefacts/extensionpoint/","title":"ExtensionPoint","text":"<p>File extension: <code>*.extensionpoint</code></p>"},{"location":"platform/artefacts/extensionpoint/#overview","title":"Overview:","text":"<p>The <code>*.extensionpoint</code> files in codbex platform are used to define extension points within the platform. Extension points allow you to extend and customize the behavior of the system by contributing additional functionality or modifications.</p> <p>Here's an explanation of the example <code>myextensionpoint.extensionpoint</code> file and its properties:</p> <pre><code>{\n  \"location\": \"/my-project/extensions/myextensionpoint.extensionpoint\",\n  \"name\": \"/my-project/extensions/myextensionpoint\",\n  \"description\": \"My Extension Point\",\n  \"createdBy\": \"admin\",\n  \"createdAt\": \"2022-07-06T2:53:01+0000\"\n}\n</code></pre> <p>Properties:</p> <ul> <li><code>location</code> (String): Specifies the location or path of the extension point file within the project. In this example, it is located at <code>/my-project/extensions/myextensionpoint</code>.</li> <li><code>name</code> (String): Represents the unique name or identifier of the extension point. It is used to reference and identify the extension point within the system. In this example, it is named <code>/my-project/extensions/myextensionpoint.</code></li> <li><code>description</code> (String): Provides a description of the extension point, describing its purpose or functionality. In this example, the description is <code>My Extension Point</code>.</li> <li><code>createdBy</code> (String): Indicates the entity or user who created the extension point. In this example, it is marked as <code>admin</code>. <code>createdAt</code> (String): Represents the timestamp when the extension point was created. The timestamp follows the ISO 8601 format. In this example, it is <code>2022-07-06T2:53:01+0000</code>.</li> </ul>"},{"location":"platform/artefacts/extensionpoint/#example-usage","title":"Example Usage:","text":"<p>The example <code>myextensionpoint.extensionpoint</code> file defines a test extension point within the platform. It is used to extend or customize the behavior of the system based on specific requirements.</p>"},{"location":"platform/artefacts/extensionpoint/#getting-started","title":"Getting Started:","text":""},{"location":"platform/artefacts/extensionpoint/#create-an-extension-point-file","title":"Create an Extension Point File:","text":"<p>Create a new *.extensionpoint file or modify an existing one based on your specific extension point requirements.</p>"},{"location":"platform/artefacts/extensionpoint/#configure-extension-point-properties","title":"Configure Extension Point Properties:","text":"<p>Adjust the properties within the file to match the details of your extension point. Update the location, name, description, createdBy, and createdAt accordingly.</p>"},{"location":"platform/artefacts/extensionpoint/#implement-extensions","title":"Implement Extensions:","text":"<p>Once the extension point is defined, you can implement extensions that contribute additional functionality or modifications to the system. Extensions are typically defined in separate artifacts.</p>"},{"location":"platform/artefacts/extensionpoint/#best-practices","title":"Best Practices:","text":""},{"location":"platform/artefacts/extensionpoint/#clear-naming-conventions","title":"Clear Naming Conventions:","text":"<p>Follow clear and consistent naming conventions for extension points to ensure easy identification and reference.</p>"},{"location":"platform/artefacts/extensionpoint/#document-purpose-and-usage","title":"Document Purpose and Usage:","text":"<p>Provide meaningful descriptions for extension points to document their purpose and intended usage. This helps other developers understand how to leverage or extend the functionality.</p>"},{"location":"platform/artefacts/extensionpoint/#conclusion","title":"Conclusion:","text":"<p>The <code>*.extensionpoint</code> files in the codbex platform serve as a powerful mechanism for extending and customizing the behavior of the platform. Define and configure extension points based on your specific requirements to enable modular and extensible applications.</p>"},{"location":"platform/artefacts/form/","title":"Form Design","text":"<p>File extension: <code>*.form</code></p>"},{"location":"platform/artefacts/html/","title":"HTML","text":"<p>File extension: <code>*.html</code></p>"},{"location":"platform/artefacts/html/#overview","title":"Overview","text":"<p>HTML (<code>*.html</code>) artefacts represent static web pages or templates within the project. These files contain markup, styles, and possibly scripting code that define the structure and presentation of web content.</p>"},{"location":"platform/artefacts/html/#purpose","title":"Purpose","text":"<p>HTML artefacts serve the following purposes:</p> <ol> <li> <p>Web Page Definition: HTML files define the structure and content of web pages within the project. They contain elements such as headers, paragraphs, lists, links, images, and other HTML tags to create the visual layout of the page.</p> </li> <li> <p>User Interface (UI) Templating: HTML templates are often used to define reusable UI components or layouts that can be shared across multiple pages or views within the application. They provide a consistent look and feel for the user interface.</p> </li> <li> <p>Client-Side Scripting: HTML files may include client-side scripting code, such as JavaScript, to add interactivity and dynamic behavior to web pages. This scripting code can handle user interactions, manipulate the DOM, and communicate with server-side components.</p> </li> </ol>"},{"location":"platform/artefacts/html/#usage","title":"Usage","text":"<p>HTML artefacts are typically used for the following purposes:</p> <ul> <li> <p>Static Web Pages: Developers use HTML files to create static web pages with fixed content and layout. These pages are often used for informational purposes or to display static content that doesn't change frequently.</p> </li> <li> <p>UI Templating: HTML templates are employed to define reusable UI components, layouts, or partial views that can be dynamically included or rendered within other pages or views. This promotes code reuse and modular design.</p> </li> <li> <p>Client-Side Interactivity: HTML files may contain JavaScript code to implement client-side logic and interactivity. This can include form validation, event handling, DOM manipulation, and AJAX requests to interact with server-side components.</p> </li> </ul>"},{"location":"platform/artefacts/html/#conclusion","title":"Conclusion","text":"<p>HTML (<code>*.html</code>) artefacts are essential components of web development projects, providing the foundation for creating static web pages, defining UI templates, and implementing client-side interactivity. By leveraging HTML, developers can create engaging web experiences with rich content and dynamic functionality.</p> <p>For detailed usage instructions and best practices, refer to web development resources and documentation on HTML, CSS, and JavaScript.</p>"},{"location":"platform/artefacts/job/","title":"Job","text":"<p>File extension: <code>*.job</code></p>"},{"location":"platform/artefacts/job/#overview","title":"Overview:","text":"<p>The <code>*.job</code> files in the codbex platform are used to define and schedule jobs, allowing you to automate and execute recurring tasks within the platform.</p> <p>Here's an explanation of the example <code>myjob.job</code> file and its properties:</p> <pre><code>{\n  \"expression\": \"0/10 * * * * ?\",\n  \"group\": \"defined\",\n  \"handler\": \"my-project/jobs/my-handler.js\",\n  \"description\": \"My Job with Parameters\",\n  \"parameters\": [\n    {\n      \"type\": \"string\",\n      \"name\": \"stringParam\",\n      \"defaultValue\": \"My Value\",\n      \"choices\": \"\",\n      \"description\": \"My String Param\"\n    },\n    {\n      \"type\": \"number\",\n      \"name\": \"numberParam\",\n      \"defaultValue\": \"1\",\n      \"description\": \"My Number Param\"\n    },\n    {\n      \"type\": \"boolean\",\n      \"name\": \"boolParam\",\n      \"defaultValue\": \"true\",\n      \"description\": \"My Bool Value\"\n    },\n    {\n      \"type\": \"choice\",\n      \"name\": \"choiceParam\",\n      \"defaultValue\": \"a\",\n      \"choices\": \"a,b,c\",\n      \"description\": \"My Choice Param\"\n    }\n  ]\n}\n</code></pre> <p>Properties:</p> <ul> <li><code>expression</code> (String): Specifies the cron expression that defines the schedule for the job. In this example, the expression is set to \"0/10 * * * * ?\" to run the job every 10 seconds.</li> <li><code>group</code> (String): Indicates the group to which the job belongs. This helps organize and categorize jobs. In this example, the group is <code>defined</code>, while built-in jobs are marked as <code>internal</code>.</li> <li><code>handler</code> (String): Specifies the location or path of the script or module that serves as the job handler. The handler contains the logic to be executed when the job runs. In this example, it is <code>my-project/jobs/my-handler.js</code>.</li> <li><code>description</code> (String): Provides a description of the job, explaining its purpose or functionality. In this example, the description is \"My Job with Parameters\".</li> <li><code>parameters</code> (Array of Objects): Defines an array of parameters that can be passed to the job handler. Each parameter object contains properties such as type, name, defaultValue, choices, and description.</li> <li>Parameter Object Properties:<ul> <li><code>type</code> (String): Specifies the data type of the parameter, such as <code>string</code>, <code>number</code>, <code>boolean</code>, or <code>choice</code>.</li> <li><code>name</code> (String): Represents the name of the parameter.</li> <li><code>defaultValue</code> (String): Specifies the default value for the parameter.</li> <li><code>choices</code> (String): For choice-type parameters, specifies the available choices separated by commas.</li> <li><code>description</code> (String): Provides a description of the parameter.</li> </ul> </li> </ul>"},{"location":"platform/artefacts/job/#example-usage","title":"Example Usage:","text":"<p>The example <code>myjob.job</code> file defines a job that runs every 10 seconds, belongs to the <code>defined</code> group, and executes the logic in the script located at <code>my-project/jobs/my-handler.js</code>. The job accepts four parameters with different data types and default values.</p>"},{"location":"platform/artefacts/job/#getting-started","title":"Getting Started:","text":""},{"location":"platform/artefacts/job/#create-a-job-file","title":"Create a Job File:","text":"<p>Create a new <code>*.job</code> file or modify an existing one based on your specific job requirements.</p>"},{"location":"platform/artefacts/job/#configure-job-properties","title":"Configure Job Properties:","text":"<p>Adjust the properties within the file to match the details of your job. Update the expression, group, handler, description, and parameters accordingly.</p>"},{"location":"platform/artefacts/job/#implement-job-handler-logic","title":"Implement Job Handler Logic:","text":"<p>Create the associated module or script (e.g., <code>my-project/jobs/my-handler.js</code>) to provide the implementation logic for the job. This script should contain the functionality you want to execute when the job runs.</p>"},{"location":"platform/artefacts/job/#schedule-and-run-the-job","title":"Schedule and Run the Job:","text":"<p>The job will automatically run based on the specified cron expression. Monitor the logs or results to ensure the job is executing as expected.</p>"},{"location":"platform/artefacts/job/#best-practices","title":"Best Practices:","text":""},{"location":"platform/artefacts/job/#clear-naming-conventions","title":"Clear Naming Conventions:","text":"<p>Follow clear and consistent naming conventions for jobs and their associated handlers.</p>"},{"location":"platform/artefacts/job/#parameter-validation","title":"Parameter Validation:","text":"<p>Ensure that the parameters are appropriately validated within the job handler to handle different data types and values.</p>"},{"location":"platform/artefacts/job/#conclusion","title":"Conclusion:","text":"<p>The <code>*.job</code> files in the platform provide a powerful mechanism for automating recurring tasks within the platform. Customize jobs based on your specific requirements, and leverage parameters to make them versatile and configurable.</p>"},{"location":"platform/artefacts/js/","title":"JavaScript","text":"<p>File extensions: <code>*.js</code>, <code>*.mjs</code></p>"},{"location":"platform/artefacts/js/#overview","title":"Overview:","text":"<p>In the context of the codbex platform, JavaScript files (<code>*.js</code> and <code>*.mjs</code>) play a crucial role in defining the logic and behavior associated with various artifacts, such as jobs, listeners, websockets, and more. These files contain server-side scripts written in JavaScript, and they are executed within the  runtime environment.</p> <p>Here's an overview of their usage:</p>"},{"location":"platform/artefacts/js/#common-characteristics-and-usage","title":"Common Characteristics and Usage:","text":""},{"location":"platform/artefacts/js/#server-side-scripts-as-restful-services","title":"Server-Side Scripts as RESTful Services","text":"<p>One of the main use cases for JavaScript in the platform is to write server-side scripts that can be exposed as RESTful services. This allows developers to build custom web services that can be easily consumed by external clients, providing a flexible and extensible way to interact with the platform.</p> <p>Example:</p> <pre><code>import { response } from \"sdk/http\";\n\nresponse.println(\"Hello World!\");\n</code></pre> <p>Example for HTTP RESTful services framework:</p> <pre><code>import { rs } from \"sdk/http\";\n\nrs.service()\n    .resource(\"\")\n    .get(function (_ctx, _request, response) {\n        response.println(\"Hello there!\");\n    })\n    .execute();\n</code></pre> <p>Benefits:</p> <ul> <li>Custom Functionality: JavaScript allows developers to implement custom business logic, data processing, and data retrieval within the RESTful service. Integration Capabilities:</li> <li>RESTful services written in JavaScript can easily integrate with other platform artifacts, such as tables and views, providing a seamless development experience.</li> <li>Data Transformation: JavaScript scripts can perform data transformation and enrichment before sending responses to clients.</li> <li>Flexible Routing: Developers have the flexibility to define custom endpoints and route requests based on specific requirements.</li> </ul>"},{"location":"platform/artefacts/js/#job-handlers","title":"Job Handlers:","text":"<ul> <li>For jobs defined in <code>*.job</code> files, JavaScript files are used to define the job handler. This script contains the logic to be executed when the job runs.</li> </ul> <p>Example:</p> <pre><code>console.log(\"Executing custom logic for My Job\");\n</code></pre>"},{"location":"platform/artefacts/js/#listener-handlers","title":"Listener Handlers:","text":"<ul> <li>For listeners defined in <code>*.listener</code> files, JavaScript files are used to define the listener handler. This script contains logic to handle events triggered by the listener.</li> </ul> <p>Example:</p> <pre><code>exports.onMessage = function(message) {\n    console.log(message);\n}\n\nexports.onError = function(error) {\n    console.error(error);\n}\n</code></pre>"},{"location":"platform/artefacts/js/#best-practices","title":"Best Practices:","text":""},{"location":"platform/artefacts/js/#modularization","title":"Modularization:","text":"<p>Consider modularizing your JavaScript code for better maintainability and organization, especially when dealing with complex logic.</p>"},{"location":"platform/artefacts/js/#error-handling","title":"Error Handling:","text":"<p>Implement error handling within your JavaScript files to gracefully handle unexpected scenarios.</p>"},{"location":"platform/artefacts/js/#logging","title":"Logging:","text":"<p>Use logging statements (e.g., console.log) for debugging and monitoring the execution of your scripts.</p>"},{"location":"platform/artefacts/js/#reuse-code","title":"Reuse Code:","text":"<p>Encapsulate reusable logic in functions or modules to promote code reuse.</p>"},{"location":"platform/artefacts/js/#conclusion","title":"Conclusion:","text":"<p>JavaScript files in the platform provide a powerful mechanism to define custom server-side logic associated with various artifacts. They enable developers to extend and customize the behavior of the platform based on specific business requirements.</p>"},{"location":"platform/artefacts/listener/","title":"Listener","text":"<p>File extension: <code>*.listener</code></p>"},{"location":"platform/artefacts/listener/#overview","title":"Overview:","text":"<p>The <code>*.listener</code> files in the codbex platform are used to define listeners, which are event-driven components that respond to specific events or messages within the platform.</p> <p>Here's an explanation of the example <code>mylistener.listener</code> file and its properties:</p> <pre><code>{\n  \"location\": \"/my-project/listeners/mylistener.listener\",\n  \"name\": \"my-listener\",\n  \"kind\": \"Q\",\n  \"handler\": \"my-project/listeners/my-handler.js\",\n  \"description\": \"My Listener\",\n  \"createdBy\": \"admin\",\n  \"createdAt\": \"2022-07-06T2:53:01+0000\"\n}\n</code></pre> <p>Properties:</p> <ul> <li><code>location</code> (String): Specifies the location or path of the listener file within the project. In this example, it is located at <code>/my-project/listeners/mylistener.listener</code>.</li> <li><code>name</code> (String): Represents the unique name or identifier of the listener. It is used to reference and identify the listener within the system. In this example, it is named <code>my-listener</code>.</li> <li><code>kind</code> (String): Indicates the kind or type of listener. The values are <code>Q</code> for a message queue listener and <code>T</code> for a message topic listener. This property helps the system understand the type of events the listener is designed to handle.</li> <li><code>handler</code> (String): Specifies the location or path of the script or module that serves as the listener handler. The handler contains the logic to be executed when an event is received. In this example, it is <code>my-project/listeners/my-handler.js</code>.</li> <li><code>description</code> (String): Provides a description of the listener, explaining its purpose or functionality. In this example, the description is \"My Listener\".</li> <li><code>createdBy</code> (String): Indicates the entity or user who created the listener. In this example, it is marked as <code>admin</code>.</li> <li><code>createdAt</code> (String): Represents the timestamp when the listener was created. The timestamp follows the ISO 8601 format. In this example, it is \"2022-07-06T2:53:01+0000.\"</li> </ul>"},{"location":"platform/artefacts/listener/#example-usage","title":"Example Usage:","text":"<p>The example <code>mylistener.listener</code> file defines a listener named <code>my-listener</code> that is designed to handle message queue events (<code>kind</code>: <code>Q</code>). The logic for handling events is implemented in the script located at <code>my-project/listeners/test-handler.js</code>.</p>"},{"location":"platform/artefacts/listener/#getting-started","title":"Getting Started:","text":""},{"location":"platform/artefacts/listener/#create-a-listener-file","title":"Create a Listener File:","text":"<p>Create a new <code>*.listener</code> file or modify an existing one based on your specific listener requirements.</p>"},{"location":"platform/artefacts/listener/#configure-listener-properties","title":"Configure Listener Properties:","text":"<p>Adjust the properties within the file to match the details of your listener. Update the name, kind, handler, description, and other properties accordingly.</p>"},{"location":"platform/artefacts/listener/#implement-listener-handler-logic","title":"Implement Listener Handler Logic:","text":"<p>Create the associated module or script (e.g., <code>my-project/listeners/my-handler.js</code>) to provide the implementation logic for the listener. This script should contain the functionality you want to execute when an event is received.</p>"},{"location":"platform/artefacts/listener/#register-and-trigger-events","title":"Register and Trigger Events:","text":"<p>Register the listener within the platform, specifying the events or messages it should listen for. Trigger events or messages to test the listener's functionality.</p>"},{"location":"platform/artefacts/listener/#best-practices","title":"Best Practices:","text":""},{"location":"platform/artefacts/listener/#clear-naming-conventions","title":"Clear Naming Conventions:","text":"<p>Follow clear and consistent naming conventions for listeners and their associated handlers.</p>"},{"location":"platform/artefacts/listener/#documentation-and-comments","title":"Documentation and Comments:","text":"<p>Provide meaningful descriptions for listeners and document the purpose and usage of the associated handler. Additionally, add comments within the handler script to explain the implementation.</p>"},{"location":"platform/artefacts/listener/#conclusion","title":"Conclusion:","text":"<p>The <code>*.listener</code> files in the codbex platform enable you to create event-driven components that respond to specific events or messages within the platform. Customize listeners based on your specific requirements, and leverage handlers to define the logic executed when events occur.</p>"},{"location":"platform/artefacts/markdown/","title":"Markdown","text":"<p>File extensions: <code>*.markdown</code>, <code>*.md</code></p>"},{"location":"platform/artefacts/markdown/#overview","title":"Overview:","text":"<p>The codbex platform provides robust support for the Markdown wiki format, empowering users to seamlessly create, edit, and manage Markdown files directly within the platform. This support enhances collaborative development and documentation workflows, offering a flexible and familiar markup language for content creation.</p>"},{"location":"platform/artefacts/markdown/#key-features","title":"Key Features:","text":""},{"location":"platform/artefacts/markdown/#markdown-integration","title":"Markdown Integration:","text":"<ul> <li>The platform allows you to work with Markdown files (.md) directly in the Web IDE, providing a versatile and widely-used format for documentation and content creation.</li> </ul>"},{"location":"platform/artefacts/markdown/#editing-and-real-time-collaboration","title":"Editing and Real-Time Collaboration:","text":"<ul> <li>Utilize the integrated markdown editor in the Web IDE for collaborative editing of Markdown content. Multiple team members can work on the same document simultaneously.</li> </ul>"},{"location":"platform/artefacts/markdown/#preview-and-visualization","title":"Preview and Visualization:","text":"<ul> <li>Preview Markdown content within the Web IDE to see real-time rendering and ensure accurate representation of your Markdown files.</li> </ul>"},{"location":"platform/artefacts/markdown/#version-control","title":"Version Control:","text":"<ul> <li>Leverage the version control capabilities to track changes, commit versions, and collaborate on Markdown files efficiently.</li> </ul>"},{"location":"platform/artefacts/markdown/#getting-started","title":"Getting Started:","text":""},{"location":"platform/artefacts/markdown/#creating-markdown-files","title":"Creating Markdown Files:","text":"<ul> <li>Use the Web IDE to create new Markdown files or import existing ones into your project.</li> </ul>"},{"location":"platform/artefacts/markdown/#editing-markdown-content","title":"Editing Markdown Content:","text":"<ul> <li>Open Markdown files in the Web IDE to edit content using the integrated markdown editor.</li> </ul>"},{"location":"platform/artefacts/markdown/#real-time-collaboration","title":"Real-Time Collaboration:","text":"<ul> <li>Collaborate with team members on Markdown content in real-time by leveraging collaborative development features.</li> </ul>"},{"location":"platform/artefacts/markdown/#example","title":"Example","text":"<p>Below is an example of a simple Markdown file (example.md):</p> <pre><code># Welcome to Markdown wiki pages\n</code></pre> <p>This is an example Markdown file supported by the codbex platform.</p> <p>Features:</p> <ul> <li>Integrated markdown editor</li> <li>Real-time collaboration</li> <li>Version control for Markdown files</li> </ul>"},{"location":"platform/artefacts/markdown/#best-practices","title":"Best Practices","text":"<ul> <li> <p>Markdown Syntax Understanding:</p> <ul> <li>Familiarize yourself with Markdown syntax. Refer to the official Markdown documentation for a comprehensive guide.</li> </ul> </li> <li> <p>Regular Committing:</p> <ul> <li>Commit changes regularly using version control features to maintain a well-documented history of edits.</li> </ul> </li> <li> <p>Preview Rendering:</p> <ul> <li>Before publishing or updating Markdown content, preview the rendering within the Web IDE to catch any formatting issues.</li> </ul> </li> </ul>"},{"location":"platform/artefacts/markdown/#conclusion","title":"Conclusion:","text":"<p>The Markdown wiki format support provides a user-friendly and efficient environment for content creation and collaboration. Enhance your documentation workflows by leveraging the features of codbex platform for Markdown files.</p> <p>The Markdown artefacts are processed by the Wiki Engine.</p>"},{"location":"platform/artefacts/model/","title":"Application Model","text":"<p>File extension: <code>*.model</code></p>"},{"location":"platform/artefacts/model/#overview","title":"Overview","text":"<p>The Application Model file (*.model) is a JSON representation used by the Entity Data Modeler tool to define the domain model of applications. It contains metadata about entities, their properties, relationships, and other relevant information necessary for generating application artifacts.</p>"},{"location":"platform/artefacts/model/#purpose","title":"Purpose","text":"<p>The Application Model file serves as a blueprint for defining the structure and behavior of entities within the application domain. It enables developers to model domain-specific concepts, such as entities, attributes, and relationships, in a structured and standardized format.</p>"},{"location":"platform/artefacts/model/#example","title":"Example","text":"<p>Here's an example of an Application Model file:</p> <pre><code>{\n    \"model\": {\n        \"entities\": [\n            {\n                \"properties\": [\n                    {\n                        \"name\": \"Id\",\n                        \"dataType\": \"VARCHAR\",\n                        \"dataLength\": \"20\",\n                        \"dataPrimaryKey\": \"true\",\n                        \"widgetType\": \"TEXTBOX\"\n                    },\n                    {\n                        \"name\": \"Name\",\n                        \"dataType\": \"VARCHAR\",\n                        \"dataLength\": \"100\",\n                        \"widgetType\": \"TEXTBOX\"\n                    }\n                ],\n                \"caption\": \"Manage entity Dimension\",\n                \"dataName\": \"DIMENSION\",\n                ...\n            },\n            {\n                \"properties\": [\n                    {\n                        \"name\": \"Id\",\n                        \"dataType\": \"VARCHAR\",\n                        \"dataLength\": \"20\",\n                        \"dataPrimaryKey\": \"true\",\n                        \"widgetType\": \"TEXTBOX\"\n                    },\n                    {\n                        \"name\": \"Name\",\n                        \"dataType\": \"VARCHAR\",\n                        \"dataLength\": \"100\",\n                        \"widgetType\": \"TEXTBOX\"\n                    },\n                    ...\n                ],\n                \"caption\": \"Manage entity UoM\",\n                \"dataName\": \"UOM\",\n                ...\n            }\n        ],\n        \"perspectives\": [\n            {\n                \"name\": \"UnitsOfMeasures\",\n                \"label\": \"Units of Measures\",\n                \"icon\": \"/services/web/resources/unicons/arrows-resize-v.svg\",\n                \"order\": \"980\",\n                \"role\": {}\n            },\n            {\n                \"name\": \"Dimensions\",\n                \"label\": \"Dimensions\",\n                \"icon\": \"/services/web/resources/unicons/align-center-h.svg\",\n                \"order\": \"990\",\n                \"role\": {}\n            }\n        ],\n        \"navigations\": []\n    }\n}\n</code></pre> <p>In this example, the Application Model file defines two entities: \"Dimension\" and \"UoM\" (Unit of Measures), along with their properties and perspectives.</p>"},{"location":"platform/artefacts/model/#usage","title":"Usage","text":"<ul> <li> <p>Entity Modeling: Developers use the Entity Domain Model file to define entity structures, properties, and relationships using a structured JSON format.</p> </li> <li> <p>Domain Abstraction: The Entity Domain Model file abstracts domain-specific concepts into a machine-readable format, facilitating communication and understanding between stakeholders.</p> </li> <li> <p>Code Generation: The metadata defined in the Entity Domain Model file can be used by code generation tools to automatically generate application artifacts, such as database tables, entity classes, REST APIs, and user interfaces.</p> </li> </ul>"},{"location":"platform/artefacts/model/#conclusion","title":"Conclusion","text":"<p>The Application Model file (*.model) is a JSON representation used to define the domain model of applications. It provides a structured way to model entities, properties, and relationships, enabling developers to design robust and maintainable applications.</p> <p>For detailed usage instructions and best practices, refer to the documentation of the Entity Data Modeler tool or consult with your project's architecture experts.</p>"},{"location":"platform/artefacts/odata/","title":"OData","text":"<p>File extension: <code>*.odata</code></p>"},{"location":"platform/artefacts/odata/#overview","title":"Overview","text":"<p>The OData Artefact (<code>*.odata</code>) is a configuration file used to define OData (Open Data Protocol) entities and their properties within a specific namespace. It contains metadata about entities, their properties, annotations, and associations, following the OData standards.</p>"},{"location":"platform/artefacts/odata/#purpose","title":"Purpose","text":"<p>The OData Artefact serves as a blueprint for defining OData entities and their characteristics, such as properties, keys, and annotations. It enables developers to expose data models as OData services, allowing clients to interact with the data through standardized RESTful APIs.</p>"},{"location":"platform/artefacts/odata/#example","title":"Example","text":"<p>Here's an example of an OData Artefact configuration:</p> <pre><code>{\n    \"namespace\": \"org.apache.olingo.odata2.ODataCustomer\",\n    \"entities\": [\n        {\n            \"name\": \"Customer\",\n            \"alias\": \"Customer\",\n            \"table\": \"CUSTOMER\",\n            \"properties\": [\n                {\n                    \"name\": \"ID\",\n                    \"column\": \"ID\",\n                    \"nullable\": false,\n                    \"type\": \"Edm.Int32\",\n                    \"annotationsProperty\": {}\n                },\n                {\n                    \"name\": \"NUMBER\",\n                    \"column\": \"NUMBER\",\n                    \"nullable\": true,\n                    \"type\": \"Edm.Int32\",\n                    \"annotationsProperty\": {}\n                },\n                {\n                    \"name\": \"PAYMENT\",\n                    \"column\": \"PAYMENT\",\n                    \"nullable\": true,\n                    \"type\": \"Edm.Int32\",\n                    \"annotationsProperty\": {}\n                }\n            ],\n            \"navigations\": [],\n            \"handlers\": [],\n            \"keys\": [],\n            \"annotationsEntitySet\": {},\n            \"annotationsEntityType\": {\n                \"sap:semantics\": \"aggregate\"\n            },\n            \"aggregationsTypeAndColumn\": {\n                \"NUMBER\": \"SUM\",\n                \"PAYMENT\": \"AVERAGE\"\n            }\n        }\n    ],\n    \"associations\": []\n}\n</code></pre> <p>In this example, the OData Artefact defines an OData entity named \"Customer\" with properties such as \"ID\", \"NUMBER\", and \"PAYMENT\". It also includes annotations and aggregations for the entity.</p>"},{"location":"platform/artefacts/odata/#usage","title":"Usage","text":"<ul> <li> <p>OData Service Configuration: Developers use the OData Artefact to configure OData services by defining entities, properties, and annotations according to the OData specifications.</p> </li> <li> <p>Data Modeling: The OData Artefact facilitates data modeling by providing a structured format for defining entities and their characteristics, allowing developers to represent complex data models as OData resources.</p> </li> <li> <p>Service Consumption: OData services generated from the OData Artefact can be consumed by various client applications, enabling seamless data integration and interoperability across different systems and platforms.</p> </li> </ul>"},{"location":"platform/artefacts/odata/#conclusion","title":"Conclusion","text":"<p>The OData Artefact (<code>*.odata</code>) is a configuration file used to define OData entities and their properties within a specific namespace. It plays a crucial role in configuring OData services and facilitating data modeling for standardized RESTful APIs.</p> <p>For detailed usage instructions and best practices, refer to the documentation of your OData service provider or consult with your project's architecture experts.</p>"},{"location":"platform/artefacts/openapi/","title":"OpenAPI","text":"<p>File extension: <code>*.openapi</code></p>"},{"location":"platform/artefacts/openapi/#overview","title":"Overview","text":"<p>In the codbex platform, the <code>*.openapi</code> artifact is used to define an OpenAPI-compliant specification for a given RESTful service. This specification contributes to the global Swagger descriptor for the server instance, providing a standardized way to document and describe the RESTful APIs exposed by the codbex application.</p> <p>Here's an overview of its usage:</p>"},{"location":"platform/artefacts/openapi/#openapi-specification","title":"OpenAPI Specification:","text":"<p>The OpenAPI Specification (OAS), formerly known as Swagger Specification, is a standardized format to describe and document RESTful APIs. The <code>*.openapi</code> artifact in the platform allows developers to provide an OpenAPI-compliant specification for a specific RESTful service.</p>"},{"location":"platform/artefacts/openapi/#global-swagger-descriptor","title":"Global Swagger Descriptor:","text":"<p>The OpenAPI specification contributed by the <code>*.openapi</code> artifact becomes part of the global Swagger descriptor for the server instance. The global Swagger descriptor aggregates the OpenAPI specifications of all RESTful services, providing a centralized and comprehensive API documentation.</p> <p>Example:</p> <pre><code>// products.openapi\n{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n        \"version\": \"1.0.0\",\n        \"title\": \"Products API\",\n        \"description\": \"RESTful API for managing products\"\n    },\n    \"paths\": {\n        \"/products\": {\n            \"get\": {\n                \"summary\": \"Get the list of products\",\n                \"operationId\": \"getProducts\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"example\": {\n                                    \"productId\": 1,\n                                    \"productName\": \"Example Product\",\n                                    \"price\": 19.99\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Properties:</p> <ul> <li><code>openapi</code> (String): Specifies the version of the OpenAPI Specification. In this example, it is set to <code>3.0.0</code>.</li> <li><code>info</code> (Object): Contains metadata information about the API.<ul> <li><code>version</code> (String): Specifies the version of the API.</li> <li><code>title</code> (String): Provides a title for the API.</li> <li><code>description</code> (String): Offers a description of the API.</li> </ul> </li> <li><code>paths</code> (Object): Defines the available paths and operations within the API.</li> <li>Path Definition:<ul> <li>Operation (e.g., get): Specifies the HTTP method for the operation, and the associated details, such as summary, operationId, and responses.</li> </ul> </li> <li><code>operationId</code> (String): Represents a unique identifier for the operation. It is commonly used to generate client SDKs.</li> <li><code>responses</code> (Object): Describes the possible responses for the operation.<ul> <li><code>200</code> (Object): Represents a successful response with the associated description and content.</li> <li><code>content</code> (Object): Defines the content type and an example of the response payload.</li> </ul> </li> </ul>"},{"location":"platform/artefacts/openapi/#benefits","title":"Benefits:","text":""},{"location":"platform/artefacts/openapi/#standardized-documentation","title":"Standardized Documentation:","text":"<p>OpenAPI specifications provide a standardized way to document RESTful APIs, making it easier for developers and consumers to understand and interact with the APIs.</p>"},{"location":"platform/artefacts/openapi/#centralized-swagger-descriptor","title":"Centralized Swagger Descriptor:","text":"<p>The OpenAPI specifications contributed by various *.openapi artifacts are centralized in the global Swagger descriptor, providing a comprehensive view of all APIs exposed by the server instance.</p>"},{"location":"platform/artefacts/openapi/#api-versioning-and-metadata","title":"API Versioning and Metadata:","text":"<p>OpenAPI specifications include metadata such as API version, title, and description, helping in versioning and providing essential information about the API.</p>"},{"location":"platform/artefacts/openapi/#getting-started","title":"Getting Started:","text":""},{"location":"platform/artefacts/openapi/#create-an-openapi-file","title":"Create an <code>*.openapi</code> File:","text":"<p>Create a new *.openapi file or modify an existing one based on your specific RESTful service.</p>"},{"location":"platform/artefacts/openapi/#define-openapi-specification","title":"Define OpenAPI Specification:","text":"<p>Use the OpenAPI Specification (OAS) to define details such as the API version, title, description, paths, and operations.</p>"},{"location":"platform/artefacts/openapi/#reference-in-restful-service-configuration","title":"Reference in RESTful Service Configuration:","text":"<p>Reference the <code>*.openapi</code> file in the configuration of the corresponding RESTful service (e.g., *.js file).</p>"},{"location":"platform/artefacts/openapi/#deploy-and-access-swagger-ui","title":"Deploy and Access Swagger UI:","text":"<p>Deploy your codbex application and access the Swagger UI endpoint (<code>/api-docs</code>) to view the centralized Swagger documentation, including your API.</p>"},{"location":"platform/artefacts/openapi/#conclusion","title":"Conclusion:","text":"<p>The <code>*.openapi</code> artifact in the codbex platform allows developers to provide OpenAPI-compliant specifications for their RESTful services, contributing to the global Swagger descriptor. This standardized documentation enhances API discoverability and fosters a consistent and well-documented API development process.</p>"},{"location":"platform/artefacts/python/","title":"Python","text":"<p>File extension: <code>*.py</code></p>"},{"location":"platform/artefacts/role/","title":"Role","text":"<p>File extension: <code>*.role</code></p>"},{"location":"platform/artefacts/role/#overview","title":"Overview","text":"<p>The Role Artefact (<code>*.role</code>) is a configuration file used to define roles within a system or application. It contains metadata about roles, including their names, descriptions, and any associated permissions or privileges.</p>"},{"location":"platform/artefacts/role/#purpose","title":"Purpose","text":"<p>The Role Artefact serves as a central repository for managing and defining roles within an application or system. It provides a structured format for organizing roles and their associated attributes, allowing administrators and developers to easily configure and maintain role-based access control (RBAC) policies.</p>"},{"location":"platform/artefacts/role/#example","title":"Example","text":"<p>Here's an example of a Role Artefact configuration:</p> <pre><code>[\n    {\n        \"name\": \"myrole1\",\n        \"description\": \"Role1 Description\"\n    },\n    {\n        \"name\": \"myrole2\",\n        \"description\": \"Role2 Description\"\n    }\n]\n</code></pre> <p>In this example, the Role Artefact defines two roles: \"myrole1\" and \"myrole2\", each with a corresponding description.</p>"},{"location":"platform/artefacts/role/#usage","title":"Usage","text":"<ul> <li> <p>Access Control: The Role Artefact is used to define roles that control access to various features, functionalities, or resources within an application. By assigning users to specific roles, administrators can enforce security policies and restrict unauthorized access.</p> </li> <li> <p>Authorization: Roles defined in the Role Artefact can be used to determine the level of authorization granted to users. Depending on their assigned roles, users may have different permissions or privileges, such as read, write, execute, or administrative rights.</p> </li> <li> <p>Role Management: The Role Artefact provides a centralized mechanism for managing roles, allowing administrators to add, modify, or remove roles as needed. Changes made to the Role Artefact are reflected in the application's access control policies, ensuring consistency and security.</p> </li> </ul>"},{"location":"platform/artefacts/role/#conclusion","title":"Conclusion","text":"<p>The Role Artefact (<code>*.role</code>) is a configuration file used to define roles within a system or application. It plays a crucial role in access control and authorization, enabling administrators to define and manage role-based security policies effectively.</p>"},{"location":"platform/artefacts/schema/","title":"Schema","text":"<p>File extension: <code>*.schema</code></p>"},{"location":"platform/artefacts/schema/#overview","title":"Overview:","text":"<p>The <code>*.schema</code> files in the codbex platform are used to define and manage database schemas, including tables, foreign keys, views, and more. A schema can contain various structures that define the organization of data within a database.</p> <p>Here's an explanation of the example <code>example.schema</code> file and its properties:</p> <pre><code>{\n    \"schema\": {\n        \"structures\": [\n            {\n                \"name\": \"TABLE1\",\n                \"type\": \"TABLE\",\n                \"columns\": [\n                    {\n                        \"name\": \"TABLE1_ID\",\n                        \"type\": \"INTEGER\",\n                        \"length\": \"0\",\n                        \"primaryKey\": \"true\",\n                        \"identity\": \"true\",\n                        \"precision\": \"\",\n                        \"scale\": \"\"\n                    },\n                    {\n                        \"name\": \"TABLE2_ID\",\n                        \"type\": \"INTEGER\",\n                        \"length\": \"0\",\n                        \"precision\": \"\",\n                        \"scale\": \"\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"TABLE2\",\n                \"type\": \"TABLE\",\n                \"columns\": [\n                    {\n                        \"name\": \"TABLE2_ID\",\n                        \"type\": \"INTEGER\",\n                        \"length\": \"0\",\n                        \"primaryKey\": \"true\",\n                        \"identity\": \"true\",\n                        \"precision\": \"\",\n                        \"scale\": \"\"\n                    }\n                ]\n            }\n            {\n                \"name\": \"VIEW3\",\n                \"type\": \"VIEW\",\n                \"query\": \"SELECT * FROM TABLE1\",\n            }\n        ]\n    },\n    \"datasource\": \"DefaultDB\"\n}\n</code></pre> <p>Properties:</p> <ul> <li><code>schema</code> (Object): Contains the definition of the database schema.</li> <li><code>structures</code> (Array of Objects): Defines an array of structures within the schema, including tables, foreign keys, and views.</li> <li>Table Structure:<ul> <li><code>name</code> (String): Specifies the name of the table.</li> <li><code>type</code> (String): Indicates the type of structure, and for tables, it is set to <code>TABLE</code>.</li> <li><code>columns</code> (Array of Objects): Defines an array of column objects specifying the properties of each table column.</li> </ul> </li> <li>View Structure:<ul> <li><code>name</code> (String): Specifies the name of the view.</li> <li><code>type</code> (String): Indicates the type of structure, and for views, it is set to <code>VIEW</code></li> <li><code>query</code> (String): Contains the SQL query that defines the view.</li> </ul> </li> <li><code>datasource</code> (String): Specifies the name of the datasource associated with the schema. In this example, it is <code>DefaultDB</code>.</li> </ul>"},{"location":"platform/artefacts/schema/#example-usage","title":"Example Usage:","text":"<p>The example <code>example.schema</code> file defines a schema with three structures:</p> <ul> <li>Table <code>TABLE1</code></li> <li>Table <code>TABLE2</code></li> <li>View <code>VIEW3</code></li> </ul>"},{"location":"platform/artefacts/schema/#getting-started","title":"Getting Started:","text":""},{"location":"platform/artefacts/schema/#create-a-schema-file","title":"Create a Schema File:","text":"<p>Create a new <code>*.schema</code> file or modify an existing one based on your specific schema requirements.</p>"},{"location":"platform/artefacts/schema/#define-structures","title":"Define Structures:","text":"<p>Add structures within the structures array, specifying tables, foreign keys, and views.</p>"},{"location":"platform/artefacts/schema/#configure-columns-and-relationships","title":"Configure Columns and Relationships:","text":"<p>For tables and foreign keys, define columns and relationships as needed.</p>"},{"location":"platform/artefacts/schema/#specify-datasource","title":"Specify Datasource:","text":"<p>Specify the name of the datasource within the datasource property.</p>"},{"location":"platform/artefacts/schema/#apply-schema","title":"Apply Schema:","text":"<p>Use the schema to create or update the database structure based on your defined configurations.</p>"},{"location":"platform/artefacts/schema/#best-practices","title":"Best Practices:","text":""},{"location":"platform/artefacts/schema/#clear-naming-conventions","title":"Clear Naming Conventions:","text":"<p>Follow clear and consistent naming conventions for tables, foreign keys, views, and columns.</p>"},{"location":"platform/artefacts/schema/#relationship-integrity","title":"Relationship Integrity:","text":"<p>Ensure that foreign keys are correctly configured to maintain relationship integrity.</p>"},{"location":"platform/artefacts/schema/#optimize-views","title":"Optimize Views:","text":"<p>Optimize view queries to retrieve only the necessary columns for performance.</p>"},{"location":"platform/artefacts/schema/#conclusion","title":"Conclusion:","text":"<p>The <code>*.schema</code> files in the platform provide a structured way to define and manage database schemas, making it easier to organize and maintain database structures.</p>"},{"location":"platform/artefacts/table/","title":"Table","text":"<p>File extension: <code>*.table</code></p>"},{"location":"platform/artefacts/table/#overview","title":"Overview:","text":"<p>The <code>*.table</code> files in the codbex platform are used to define and manage database tables. They provide a structured way to specify table properties, columns, and constraints.</p> <p>Here's an explanation of the example <code>PERSONS.table</code> file and its properties:</p> <pre><code>{\n    \"name\": \"PERSONS\",\n    \"type\": \"TABLE\",\n    \"columns\": [\n        {\n            \"name\": \"PERSON_FIRST_NAME\",\n            \"type\": \"VARCHAR\",\n            \"length\": \"50\",\n            \"nullable\": \"false\",\n            \"primaryKey\": \"false\",\n            \"defaultValue\": \"\"\n        },\n        {\n            \"name\": \"PERSON_LAST_NAME\",\n            \"type\": \"VARCHAR\",\n            \"length\": \"50\",\n            \"nullable\": \"false\",\n            \"primaryKey\": \"false\",\n            \"defaultValue\": \"\"\n        },\n        {\n            \"name\": \"PERSON_ADDRESS_ID\",\n            \"type\": \"INTEGER\",\n            \"length\": \"0\",\n            \"nullable\": \"false\",\n            \"primaryKey\": \"false\",\n            \"defaultValue\": \"\"\n        },\n        {\n            \"name\": \"PERSON_SOCIAL_NUMBER\",\n            \"type\": \"REAL\",\n            \"length\": \"50\",\n            \"nullable\": \"true\",\n            \"primaryKey\": \"false\",\n            \"defaultValue\": \"\",\n            \"precision\": \"5\",\n            \"scale\": \"2\"\n        },\n        {\n            \"name\": \"PERSON_YEAR_OF_BIRTH\",\n            \"type\": \"INTEGER\",\n            \"length\": \"0\",\n            \"nullable\": \"true\",\n            \"primaryKey\": \"false\"\n        }\n    ],\n    \"constraints\": {\n        \"name\": \"PERSONS_CONSTRAINTS\",\n        \"primaryKey\": {\n            \"name\": \"PERSONS_PK\",\n            \"columns\": [\"PERSON_FIRST_NAME\", \"PERSON_LAST_NAME\"]\n        },\n        \"foreignKeys\": [\n            {\n                \"name\": \"PERSONS_FK\",\n                \"columns\": [\"PERSON_ADDRESS_ID\"],\n                \"referencedTable\": \"ADDRESSES\",\n                \"referencedColumns\": [\"ADDRESS_ID\"]\n            }\n        ],\n        \"uniqueIndices\": [\n            {\n                \"name\": \"PERSONS_UI\",\n                \"columns\": [\"PERSON_SOCIAL_NUMBER\"]\n            }\n        ],\n        \"checks\": [\n            {\n                \"name\": \"PERSONS_CK\",\n                \"expression\": \"PERSON_YEAR_OF_BIRTH &gt; 2000\"\n            }\n        ]\n    }\n}\n</code></pre> <p>Properties:</p> <ul> <li><code>name</code> (String): Specifies the name of the table. In this example, it is named <code>PERSONS</code>.</li> <li><code>type</code> (String): Indicates the type of the artifact, and for tables, it is set to <code>TABLE</code>.</li> <li><code>columns</code> (Array of Objects): Defines an array of column objects, each specifying the properties of a table column.</li> <li>Column Object Properties:<ul> <li><code>name</code> (String): Represents the name of the column.</li> <li><code>type</code> (String): Specifies the data type of the column, such as <code>VARCHAR</code>, <code>INTEGER</code>, or <code>REAL</code>.</li> <li><code>length</code> (String): Specifies the length or size of the column.</li> <li><code>nullable</code> (String): Indicates whether the column allows <code>null</code> values (<code>true</code> or <code>false</code>).</li> <li><code>primaryKey</code> (String): Specifies whether the column is part of the primary key (<code>true</code> or <code>false</code>).</li> <li><code>defaultValue</code> (String): Specifies the default value for the column.</li> <li><code>precision</code> and <code>scale</code> (Strings): Applicable for numeric types, specifying the precision and scale of the column.</li> </ul> </li> <li><code>constraints</code> (Object): Defines an object containing various constraints for the table.</li> <li>Constraints Object Properties:<ul> <li><code>name</code> (String): Specifies the name of the constraints object.</li> <li><code>primaryKey</code> (Object): Specifies the primary key constraint, including the name and columns.</li> <li><code>foreignKeys</code> (Array of Objects): Defines an array of foreign key constraints, specifying the name, columns, referenced table, and referenced columns.</li> <li><code>uniqueIndices</code> (Array of Objects): Defines an array of unique index constraints, specifying the name and columns.</li> <li><code>checks</code> (Array of Objects): Defines an array of check constraints, specifying the name and expression.</li> </ul> </li> </ul>"},{"location":"platform/artefacts/table/#example-usage","title":"Example Usage:","text":"<p>The example <code>PERSONS.table</code> file defines a table named <code>PERSONS</code> with multiple columns of various data types. It includes constraints such as a primary key, foreign key, unique index, and check constraint.</p>"},{"location":"platform/artefacts/table/#getting-started","title":"Getting Started:","text":""},{"location":"platform/artefacts/table/#create-a-table-file","title":"Create a Table File:","text":"<p>Create a new <code>*.table</code> file or modify an existing one based on your specific table requirements.</p>"},{"location":"platform/artefacts/table/#define-columns","title":"Define Columns:","text":"<p>Add column objects within the columns array, specifying the properties of each table column.</p>"},{"location":"platform/artefacts/table/#configure-constraints","title":"Configure Constraints:","text":"<p>Define constraints within the constraints object, such as primary keys, foreign keys, unique indices, and checks.</p>"},{"location":"platform/artefacts/table/#use-the-table","title":"Use the Table:","text":"<p>Once defined, the table can be used within your database schema to store and retrieve data.</p>"},{"location":"platform/artefacts/table/#best-practices","title":"Best Practices:","text":""},{"location":"platform/artefacts/table/#clear-naming-conventions","title":"Clear Naming Conventions:","text":"<p>Follow clear and consistent naming conventions for tables, columns, and constraints.</p>"},{"location":"platform/artefacts/table/#column-data-types","title":"Column Data Types:","text":"<p>Choose appropriate data types for columns based on the nature of the data they will store.</p>"},{"location":"platform/artefacts/table/#constraint-validation","title":"Constraint Validation:","text":"<p>Ensure that constraints are appropriate for maintaining data integrity and consistency.</p>"},{"location":"platform/artefacts/table/#conclusion","title":"Conclusion:","text":"<p>The <code>*.table</code> files in the platform provide a structured way to define and manage database tables, allowing for the creation of robust and well-defined database schemas.</p>"},{"location":"platform/artefacts/template/","title":"Template Configuration","text":"<p>File: <code>template.js</code></p>"},{"location":"platform/artefacts/template/#overview","title":"Overview","text":"<p>The Template Configuration Artefact is a JavaScript file used to define templates for generating code or files in a structured and configurable manner. It contains functions that return template configurations, including metadata about the templates, their sources, parameters, and ordering.</p>"},{"location":"platform/artefacts/template/#purpose","title":"Purpose","text":"<p>The Template Configuration Artefact serves as a mechanism for defining reusable templates that can be used to generate code or files dynamically. It allows developers to encapsulate common patterns or structures into templates, making it easier to create consistent and maintainable codebases.</p>"},{"location":"platform/artefacts/template/#example","title":"Example","text":"<p>Here's an example of a Template Configuration Artefact in JavaScript:</p> <pre><code>exports.getTemplate = function() {\n    return {\n        \"name\": \"Database Table (Model)\",\n        \"description\": \"Database Table Template\",\n        \"sources\": [{\n            \"location\": \"/template-database-table/database.table.template\", \n            \"action\": \"generate\",\n            \"rename\": \"{{fileName}}.table\"\n        }],\n        \"parameters\": [{\n            \"name\": \"tableName\",\n            \"label\": \"Table Name\"\n        }],\n        \"order\": 40\n    };\n};\n</code></pre> <p>In this example, the getTemplate function returns a template configuration object with metadata such as the template name, description, sources, parameters, and order.</p>"},{"location":"platform/artefacts/template/#usage","title":"Usage","text":"<ul> <li> <p>Code Generation: The Template Configuration Artefact is used to define templates for generating code or files based on predefined patterns or structures. Developers can specify the template's sources, parameters, and other configurations to tailor the generated output according to their needs.</p> </li> <li> <p>Customization: Templates defined in the Template Configuration Artefact can be customized or extended to accommodate specific requirements or use cases. Developers can modify the template configurations to adjust the generated code or files to suit different scenarios.</p> </li> <li> <p>Automation: By using the Template Configuration Artefact, developers can automate repetitive tasks or code generation processes. Templates can be integrated into build pipelines or development workflows to streamline development and improve productivity.</p> </li> </ul>"},{"location":"platform/artefacts/template/#conclusion","title":"Conclusion","text":"<p>The Template Configuration Artefact is a JavaScript file used to define templates for generating code or files. It provides a flexible and configurable approach to code generation, allowing developers to create reusable templates and automate repetitive tasks effectively.</p> <p>For detailed instructions on creating and using templates, refer to the documentation of your development environment or template engine. Additionally, explore the available template configurations and experiment with different templates to understand their capabilities fully.</p>"},{"location":"platform/artefacts/template/#references","title":"References:","text":"<ul> <li>Template Engine</li> </ul>"},{"location":"platform/artefacts/ts/","title":"TypeScript","text":"<p>File extension: <code>*.ts</code></p>"},{"location":"platform/artefacts/ts/#overview","title":"Overview","text":"<p>TypeScript (<code>*.ts</code>) files and the <code>tsconfig.json</code> configuration file are essential components in TypeScript-based development projects. TypeScript is a superset of JavaScript that adds static typing and other advanced features to the language, enabling developers to build more scalable and maintainable applications.</p>"},{"location":"platform/artefacts/ts/#typescript-files-ts","title":"TypeScript Files (*.ts)","text":"<p>TypeScript files (<code>*.ts</code>) contain TypeScript code, which is similar to JavaScript but includes additional type annotations and language features. These files typically have the \".ts\" extension and can be compiled into JavaScript code using the TypeScript compiler (\"tsc\").</p>"},{"location":"platform/artefacts/ts/#purpose","title":"Purpose","text":"<ol> <li> <p>Static Typing: TypeScript allows developers to specify types for variables, function parameters, and return values, providing better type safety and tooling support during development.</p> </li> <li> <p>Enhanced Developer Experience: TypeScript offers features such as code navigation, refactoring, and code completion in modern Integrated Development Environments (IDEs), improving developer productivity and code quality.</p> </li> <li> <p>Compatibility with JavaScript Ecosystem: TypeScript code can seamlessly integrate with existing JavaScript libraries and frameworks, enabling developers to leverage the rich ecosystem of JavaScript tools and resources.</p> </li> </ol>"},{"location":"platform/artefacts/ts/#tsconfigjson-configuration","title":"tsconfig.json Configuration","text":"<p>The \"tsconfig.json\" file is a configuration file used to specify compiler options and project settings for the TypeScript compiler (\"tsc\"). It allows developers to define how TypeScript files should be compiled and configured within a project.</p>"},{"location":"platform/artefacts/ts/#purpose_1","title":"Purpose","text":"<ol> <li> <p>Compiler Options: The \"tsconfig.json\" file includes various compiler options that control TypeScript compilation behavior, such as target ECMAScript version, module system, output directory, and source map generation.</p> </li> <li> <p>Project Configuration: TypeScript projects may consist of multiple files and directories. The \"tsconfig.json\" file allows developers to define project-specific settings, such as file inclusion/exclusion patterns, project references, and custom type definitions.</p> </li> <li> <p>Consistency and Maintainability: By centralizing project configuration in a single \"tsconfig.json\" file, developers can ensure consistency across their codebase and easily manage project settings without duplicating configuration in multiple locations.</p> </li> </ol>"},{"location":"platform/artefacts/ts/#example-tsconfigjson","title":"Example tsconfig.json","text":"<pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"dist\",\n    \"strict\": true\n  },\n  \"include\": [\"src/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n</code></pre> <p>In this example, the \"tsconfig.json\" file specifies compiler options such as the target ECMAScript version (\"es5\"), module system (\"commonjs\"), output directory (\"dist\"), and strict type checking. It also includes and excludes TypeScript files based on specific directory patterns.</p>"},{"location":"platform/artefacts/ts/#conclusion","title":"Conclusion","text":"<p>TypeScript (<code>*.ts</code>) files and the \"tsconfig.json\" configuration file play crucial roles in TypeScript development projects. They enable developers to write type-safe and maintainable code, customize compilation behavior, and configure project settings effectively.</p> <p>For detailed information about TypeScript syntax, compiler options, and project configuration, refer to the official TypeScript documentation and guides.</p>"},{"location":"platform/artefacts/ts/#references","title":"References:","text":"<ul> <li>SDK</li> </ul>"},{"location":"platform/artefacts/view/","title":"View","text":"<p>File extension: <code>*.view</code></p>"},{"location":"platform/artefacts/view/#overview","title":"Overview:","text":"<p>The *.view files in the codbex platform are used to define and manage database views. Views are virtual tables that represent the result of a stored query. </p> <p>Here's an explanation of the example <code>PERSONS_VIEW.view</code> file and its properties:</p> <pre><code>{\n    \"name\": \"PERSONS_VIEW\",\n    \"type\": \"VIEW\",\n    \"query\": \"SELECT * FROM PERSONS\",\n    \"dependencies\": [\n        \"table:/my-project/tables/PERSONS.table:PERSONS\"\n    ]\n}\n</code></pre> <p>Properties:</p> <ul> <li><code>name</code> (String): Specifies the name of the view. In this example, it is named <code>PERSONS_VIEW</code>.</li> <li><code>type</code> (String): Indicates the type of the artifact, and for views, it is set to <code>VIEW</code>.</li> <li><code>query</code> (String): Contains the SQL query that defines the view. In this example, it is <code>SELECT * FROM PERSONS</code>, which retrieves all columns from the <code>PERSONS</code> table.</li> <li><code>dependencies</code> (Array of Strings): Lists the dependencies of the view. Each dependency is specified in the format <code>artifactType:artifactLocation:artifactName</code>. In this example, the view depends on the \"PERSONS\" table.</li> </ul>"},{"location":"platform/artefacts/view/#example-usage","title":"Example Usage:","text":"<p>The example <code>PERSONS_VIEW.view</code> file defines a view named <code>PERSONS_VIEW</code> that represents the result of the SQL query <code>SELECT * FROM PERSONS</code>. It depends on the <code>PERSONS</code> table.</p>"},{"location":"platform/artefacts/view/#getting-started","title":"Getting Started:","text":""},{"location":"platform/artefacts/view/#create-a-view-file","title":"Create a View File:","text":"<p>Create a new <code>*.view</code> file or modify an existing one based on your specific view requirements.</p>"},{"location":"platform/artefacts/view/#define-query","title":"Define Query:","text":"<p>Specify the SQL query within the query property to define the content of the view.</p>"},{"location":"platform/artefacts/view/#set-dependencies","title":"Set Dependencies:","text":"<p>Specify any tables or artifacts on which the view depends within the dependencies array. This ensures that the necessary data is available for the view.</p>"},{"location":"platform/artefacts/view/#use-the-view","title":"Use the View:","text":"<p>Once defined, the view can be used in queries and applications as if it were a table, providing a virtual representation of the underlying data.</p>"},{"location":"platform/artefacts/view/#best-practices","title":"Best Practices:","text":""},{"location":"platform/artefacts/view/#clear-naming-conventions","title":"Clear Naming Conventions:","text":"<p>Follow clear and consistent naming conventions for views to ensure easy identification and reference.</p>"},{"location":"platform/artefacts/view/#optimize-query","title":"Optimize Query:","text":"<p>Optimize the SQL query within the query property to retrieve only the necessary columns and rows for efficient performance.</p>"},{"location":"platform/artefacts/view/#conclusion","title":"Conclusion:","text":"<p>The <code>*.view</code> files in the platform provide a convenient way to define virtual tables based on SQL queries. Views can be used to simplify complex queries, encapsulate logic, and provide a structured way to access and present data.</p>"},{"location":"platform/artefacts/websocket/","title":"WebSocket","text":"<p>File extension: <code>*.websocket</code></p>"},{"location":"platform/artefacts/websocket/#overview","title":"Overview:","text":"<p>The <code>*.websocket</code> files in the codbex platform are used to define and configure WebSocket endpoints. WebSocket is a communication protocol that provides full-duplex communication channels over a single, long-lived connection.</p> <p>Here's an explanation of the example <code>myws.websocket</code> file and its properties:</p> <pre><code>{\n  \"location\": \"/my-project/websockets/myws.websocket\",\n  \"handler\": \"my-project/websockets/my-handler.js\",\n  \"endpoint\": \"my-websocket\",\n  \"description\": \"My Websocket\",\n  \"createdBy\": \"admin\",\n  \"createdAt\": \"2022-07-06T2:24:12+0000\"\n}\n</code></pre> <p>Properties:</p> <ul> <li><code>location</code> (String): Specifies the location or path of the WebSocket file within the project. In this example, it is located at <code>/my-project/websockets/myws.websocket</code>.</li> <li><code>handler</code> (String): Specifies the location or path of the script or module that serves as the WebSocket handler. The handler contains the logic to be executed when WebSocket events occur. In this example, it is <code>my-project/websockets/my-handler.js</code>.</li> <li><code>endpoint</code> (String): Represents the endpoint or URI path for the WebSocket connection. Clients connect to this endpoint to establish a WebSocket connection. In this example, it is <code>my-websocket</code>.</li> <li><code>description</code> (String): Provides a description of the WebSocket, explaining its purpose or functionality. In this example, the description is <code>My WebSocket</code>.</li> <li><code>createdBy</code> (String): Indicates the entity or user who created the WebSocket configuration. In this example, it is marked as <code>admin</code>.</li> <li><code>createdAt</code> (String): Represents the timestamp when the WebSocket configuration was created. The timestamp follows the ISO 8601 format. In this example, it is \"2022-07-06T2:24:12+0000.\"</li> </ul>"},{"location":"platform/artefacts/websocket/#example-usage","title":"Example Usage:","text":"<p>The example <code>myws.websocket</code> file defines a WebSocket configuration for an endpoint at <code>my-websocket</code>. The WebSocket handler script is located at <code>my-project/websockets/my-handler.js</code>.</p>"},{"location":"platform/artefacts/websocket/#getting-started","title":"Getting Started:","text":""},{"location":"platform/artefacts/websocket/#create-a-websocket-file","title":"Create a WebSocket File:","text":"<p>Create a new <code>*.websocket</code> file or modify an existing one based on your specific WebSocket requirements.</p>"},{"location":"platform/artefacts/websocket/#configure-websocket-properties","title":"Configure WebSocket Properties:","text":"<p>Adjust the properties within the file to match the details of your WebSocket. Update the location, handler, endpoint, description, createdBy, and createdAt accordingly.</p>"},{"location":"platform/artefacts/websocket/#implement-websocket-handler-logic","title":"Implement WebSocket Handler Logic:","text":"<p>Create the associated module or script (e.g., <code>my-project/websockets/my-handler.js</code>) to provide the implementation logic for the WebSocket. This script should handle events such as connection open, message reception, and connection close.</p>"},{"location":"platform/artefacts/websocket/#connect-to-websocket-endpoint","title":"Connect to WebSocket Endpoint:","text":"<p>Clients can connect to the WebSocket by accessing the specified endpoint (e.g., <code>ws://your-server/my-websocket</code>). Use WebSocket libraries in client applications to establish a connection.</p>"},{"location":"platform/artefacts/websocket/#best-practices","title":"Best Practices:","text":""},{"location":"platform/artefacts/websocket/#clear-endpoint-naming","title":"Clear Endpoint Naming:","text":"<p>Choose a clear and meaningful endpoint name for WebSocket connections.</p>"},{"location":"platform/artefacts/websocket/#secure-connections","title":"Secure Connections:","text":"<p>Consider using secure WebSocket connections (WSS) for secure communication.</p>"},{"location":"platform/artefacts/websocket/#handle-websocket-events","title":"Handle WebSocket Events:","text":"<p>Implement logic in the WebSocket handler to handle events like connection open, message reception, and connection close.</p>"},{"location":"platform/artefacts/websocket/#conclusion","title":"Conclusion:","text":"<p>The <code>*.websocket</code> files in the platform provide a simple and structured way to configure WebSocket endpoints. Customize these configurations based on your specific WebSocket communication needs.</p>"},{"location":"platform/artefacts/additions/","title":"Extended Artefacts","text":""},{"location":"platform/artefacts/additions/abap/","title":"ABAP (*.abap)","text":""},{"location":"platform/engines/","title":"Engines","text":""},{"location":"platform/engines/#introduction","title":"Introduction","text":"<p>The codbex platform comes equipped with a set of built-in engines that enhance the development and execution of applications. Each engine serves a specific purpose, providing developers with a comprehensive platform to build a wide range of applications. This documentation provides an overview of the key built-in engines in the platform.</p>"},{"location":"platform/engines/#javascript-engine","title":"JavaScript Engine","text":"<p>The JavaScript engine in the codbex platform allows developers to write server-side scripts using the JavaScript language. This engine supports the latest ECMAScript standards, including ES6 syntax. Developers can create APIs, business logic, and data services using JavaScript.</p>"},{"location":"platform/engines/#typescript-engine","title":"TypeScript Engine","text":"<p>The platform supports TypeScript, a statically-typed superset of JavaScript. The TypeScript engine allows developers to write and transpile TypeScript code into JavaScript, providing strong typing and improved code maintainability.</p>"},{"location":"platform/engines/#python-engine","title":"Python Engine","text":"<p>The Python engine enables developers to write server-side scripts and applications using the Python programming language. It includes a Python runtime, allowing developers to leverage the extensive Python ecosystem for various functionalities.</p>"},{"location":"platform/engines/#command-engine","title":"Command Engine","text":"<p>The Command engine in the codbex platform provides integration with variuos a command-line interfaces (CLI) for interacting with the underlying platform. Developers can use commands to perform various tasks, such as managing artefacts, deploying applications, and configuring the runtime environment.</p>"},{"location":"platform/engines/#jobs-engine","title":"Jobs Engine","text":"<p>The Jobs engine allows developers to schedule and manage background jobs within the codbex platform. It supports the execution of recurring tasks, data processing, and automation of various processes.</p>"},{"location":"platform/engines/#listeners-engine","title":"Listeners Engine","text":"<p>The Listeners engine enables developers to create event-driven applications by setting up listeners for specific events. It supports various event types, including database changes, file system events, and custom triggers.</p>"},{"location":"platform/engines/#web-engine","title":"Web Engine","text":"<p>Web engine provides a framework for managing the front-end parts of the web applications at runtime.</p>"},{"location":"platform/engines/#wiki-engine","title":"Wiki Engine","text":"<p>The Wiki engine allows developers to create and manage documentation, project wikis, and collaborative content within the platform. It provides a user-friendly interface for content creation and editing.</p>"},{"location":"platform/engines/#websockets-engine","title":"WebSockets Engine","text":"<p>The WebSockets engine enables real-time communication between the server and clients. Developers can use WebSockets to build interactive and responsive applications with bidirectional communication.</p>"},{"location":"platform/engines/#security-engine","title":"Security Engine","text":"<p>The Security engine in the codbex platform provides features for securing applications, including user authentication, authorization, and role-based access control. It ensures the protection of sensitive data and resources.</p>"},{"location":"platform/engines/#openapi-engine","title":"OpenAPI Engine","text":"<p>The OpenAPI engine facilitates the creation and documentation of RESTful APIs. Developers can define API specifications using the OpenAPI standard, and the engine generates API documentation automatically.</p>"},{"location":"platform/engines/#odata-engine","title":"OData Engine","text":"<p>The codbex platform includes an OData engine for building and consuming OData services. It simplifies data integration and allows developers to expose data as OData endpoints or consume external OData services.</p>"},{"location":"platform/engines/#cms-content-management-system-engine","title":"CMS (Content Management System) Engine","text":"<p>The CMS engine provides a content management system for organizing and managing various content types, such as documents, images, and multimedia files.</p>"},{"location":"platform/engines/#bpm-business-process-management-engine","title":"BPM (Business Process Management) Engine","text":"<p>The BPM engine enables the design, execution, and monitoring of business processes within the platform. Developers can model and automate business workflows for improved efficiency.</p>"},{"location":"platform/engines/#integrations-engine","title":"Integrations Engine","text":"<p>The Integrations engine supports the integration of external systems and services. Developers can create connectors, adapters, and integration flows to connect the codbex platform with other applications.</p>"},{"location":"platform/engines/#ftp-file-transfer-protocol-engine","title":"FTP (File Transfer Protocol) Engine","text":"<p>The FTP engine allows developers to implement FTP-based file transfer functionality within the platform. It supports secure and efficient file exchange between systems.</p>"},{"location":"platform/engines/#sftp-secure-file-transfer-protocol-engine","title":"SFTP (Secure File Transfer Protocol) Engine","text":"<p>The SFTP engine provides secure file transfer capabilities using the SSH protocol. It ensures the encrypted and secure exchange of files between systems.</p>"},{"location":"platform/engines/#conclusion","title":"Conclusion","text":"<p>The codbex platform built-in engines offer a comprehensive set of tools and capabilities for developers to build diverse applications. Whether it's scripting with JavaScript, TypeScript, or Python, managing background jobs, setting up event listeners, building web applications, securing resources, or integrating with external systems, codbex provides a unified platform for end-to-end application development.</p>"},{"location":"platform/engines/bpm/","title":"BPM Engine","text":""},{"location":"platform/engines/bpm/#introduction","title":"Introduction","text":"<p>The BPM Engine in the codbex platform empowers organizations to model, automate, and manage their business processes efficiently. This documentation introduces key features of the BPM Engine, focusing on its support for the BPMN (Business Process Model and Notation) v2 specification and the utilization of <code>*.bpmn</code> files for the definition and execution of business processes. The underlying BPMN process execution is powered by the Flowable framework (formerly Activiti).</p>"},{"location":"platform/engines/bpm/#bpm-engine-features","title":"BPM Engine Features","text":""},{"location":"platform/engines/bpm/#bpmn-v2-specification-support","title":"BPMN v2 Specification Support","text":"<p>The BPM Engine adheres to the BPMN v2 specification, a standardized notation for representing business processes visually. BPMN enables business analysts to design and communicate process workflows, fostering collaboration between business and technical stakeholders.</p> <p>Example BPMN v2 Diagram:</p> <p></p>"},{"location":"platform/engines/bpm/#process-definition-in-bpmn-files","title":"Process Definition in <code>*.bpmn</code> Files","text":"<p>BPM Engine utilizes <code>*.bpmn</code> files to define business processes. These files are authored using BPMN elements and notation, providing a clear and visual representation of the process flow, tasks, gateways, and events.</p> <p>Example<code>*.bpmn</code> Process Definition:</p> <pre><code>&lt;bpmn:process id=\"myProcess\" name=\"My BPMN Process\"&gt;\n  &lt;bpmn:startEvent id=\"startEvent\" name=\"Start Event\" /&gt;\n  &lt;bpmn:task id=\"task1\" name=\"Task 1\" /&gt;\n  &lt;bpmn:exclusiveGateway id=\"gateway\" name=\"Exclusive Gateway\" /&gt;\n  &lt;bpmn:task id=\"task2\" name=\"Task 2\" /&gt;\n  &lt;bpmn:task id=\"task3\" name=\"Task 3\" /&gt;\n  &lt;bpmn:endEvent id=\"endEvent\" name=\"End Event\" /&gt;\n\n  &lt;!-- Sequence flows --&gt;\n  &lt;bpmn:sequenceFlow sourceRef=\"startEvent\" targetRef=\"task1\" /&gt;\n  &lt;bpmn:sequenceFlow sourceRef=\"task1\" targetRef=\"gateway\" /&gt;\n  &lt;bpmn:sequenceFlow sourceRef=\"gateway\" targetRef=\"task2\"&gt;\n    &lt;bpmn:conditionExpression xsi:type=\"bpmn:tFormalExpression\"&gt;${variable == 'condition'}&lt;/bpmn:conditionExpression&gt;\n  &lt;/bpmn:sequenceFlow&gt;\n  &lt;bpmn:sequenceFlow sourceRef=\"gateway\" targetRef=\"task3\"&gt;\n    &lt;bpmn:conditionExpression xsi:type=\"bpmn:tFormalExpression\"&gt;${variable != 'condition'}&lt;/bpmn:conditionExpression&gt;\n  &lt;/bpmn:sequenceFlow&gt;\n  &lt;bpmn:sequenceFlow sourceRef=\"task2\" targetRef=\"endEvent\" /&gt;\n  &lt;bpmn:sequenceFlow sourceRef=\"task3\" targetRef=\"endEvent\" /&gt;\n&lt;/bpmn:process&gt;\n</code></pre>"},{"location":"platform/engines/bpm/#execution-of-business-processes-with-flowable-framework","title":"Execution of Business Processes with Flowable Framework","text":"<p>The BPM Engine interprets and executes <code>*.bpmn</code> process definitions, enabling organizations to automate and orchestrate their business processes. During execution, the engine handles tasks, events, gateways, and other BPMN elements defined in the process.</p> <p>The BPM Engine leverages the Flowable framework (formerly Activiti) for the execution of BPMN processes. Flowable is an open-source workflow and Business Process Management (BPM) platform that provides a robust and scalable engine for process execution.</p>"},{"location":"platform/engines/bpm/#conclusion","title":"Conclusion","text":"<p>The BPM Engine in the codbex platform provides a powerful platform for modeling, executing, and managing business processes according to the BPMN v2 specification. By utilizing <code>*.bpmn</code> files and Flowable APIs, organizations can design, automate, and analyze their business workflows, fostering improved efficiency, collaboration, and agility.</p>"},{"location":"platform/engines/cms/","title":"CMS Engine","text":""},{"location":"platform/engines/cms/#introduction","title":"Introduction","text":"<p>The CMS Engine in the codbex platform serves as a robust Content Management System, enabling developers to manage and organize content across different backing services. This documentation explores key features of the CMS Engine, highlighting its adherence to the CMIS (Content Management Interoperability Services) specification and its support for various backing services, including Internal (file systems based), Amazon S3, and others.</p>"},{"location":"platform/engines/cms/#cms-engine-features","title":"CMS Engine Features","text":""},{"location":"platform/engines/cms/#cmis-specification-compliance","title":"CMIS Specification Compliance","text":"<p>The CMS Engine follows the CMIS specification, a standard for interoperable content management across different systems. This compliance ensures seamless integration and content exchange with other CMIS-compliant repositories.</p> <p>CMIS compliance in the CMS Engine is achieved through Apache Chemistry, an open-source Java library that provides a CMIS client and server API. Apache Chemistry facilitates communication with CMIS-compliant repositories, allowing seamless integration with external content management systems.</p>"},{"location":"platform/engines/cms/#backing-services-options","title":"Backing Services Options","text":"<p>CMS Engine supports multiple backing services for storing and managing content. Developers can choose from different options, including:</p> <ul> <li>Internal (File Systems Based): Utilizes the internal file system for content storage.</li> <li>Amazon S3: Integrates with Amazon S3 for scalable and reliable object storage.</li> </ul>"},{"location":"platform/engines/cms/#content-versioning-and-metadata","title":"Content Versioning and Metadata","text":"<p>The CMS Engine provides support for content versioning, allowing developers to track and manage changes to content over time. Additionally, metadata can be associated with content, providing context and additional information.</p>"},{"location":"platform/engines/cms/#conclusion","title":"Conclusion","text":"<p>The CMS Engine in codbex platform provides a versatile Content Management System with support for the CMIS specification and various backing services. Whether utilizing the internal file system or integrating with cloud-based solutions like Amazon S3, developers can manage content efficiently while benefiting from content versioning, metadata association, and seamless switching between backing services.</p>"},{"location":"platform/engines/command/","title":"Command Engine","text":""},{"location":"platform/engines/command/#introduction","title":"Introduction","text":"<p>This documentation focuses on how developers can configure the Command Engine to execute various shell scripts, allowing for flexibility based on the operating system.</p>"},{"location":"platform/engines/command/#executing-shell-scripts","title":"Executing Shell Scripts","text":"<p>The Command Engine allows developers to configure and execute shell scripts. This feature is particularly useful for tasks that involve interacting with the underlying operating system.</p> <p>Example:</p> <pre><code>{\n   \"description\":\"command description\",\n   \"contentType\":\"text/plain\",\n   \"commands\":[\n      {\n         \"os\":\"linux\",\n         \"command\":\"uname -a\"\n      },\n      {\n         \"os\":\"mac\",\n         \"command\":\"uname -a\"\n      },\n      {\n         \"os\":\"windows\",\n         \"command\":\"ver\"\n      }\n   ]\n}\n</code></pre>"},{"location":"platform/engines/command/#environment-variable","title":"Environment Variable","text":"<p>The set and unset properties define environment variables, and the commands array specifies OS-specific commands.</p> <p>Example:</p> <p><code>print.sh</code></p> <pre><code>echo $GREETING\n</code></pre> <p><code>print.command</code></p> <pre><code> {\n    \"description\": \"command description\",\n    \"contentType\": \"text/plain\",\n    \"set\": {\n        \"GREETING\": \"hello world!\"\n    },\n    \"unset\": [\n        \"BYE\"\n    ],\n    \"commands\": [\n        {\n            \"os\": \"linux\",\n            \"command\": \"sh print.sh\"\n        },\n        {\n            \"os\": \"mac\",\n            \"command\": \"sh print.sh\"\n        },\n        {\n            \"os\": \"windows\",\n            \"command\": \"print.bat\"\n        }\n    ]\n}\n</code></pre>"},{"location":"platform/engines/command/#conclusion","title":"Conclusion","text":"<p>The Command Engine in the codbex platform provides a flexible and extensible commands interface for developers. By configuring shell scripts in the <code>*.command</code> files, developers can execute OS-specific tasks seamlessly, enhancing the platform's adaptability to different operating environments.</p>"},{"location":"platform/engines/ftp/","title":"FTP Engine","text":""},{"location":"platform/engines/ftp/#introduction","title":"Introduction","text":"<p>The FTP Engine in the codbex platform provides seamless file transfer capabilities using the File Transfer Protocol (FTP). This documentation explores key features of the FTP Engine.</p>"},{"location":"platform/engines/ftp/#ftp-engine-features","title":"FTP Engine Features","text":""},{"location":"platform/engines/ftp/#file-transfer-via-ftp","title":"File Transfer via FTP","text":"<p>The FTP Engine enables organizations to transfer files between systems using the File Transfer Protocol. Whether uploading, downloading, or synchronizing files, the FTP Engine simplifies file management and integration.</p>"},{"location":"platform/engines/ftp/#apache-ftp-server-integration","title":"Apache FTP Server Integration","text":""},{"location":"platform/engines/ftp/#underlying-apache-ftp-server","title":"Underlying Apache FTP Server:","text":"<ul> <li>The FTP Engine is built on top of the Apache FTP Server.</li> <li>Apache FTP Server is a robust open-source FTP server implementation written in Java, providing support for FTP, FTPS, and SFTP protocols.</li> </ul>"},{"location":"platform/engines/ftp/#configuration-and-customization","title":"Configuration and Customization:","text":"<ul> <li>Organizations can customize the behavior and settings of the Apache FTP Server to meet their specific requirements.</li> <li>Configuration files, such as <code>ftpd-typical.xml</code>, allow administrators to define server settings, user authentication, and security options.</li> </ul>"},{"location":"platform/engines/ftp/#conclusion","title":"Conclusion","text":"<p>The FTP Engine in the codbex platform, backed by the Apache FTP Server, offers a reliable and extensible solution for file transfer using the File Transfer Protocol. Organizations can easily configure and manage FTP operations, benefiting from the power and flexibility of the underlying Apache FTP Server.</p>"},{"location":"platform/engines/integrations/","title":"Inegrations Engine","text":""},{"location":"platform/engines/integrations/#introduction","title":"Introduction","text":"<p>The Integrations Engine in the codbex platform empowers organizations to seamlessly connect and integrate various systems and services. This documentation explores key features of the Integrations Engine, focusing on its underlying integration with Apache Camel. The engine supports a myriad of connectors for diverse systems and can be configured using `*.camel`` descriptor files.</p>"},{"location":"platform/engines/integrations/#integrations-engine-features","title":"Integrations Engine Features","text":""},{"location":"platform/engines/integrations/#apache-camel-integration","title":"Apache Camel Integration","text":"<p>The Integrations Engine leverages Apache Camel, a powerful open-source integration framework that provides a rule-based routing and mediation engine. Apache Camel simplifies the integration of different systems and applications using a variety of connectors and patterns.</p> <p>Example Camel Flow:</p> <p></p>"},{"location":"platform/engines/integrations/#hundreds-of-connectors","title":"Hundreds of Connectors","text":"<p>Apache Camel supports a vast array of connectors, allowing seamless integration with numerous systems and services. Connectors cover technologies such as databases, messaging queues, cloud services, file systems, and more. Developers can choose from a wide range of connectors based on their integration requirements.</p>"},{"location":"platform/engines/integrations/#configuration-via-camel-descriptor-files","title":"Configuration via <code>*.camel</code> Descriptor Files","text":"<p>The Integrations Engine is configured using <code>*.camel</code> descriptor files. These files define integration routes, components, and options in a structured format, providing a clear and concise way to configure integration scenarios.</p> <p>Example <code>*.camel</code> Descriptor Configuration:</p> <pre><code>- route:\n    id: route-e308\n    from:\n      uri: platform-http:/camelFlow\n      id: from-48ea\n      steps:\n        - setProperty:\n            name: resource\n            id: setProperty-8ed5\n            expression:\n              constant:\n                expression: camel_flow/calledFromCamel.mjs\n                id: constant-f4ba\n        - to:\n            uri: class:org.eclipse.dirigible.components.engine.camel.invoke.Invoker\n            id: to-5fb3\n            parameters:\n              method: invoke\n- route:\n    id: route-bda8\n    from:\n      uri: direct:inbound1\n      id: from-3850\n      steps:\n        - log:\n            message: '[CamelFlow] Route inbound1 called with message: ${body}'\n            id: log-be9c\n        - setBody:\n            id: setBody-0552\n            expression:\n              simple:\n                expression: ${body} -&gt; camel route inbound1 handled this message\n                id: simple-57b6\n</code></pre>"},{"location":"platform/engines/integrations/#conclusion","title":"Conclusion","text":"<p>The Integrations Engine in the codbex platform, powered by Apache Camel, offers a flexible and extensible solution for connecting and integrating diverse systems. By utilizing <code>*.camel</code> descriptor files, organizations can easily configure and manage integration routes, leveraging the extensive set of Apache Camel connectors for seamless connectivity.</p>"},{"location":"platform/engines/javascript/","title":"JavaScript Engine","text":""},{"location":"platform/engines/javascript/#introduction","title":"Introduction","text":"<p>The JavaScript Engine in the codbex platform empowers developers to write server-side scripts, APIs, and business logic using the JavaScript language. This documentation provides an in-depth overview of the JavaScript Engine's capabilities and its underlying framework, GraalJS.</p>"},{"location":"platform/engines/javascript/#javascript-engine-features","title":"JavaScript Engine Features","text":""},{"location":"platform/engines/javascript/#server-side-scripting","title":"Server-Side Scripting","text":"<p>The JavaScript Engine allows developers to execute server-side scripts, enabling the creation of dynamic and scalable applications. Scripts can be embedded within the projects to handle various backend functionalities.</p> <p>Example:</p> <pre><code>// Simple JavaScript Function\nfunction greet(name) {\n    return \"Hello, \" + name + \"!\";\n}\n</code></pre>"},{"location":"platform/engines/javascript/#api-development","title":"API Development","text":"<p>Developers can use the JavaScript Engine to build RESTful services and APIs. The platform provides a set of APIs and tools to handle HTTP requests, database interactions, and other server-side operations.</p> <p>Example:</p> <pre><code>// RESTful API Endpoint\nimport { rs } from \"sdk/http\";\n\nrs.service()\n    .resource(\"\")\n    .get(function (_context, _request, response) {\n        response.println(\"Hello there!\");\n    })\n    .execute();\n</code></pre>"},{"location":"platform/engines/javascript/#es6-syntax-support","title":"ES6 Syntax Support","text":"<p>The JavaScript Engine fully supports ECMAScript 6 (ES6) syntax, allowing developers to use modern JavaScript features for cleaner and more efficient code.</p> <p>Example:</p> <pre><code>// ES6 Arrow Function\nconst addNumbers = (a, b) =&gt; a + b;\n\n// Destructuring Assignment\nconst { firstName, lastName } = person;\n</code></pre>"},{"location":"platform/engines/javascript/#underlying-framework-graaljs","title":"Underlying Framework: GraalJS","text":"<p>The JavaScript Engine in the codbex platform is built on the GraalVM (GraalJS) framework. GraalVM is a high-performance runtime that provides support for multiple languages, including JavaScript.</p> <p>Key features of GraalJS:</p>"},{"location":"platform/engines/javascript/#just-in-time-compilation-jit","title":"Just-In-Time Compilation (JIT)","text":"<p>GraalJS employs JIT compilation to dynamically translate JavaScript code into machine code for improved execution speed. This compilation strategy enhances performance and responsiveness.</p>"},{"location":"platform/engines/javascript/#polyglot-integration","title":"Polyglot Integration","text":"<p>GraalVM allows polyglot programming, enabling the seamless integration of multiple languages within the same application. Developers can leverage JavaScript alongside other languages supported by GraalVM.</p>"},{"location":"platform/engines/javascript/#ahead-of-time-compilation-aot","title":"Ahead-of-Time Compilation (AOT)","text":"<p>GraalVM supports Ahead-of-Time compilation, enabling the pre-compilation of JavaScript code into native machine code. This feature enhances startup performance and reduces memory footprint.</p>"},{"location":"platform/engines/javascript/#native-image-generation","title":"Native Image Generation","text":"<p>GraalVM's native image generation capabilities enable the creation of lightweight and standalone executable binaries. This is particularly useful for optimizing the deployment and distribution of applications.</p>"},{"location":"platform/engines/jobs/","title":"Jobs Engine","text":""},{"location":"platform/engines/jobs/#introduction","title":"Introduction","text":"<p>The Jobs Engine in the codbex platform allows developers to schedule and manage background jobs within the stack. This documentation provides an overview of the Jobs Engine's features, including the use of CRON expressions, parameters, and JavaScript handlers when a job is triggered.</p>"},{"location":"platform/engines/jobs/#jobs-engine-features","title":"Jobs Engine Features","text":""},{"location":"platform/engines/jobs/#background-job-scheduling","title":"Background Job Scheduling","text":"<p>The Jobs Engine enables developers to schedule recurring background jobs to automate various tasks. Jobs can be scheduled to run at specific intervals using CRON expressions.</p> <p>Example:</p> <pre><code>{\n   \"expression\":\"0/10 * * * * ?\",\n   \"group\":\"codbex\",\n   \"handler\":\"my-project/jobs/my-handler.js\",\n   \"description\":\"My Job\",\n   \"parameters\":[\n   ]\n}\n</code></pre>"},{"location":"platform/engines/jobs/#cron-expressions","title":"CRON Expressions","text":"<p>Developers can use CRON expressions to specify when a job should run. CRON expressions define the schedule by specifying minute, hour, day of the month, month, and day of the week.</p> <p>Example CRON Expression: <code>\"0 2 * * *\"</code> (Every day at 2:00 AM)</p>"},{"location":"platform/engines/jobs/#job-parameters","title":"Job Parameters","text":"<p>Jobs can accept parameters, allowing developers to customize job behavior dynamically. Parameters provide flexibility in configuring and adapting job execution based on specific requirements.</p> <p>Example:</p> <pre><code>{\n   \"expression\":\"0/10 * * * * ?\",\n   \"group\":\"codbex\",\n   \"handler\":\"my-project/jobs/my-handler.js\",\n   \"description\":\"My Job with Parameters\",\n   \"parameters\":[\n      {\n         \"type\":\"string\",\n         \"name\":\"stringParam\",\n         \"defaultValue\":\"My Value\",\n         \"choices\":\"\",\n         \"description\":\"My String Param\"\n      },\n      {\n         \"type\":\"number\",\n         \"name\":\"numberParam\",\n         \"defaultValue\":\"1\",\n         \"description\":\"My Number Param\"\n      },\n      {\n         \"type\":\"boolean\",\n         \"name\":\"boolParam\",\n         \"defaultValue\":\"true\",\n         \"description\":\"My Bool Value\"\n      },\n      {\n         \"type\":\"choice\",\n         \"name\":\"choiceParam\",\n         \"defaultValue\":\"a\",\n         \"choices\":\"a,b,c\",\n         \"description\":\"My Choice Param\"\n      }\n   ]\n}\n</code></pre>"},{"location":"platform/engines/jobs/#javascript-handlers","title":"JavaScript Handlers","text":"<p>When a job is triggered, developers can define JavaScript handlers to execute specific logic. Handlers can access job parameters, perform actions, and interact with other platform services.</p> <p>Example Handler:</p> <pre><code>console.log(\"Hello from My Job\");\n</code></pre>"},{"location":"platform/engines/jobs/#underlying-quartz-framework","title":"Underlying Quartz Framework","text":"<p>The Jobs Engine in the codbex platform is built on the Quartz framework, a widely-used open-source job scheduling library for Java. Quartz provides a rich set of features for job scheduling, such as CRON expressions, job persistence, and clustering.</p> <p>Key Features of Quartz:</p>"},{"location":"platform/engines/jobs/#cron-expressions_1","title":"CRON Expressions","text":"<p>Quartz supports CRON expressions for defining job schedules precisely. Developers can leverage the flexibility of CRON expressions to create complex and customizable schedules.</p>"},{"location":"platform/engines/jobs/#job-persistence","title":"Job Persistence","text":"<p>Quartz allows job configurations and state information to be persisted, ensuring that scheduled jobs are not lost in the event of system restarts or failures.</p>"},{"location":"platform/engines/jobs/#job-clustering","title":"Job Clustering","text":"<p>Quartz supports job clustering, allowing multiple instances of the scheduler to work together. This ensures high availability and load balancing for scheduled jobs.</p>"},{"location":"platform/engines/jobs/#conclusion","title":"Conclusion","text":"<p>The Jobs Engine in the codbex platform, built on the Quartz framework, provides a powerful mechanism for scheduling and managing background jobs. By utilizing CRON expressions, parameters, and JavaScript handlers, developers can automate tasks, customize job behavior, and execute specific logic based on predefined schedules.</p>"},{"location":"platform/engines/listeners/","title":"Listeners Engine","text":""},{"location":"platform/engines/listeners/#introduction","title":"Introduction","text":"<p>The Listeners Engine in the codbex platform provides a powerful mechanism for creating event-driven applications. This documentation explores the key features of the Listeners Engine, including the concepts of Topics and Queues, JavaScript handlers, and the underlying ActiveMQ framework.</p>"},{"location":"platform/engines/listeners/#listeners-engine-features","title":"Listeners Engine Features","text":""},{"location":"platform/engines/listeners/#event-driven-architecture","title":"Event-Driven Architecture","text":"<p>The Listeners Engine enables developers to build event-driven applications by setting up listeners for specific events. Listeners can be configured to react to changes in the system, such as database updates, file system events, or custom triggers.</p> <p>Example:</p> <pre><code>{\n  \"name\":\"my_listener\",\n  \"kind\":\"Queue\",\n  \"handler\":\"my-project/listeners/my-handler.js\",\n  \"description\":\"My Listener\"\n}\n</code></pre>"},{"location":"platform/engines/listeners/#topics-and-queues-concepts","title":"Topics and Queues Concepts","text":"<ul> <li>Topics: Topics represent a publish-subscribe model where messages sent to a topic are broadcasted to all subscribers. Subscribers interested in a specific topic receive relevant messages.</li> </ul> <p>Example:</p> <p><code>\"kind\":\"Topic\",</code></p> <ul> <li>Queues: Queues represent a point-to-point model where messages are sent to a specific queue, and only one subscriber (consumer) receives and processes each message.</li> </ul> <p>Example:</p> <p><code>\"kind\":\"Queue\",</code></p>"},{"location":"platform/engines/listeners/#javascript-handlers","title":"JavaScript Handlers","text":"<p>Listeners in the platform can be associated with JavaScript handlers that define the logic to be executed when an event occurs. Handlers have access to the event data and can perform custom actions based on the event type.</p> <p>Example:</p> <pre><code>export function onMessage(message) {\n    console.log(message);\n}\n\nexport function onError(error) {\n    console.error(error);\n}\n</code></pre>"},{"location":"platform/engines/listeners/#underlying-activemq-framework","title":"Underlying ActiveMQ Framework","text":"<p>The Listeners Engine in the codbex platform is built on the ActiveMQ framework, a robust open-source messaging and integration patterns server. ActiveMQ provides reliable and scalable messaging capabilities, supporting both Topics and Queues.</p> <p>Key Features of ActiveMQ:</p>"},{"location":"platform/engines/listeners/#jms-java-message-service-support","title":"JMS (Java Message Service) Support","text":"<p>ActiveMQ adheres to the JMS specification, allowing seamless integration with applications written in various programming languages. JMS provides a standard way to send and receive messages.</p>"},{"location":"platform/engines/listeners/#persistence-and-redelivery","title":"Persistence and Redelivery","text":"<p>ActiveMQ supports message persistence, ensuring that messages are not lost even in the event of system failures. It also provides redelivery mechanisms to handle scenarios where message processing fails.</p>"},{"location":"platform/engines/listeners/#clustering-and-high-availability","title":"Clustering and High Availability","text":"<p>ActiveMQ supports clustering, allowing multiple instances of the message broker to work together. This ensures high availability and load balancing for handling messages.</p>"},{"location":"platform/engines/listeners/#conclusion","title":"Conclusion","text":"<p>The Listeners Engine in the codbex platform, built on the ActiveMQ framework, provides a robust and scalable solution for building event-driven applications. By leveraging Topics, Queues, and JavaScript handlers, developers can create flexible and responsive systems that react to changes in real-time.</p>"},{"location":"platform/engines/odata/","title":"OData Engine","text":""},{"location":"platform/engines/odata/#introduction","title":"Introduction","text":"<p>The OData Engine in the codbex platform provides robust support for creating and exposing RESTful APIs adhering to the OData (Open Data Protocol) v2 specification. This documentation explores key features of the OData Engine, highlighting its customization capabilities using a modified version of Apache Olingo.</p>"},{"location":"platform/engines/odata/#odata-engine-features","title":"OData Engine Features","text":""},{"location":"platform/engines/odata/#odata-v2-specification-support","title":"OData v2 Specification Support","text":"<p>The OData Engine fully supports the OData v2 specification, allowing developers to define, expose, and consume RESTful APIs with a standardized and interoperable approach.</p> <p>Example OData v2 Endpoint: http://example.com/odata/v2/</p>"},{"location":"platform/engines/odata/#customized-apache-olingo-backend","title":"Customized Apache Olingo Backend","text":"<p>The embeded codbex platform OData Engine leverages a customized version of the Apache Olingo library as its backend. This customization enhances the capabilities of the OData Engine, providing additional features and optimizations tailored for the codbex platform.</p>"},{"location":"platform/engines/odata/#entity-sets-navigation-and-query-support","title":"Entity Sets, Navigation, and Query Support","text":"<p>The OData Engine supports the definition of entity sets, navigation between entities, and querying capabilities according to the OData v2 specification. Developers can model complex data structures and relationships while providing efficient query capabilities.</p> <p>Example <code>*.odata</code> Descriptor Configuration:</p> <pre><code>{\n  \"namespace\": \"com.codbex.odata.Employees\",\n  \"entities\":\n  [\n    {\n      \"name\": \"Employee\",\n      \"alias\": \"Employees\",\n      \"table\": \"EMPLOYEE\"\n    }\n  ]\n}\n</code></pre> <p>Example <code>*.table</code> Descriptor neded for database artefacts creation:</p> <pre><code>{\n    \"name\": \"EMPLOYEE\",\n    \"type\": \"TABLE\",\n    \"columns\": [\n        {\n            \"name\": \"EMPLOYEE_ID\",\n            \"type\": \"INTEGER\",\n            \"length\": 0,\n            \"nullable\": true,\n            \"primaryKey\": \"true\",\n            \"identity\": \"true\",\n            \"unique\": false,\n            \"defaultValue\": null,\n            \"precision\": null,\n            \"scale\": null\n        },\n        {\n            \"name\": \"EMPLOYEE_NAME\",\n            \"type\": \"VARCHAR\",\n            \"length\": \"20\",\n            \"nullable\": true,\n            \"primaryKey\": false,\n            \"identity\": false,\n            \"unique\": false,\n            \"defaultValue\": null,\n            \"precision\": null,\n            \"scale\": null\n        }\n    ]\n}\n</code></pre>"},{"location":"platform/engines/odata/#conclusion","title":"Conclusion","text":"<p>The OData Engine in the codbex platform offers a powerful solution for creating, customizing, and exposing RESTful APIs compliant with the OData v2 specification. Leveraging <code>*.odata</code> descriptors to define entity sets, aliases, and table mappings simplifies the configuration process, allowing developers to model complex data structures and provide efficient query capabilities.</p>"},{"location":"platform/engines/openapi/","title":"OpenAPI Engine","text":""},{"location":"platform/engines/openapi/#introduction","title":"Introduction","text":"<p>The OpenAPI Engine in the codbex platform streamlines the management and integration of REST services by collecting *.openapi files with Swagger descriptors. This documentation explores key features of the OpenAPI Engine, emphasizing its capability to aggregate multiple OpenAPI specifications into a consolidated REST services API set for the instance.</p>"},{"location":"platform/engines/openapi/#openapi-engine-features","title":"OpenAPI Engine Features","text":""},{"location":"platform/engines/openapi/#aggregation-of-openapi-files","title":"Aggregation of <code>*.openapi</code> Files","text":"<p>OpenAPI Engine is designed to collect and integrate multiple *.openapi files, each containing a Swagger/OpenAPI specification. This aggregation allows developers to organize and manage various REST service definitions within a single instance.</p> <p>Example *.openapi Configuration:</p> <pre><code>{\n  \"location\": \"/api/customers.openapi\",\n  \"title\": \"Customers API\",\n  \"version\": \"1.0.0\",\n  \"basePath\": \"/v1/customers\",\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"title\": \"Customers API\",\n    \"version\": \"1.0.0\"\n  },\n  \"paths\": {\n    \"/\": {\n      \"get\": {\n        \"summary\": \"Get all customers\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful operation\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a new customer\",\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Customer created\"\n          }\n        }\n      }\n    }\n    // Additional path definitions...\n  }\n}\n</code></pre>"},{"location":"platform/engines/openapi/#consolidated-rest-services-api-set","title":"Consolidated REST Services API Set","text":"<p>The OpenAPI Engine integrates the collected specifications into a consolidated REST services API set for the instance. This unified API set serves as a comprehensive reference for all available REST services, providing a centralized point for developers to explore and interact with various endpoints.</p> <p>Example Aggregated API Set URL: http://example.com/services/openapi</p>"},{"location":"platform/engines/openapi/#automatic-documentation-generation","title":"Automatic Documentation Generation","text":"<p>The aggregated OpenAPI specifications not only define the structure of REST services but also facilitate automatic documentation generation. Developers can access interactive documentation, explore endpoints, and understand request/response formats through the Swagger UI or other compatible tools.</p> <p>Example Swagger UI URL: http://example.com/services/web/ide-swagger/ui/</p>"},{"location":"platform/engines/openapi/#platform-services-api-documentation","title":"Platform Services API Documentation","text":"<p>The OpenAPI specifications for the built-in RESTful services provided by the platform can be accessed at: http://example.com/api-docs.</p> <p>The corresponding Swagger UI can be accessed at: http://example.com/swagger-ui/index.html</p>"},{"location":"platform/engines/openapi/#conclusion","title":"Conclusion","text":"<p>The OpenAPI Engine in the codbex platform simplifies the management of REST services by aggregating multiple `*.openapi`` files into a consolidated API set. This approach enhances organization, documentation, and accessibility for developers working on RESTful applications.</p>"},{"location":"platform/engines/python/","title":"Python Engine","text":""},{"location":"platform/engines/python/#introduction","title":"Introduction","text":"<p>The Python Engine in the codbex platform enables developers to write server-side scripts and applications using the Python programming language. This documentation provides an overview of the Python Engine's features and how developers can leverage Python for server-side development within the platform.</p>"},{"location":"platform/engines/python/#python-engine-features","title":"Python Engine Features","text":""},{"location":"platform/engines/python/#server-side-scripting","title":"Server-Side Scripting","text":"<p>The Python Engine allows developers to execute server-side scripts and build applications using the Python language. Python scripts can be embedded within the projects to handle various backend functionalities.</p> <p>Example:</p> <pre><code># Simple Python Function\ndef greet(name):\n    return \"Hello, \" + name + \"!\"\n</code></pre>"},{"location":"platform/engines/python/#integrated-python-runtime","title":"Integrated Python Runtime","text":"<p>The Python Engine includes an integrated Python runtime, allowing developers to leverage the extensive Python ecosystem for various functionalities. This runtime ensures compatibility with Python libraries and modules.</p> <p>Example:</p> <pre><code># Using Python Standard Library\nimport datetime\n\ncurrent_time = datetime.datetime.now()\n</code></pre>"},{"location":"platform/engines/python/#integration-with-platform-services","title":"Integration with platform services","text":"<p>Developers can seamlessly integrate Python scripts with platform services, allowing access to database operations, file handling, and other platform features.</p> <p>Example:</p> <pre><code># Database Interaction\nresult = database.execute(\"SELECT * FROM employees\")\n</code></pre>"},{"location":"platform/engines/python/#conclusion","title":"Conclusion","text":"<p>The Python Engine in the codbex platform provides a versatile environment for server-side Python development. Whether it's scripting, application development, or integrating with platform services, developers can leverage the power of Python to build robust server-side solutions.</p>"},{"location":"platform/engines/security/","title":"Security Engine","text":""},{"location":"platform/engines/security/#introduction","title":"Introduction","text":"<p>The Security Engine in the codbex platform provides a comprehensive solution for securing applications, enforcing access constraints, and integrating with various authentication service providers. This documentation explores key features of the Security Engine, including its use of the Web Filer, configuration through *.access files, and support for plugins such as Keycloak, OAuth2, Azure, Google, and others.</p>"},{"location":"platform/engines/security/#security-engine-features","title":"Security Engine Features","text":""},{"location":"platform/engines/security/#access-constraints","title":"Access Constraints","text":"<p>Security Engine utilizes the Web Filer underneath to enforce access constraints on REST paths and methods. This allows developers to define fine-grained access control rules based on the requirements of their applications.</p> <p>Access constraints are defined in *.access files, allowing developers to specify rules for different REST paths and methods. These configuration files can be easily managed within the project structure.</p> <p>Example *.access Configuration:</p> <pre><code>{\n   \"constraints\":[\n      {\n         \"scope\":\"HTTP\",\n         \"path\":\"/myproject/myfolder/myartifact1.txt\",\n         \"method\":\"*\",\n         \"roles\":[\n            \"myrole1\",\n            \"myrole2\"\n         ]\n      },\n      {\n         \"scope\":\"HTTP\",\n         \"path\":\"/myproject/myfolder/myartifact2.txt\",\n         \"method\":\"GET\",\n         \"roles\":[\n            \"myrole3\",\n            \"myrole4\"\n         ]\n      }\n   ]\n}\n</code></pre>"},{"location":"platform/engines/security/#plugins-for-authentication-service-providers","title":"Plugins for Authentication Service Providers","text":"<p>The Security Engine supports plugins for popular authentication service providers, enabling seamless integration with identity and access management systems. Plugins are available for Keycloak, OAuth2, Azure AD, Google, and other providers.</p>"},{"location":"platform/engines/security/#conclusion","title":"Conclusion","text":"<p>The Security Engine in the codbex platform provides a flexible and extensible framework for securing applications. By leveraging the Web Filer for access constraints, configuring security through *.access files, and integrating with authentication service providers through plugins, developers can implement robust security measures tailored to their specific needs.</p>"},{"location":"platform/engines/sftp/","title":"SFTP Engine","text":""},{"location":"platform/engines/sftp/#introduction","title":"Introduction","text":"<p>The SFTP Engine in the codbex platform provides secure file transfer capabilities using the Secure File Transfer Protocol (SFTP). This documentation explores key features of the SFTP Engine. The underlying SFTP server used by the platform is powered by the Apache Mina project.</p>"},{"location":"platform/engines/sftp/#sftp-engine-features","title":"SFTP Engine Features","text":""},{"location":"platform/engines/sftp/#secure-file-transfer-via-sftp","title":"Secure File Transfer via SFTP","text":"<p>The SFTP Engine enables organizations to transfer files securely between systems using the Secure File Transfer Protocol. Whether uploading, downloading, or synchronizing files, the SFTP Engine simplifies secure file management and integration.</p>"},{"location":"platform/engines/sftp/#apache-mina-integration","title":"Apache Mina Integration","text":""},{"location":"platform/engines/sftp/#underlying-apache-mina-sftp-server","title":"Underlying Apache Mina SFTP Server:","text":"<ul> <li>The SFTP Engine in the codbex platform is built on top of the Apache Mina project.</li> <li>Apache Mina is a flexible and high-performance networking framework for building custom network protocols. The SFTP functionality is part of Apache Mina SSHD.</li> </ul>"},{"location":"platform/engines/sftp/#configuration-and-customization","title":"Configuration and Customization:","text":"<ul> <li>Organizations can customize the behavior and settings of the Apache Mina SFTP Server to meet their specific security and file transfer requirements.</li> <li>Configuration files, such as <code>sshd_config.xml</code>, allow administrators to define server settings, user authentication, and security options.</li> </ul>"},{"location":"platform/engines/sftp/#accessing-sftp-endpoints","title":"Accessing SFTP Endpoints:","text":"<ul> <li>Access SFTP endpoints through standardized URLs, following the SFTP operation definitions.</li> <li>Utilize tools compatible with SFTP, such as SFTP clients or custom applications, for initiating and monitoring secure file transfers.</li> </ul>"},{"location":"platform/engines/sftp/#executing-sftp-operations","title":"Executing SFTP Operations:","text":"<ul> <li>Trigger the execution of SFTP operations by initiating the specified SFTP endpoints.</li> <li>Monitor and analyze SFTP operation execution through logging and monitoring mechanisms.</li> </ul>"},{"location":"platform/engines/sftp/#conclusion","title":"Conclusion","text":"<p>The SFTP Engine in the codbex platform, backed by the Apache Mina project, offers a secure and reliable solution for file transfer using the Secure File Transfer Protocol. Organizations can easily configure and manage SFTP operations, benefiting from the security and flexibility of the underlying Apache Mina SFTP Server.</p>"},{"location":"platform/engines/templates/","title":"Templates","text":""},{"location":"platform/engines/templates/#introduction","title":"Introduction","text":"<p>The codbex platform supports various template engines, making it easy for developers to generate dynamic content in their applications. This documentation focuses on three popular template engines: Apache Velocity, Mustache, and pure JavaScript templating.</p>"},{"location":"platform/engines/templates/#template-engines","title":"Template Engines","text":""},{"location":"platform/engines/templates/#apache-velocity","title":"Apache Velocity","text":"<p>Apache Velocity is a powerful and flexible template engine that simplifies the generation of dynamic content. The platform's integration with Velocity allows developers to use templates written in the Velocity Template Language (VTL) to produce dynamic output.</p>"},{"location":"platform/engines/templates/#mustache","title":"Mustache","text":"<p>Mustache is a logic-less template syntax that can be used for various programming languages. Platform supports Mustache templates, providing a straightforward and consistent way to generate content without introducing complex logic into the templates.</p>"},{"location":"platform/engines/templates/#javascript-templating","title":"JavaScript Templating","text":"<p>For developers who prefer using JavaScript for templating, the platform allows the use of pure JavaScript templates. This approach provides the flexibility of using JavaScript functions to generate dynamic content directly.</p>"},{"location":"platform/engines/templates/#usage-examples","title":"Usage Examples","text":""},{"location":"platform/engines/templates/#velocity-example","title":"Velocity Example","text":"<pre><code>## Velocity Template Example\n&lt;html&gt;\n  &lt;body&gt;\n  #set( $foo = \"Velocity\" )\n  Hello $foo World!\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>More about VTL syntax can be found in the Apache Velocity User Guide</p>"},{"location":"platform/engines/templates/#mustache-template-example","title":"Mustache Template Example","text":"<pre><code>&lt;!-- Mustache Template Example --&gt;\nHello, {{name}}!\n</code></pre>"},{"location":"platform/engines/templates/#javascript-template-example","title":"JavaScript Template Example","text":"<pre><code>// JavaScript Template Example\nfunction generateGreeting(name) {\n    return `Hello, ${name}!`;\n}\n\n// Example Usage\nconst greeting = generateGreeting(\"World\");\n</code></pre>"},{"location":"platform/engines/templates/#best-practices","title":"Best Practices","text":"<p>When working with template engines, consider the following best practices:</p> <ul> <li>Keep templates simple and focused on presentation.</li> <li>Separate logic from presentation whenever possible.</li> <li>Ensure proper escaping to prevent security vulnerabilities, especially when dealing with user inputs.</li> </ul>"},{"location":"platform/engines/templates/#integration","title":"Integration","text":"<p>To use template engines, follow these general steps:</p> <ol> <li> <p>Create a Template File: Write your templates using the syntax of the chosen template engine (Velocity, Mustache, or JavaScript).</p> </li> <li> <p>Integrate in Code: Use the platform to integrate the template engine in your code. This may involve loading the template, providing data, and rendering the final output.</p> </li> <li> <p>Testing: Test your templates thoroughly to ensure they generate the expected output. Use the debugging features to identify and fix any issues.</p> </li> </ol> <p>1.Deployment: Deploy your application with the integrated templates to see them in action.</p>"},{"location":"platform/engines/templates/#conclusion","title":"Conclusion","text":"<p>The codbex platform support for template engines like Apache Velocity, Mustache, and pure JavaScript templating enhances the platform's capabilities for dynamic content generation. Whether you prefer the expressive power of Velocity, the simplicity of Mustache, or the flexibility of JavaScript, it provides a seamless integration experience. Experiment with different template engines based on your preferences and project requirements, and enjoy the efficiency and flexibility they bring to your application development process.</p>"},{"location":"platform/engines/typescript/","title":"TypeScript Engine","text":""},{"location":"platform/engines/typescript/#introduction","title":"Introduction","text":"<p>The TypeScript Engine in the codbex platform enables developers to write and transpile TypeScript code into JavaScript for server-side scripting. This documentation provides an overview of the TypeScript Engine's features, along with details about the TypeScript compiler (<code>tsc</code>) and <code>tsconfig.json</code> configuration.</p>"},{"location":"platform/engines/typescript/#typescript-engine-features","title":"TypeScript Engine Features","text":""},{"location":"platform/engines/typescript/#statically-typed-development","title":"Statically-Typed Development","text":"<p>The TypeScript Engine brings static typing to server-side scripting, enhancing code quality and maintainability. Developers can leverage TypeScript's type annotations and interfaces to catch potential errors during development.</p> <p>Example:</p> <pre><code>// TypeScript Interface\ninterface Person {\n    firstName: string;\n    lastName: string;\n}\n\n// Strongly-typed Function\nfunction greet(person: Person): string {\n    return `Hello, ${person.firstName} ${person.lastName}!`;\n}\n</code></pre>"},{"location":"platform/engines/typescript/#transpilation-to-javascript","title":"Transpilation to JavaScript","text":"<p>The TypeScript Engine uses the TypeScript compiler (<code>tsc</code>) to transpile TypeScript code into JavaScript. This process ensures compatibility with the underlying runtime environment and allows developers to benefit from TypeScript's features while executing JavaScript.</p> <p>Example <code>tsc</code> command:</p> <pre><code>tsc myfile.ts\n</code></pre>"},{"location":"platform/engines/typescript/#tsconfigjson-configuration","title":"<code>tsconfig.json</code> Configuration","text":"<p>Developers can configure the TypeScript compilation process using the <code>tsconfig.json</code> file. This configuration file allows specifying compiler options, target environments, and other settings.</p> <p>Example <code>tsconfig.json</code>:</p> <pre><code>{\n    \"compilerOptions\": {\n        \"target\": \"ES2020\",\n        \"module\": \"commonjs\",\n        \"strict\": true\n    },\n    \"include\": [\"src/**/*.ts\"],\n    \"exclude\": [\"node_modules\"]\n}\n</code></pre> <p>In this example, the tsconfig.json file specifies the target ECMAScript version, module system, and strict typing options.</p>"},{"location":"platform/engines/typescript/#conclusion","title":"Conclusion","text":"<p>The TypeScript Engine in the codbex platform, combined with the TypeScript compiler (<code>tsc</code>) and <code>tsconfig.json</code> configuration, provides developers with a powerful environment for building statically-typed server-side applications. Leveraging TypeScript's features, transpilation capabilities, and configuration options, developers can enhance the development and maintenance of their projects.</p>"},{"location":"platform/engines/web/","title":"Web Engine","text":""},{"location":"platform/engines/web/#introduction","title":"Introduction","text":"<p>The Web Engine in the codbex platform allows developers to expose static web content seamlessly using the underlying Apache Tomcat server embedded in the Spring Boot framework. This documentation explores key features of the Web Engine, including serving static content, configuring routes, and leveraging the embedded Tomcat server.</p>"},{"location":"platform/engines/web/#web-engine-features","title":"Web Engine Features","text":""},{"location":"platform/engines/web/#exposing-static-web-content","title":"Exposing Static Web Content","text":"<p>The Web Engine enables developers to expose static web content, including HTML, CSS, JavaScript, and other assets. Static content can be organized within the projects and made accessible after publishing to the registry.</p>"},{"location":"platform/engines/web/#embedded-apache-tomcat-server-in-spring-boot","title":"Embedded Apache Tomcat Server in Spring Boot","text":"<p>The Web Engine in the platform is built on the Spring Boot framework, which includes an embedded Apache Tomcat server. This embedded server simplifies deployment and provides a scalable environment for serving web applications.</p>"},{"location":"platform/engines/web/#underlying-apache-tomcat-embedded-in-spring-boot","title":"Underlying Apache Tomcat Embedded in Spring Boot","text":"<p>The Web Engine utilizes the Apache Tomcat server embedded within the Spring Boot framework. This embedded server offers several advantages:</p> <p>Key Features of Apache Tomcat Embedded in Spring Boot:</p>"},{"location":"platform/engines/web/#simplified-deployment","title":"Simplified Deployment","text":"<p>Spring Boot's embedded Tomcat server simplifies deployment by packaging the application as a self-contained JAR file. This eliminates the need for external server installations and configuration.</p>"},{"location":"platform/engines/web/#auto-configuration","title":"Auto-Configuration","text":"<p>Spring Boot's auto-configuration features simplify the setup of the embedded Tomcat server. Developers can focus on application logic, and the embedded server adapts to project dependencies and settings.</p>"},{"location":"platform/engines/web/#scalability","title":"Scalability","text":"<p>The embedded Apache Tomcat server in Spring Boot provides scalability for serving web applications. It supports concurrent connections, load balancing, and efficient resource utilization.</p>"},{"location":"platform/engines/web/#web-configuration-example","title":"Web Configuration Example","text":"<p>The <code>project.json</code> definition provides the configuration for a project, specifying the web paths that should be exposed. The interpretation of the exposed modules may depend on the specific conventions and structure of the project.</p> <p>Below is an example configuration setting up static web content:</p> <pre><code> {\n   \"guid\":\"my-project\",\n   \"exposes\":\n     [\n       \"ui\",\n       \"samples\"\n    ]\n}\n</code></pre>"},{"location":"platform/engines/web/#exposes","title":"<code>exposes</code>:","text":"<p>The exposes field is an array that specifies the different modules or parts of the project that should be exposed or made accessible. In this example, the project exposes two modules: \"ui\" and \"samples.\"</p>"},{"location":"platform/engines/web/#ui","title":"<code>ui</code>:","text":"<p>This suggests that the project includes a user interface component that can be accessed or interacted with. It could include static web content, UI components, or other assets related to the user interface of the project.</p>"},{"location":"platform/engines/web/#samples","title":"<code>samples</code>:","text":"<p>This indicates that there is a module or section in the project that contains sample code, examples, or demo functionalities. It could be a set of code snippets, tutorial materials, or sample applications intended for demonstration purposes.</p>"},{"location":"platform/engines/web/#hidden","title":"<code>hidden</code>","text":"<p>This is not defined in the <code>project.json</code> under <code>exposes</code> section, so that it will not be accessible.</p>"},{"location":"platform/engines/web/#conclusion","title":"Conclusion","text":"<p>The Web Engine in the codbex platform, powered by the embedded Apache Tomcat server in Spring Boot, provides a versatile platform for exposing static web content and building dynamic web applications. By configuring access and leveraging the embedded server features, developers can create scalable and efficient web solutions.</p>"},{"location":"platform/engines/websockets/","title":"WebSockets Engine","text":""},{"location":"platform/engines/websockets/#introduction","title":"Introduction","text":"<p>The WebSockets Engine in the codbex platform provides a robust solution for real-time communication between clients and the server. This documentation explores key features of the WebSockets Engine, highlighting its support for the SockJS framework and the Stomp protocol.</p>"},{"location":"platform/engines/websockets/#websockets-engine-features","title":"WebSockets Engine Features","text":""},{"location":"platform/engines/websockets/#real-time-communication","title":"Real-Time Communication","text":"<p>The WebSockets Engine enables real-time bidirectional communication between clients and the server. This is particularly useful for applications that require instant updates, such as chat applications, live dashboards, and collaborative editing.</p> <p>Example:</p> <pre><code>// Establish WebSocket Connection\nvar socket = new WebSocket(\"ws://example.com/socket\");\n</code></pre>"},{"location":"platform/engines/websockets/#sockjs-framework-support","title":"SockJS Framework Support","text":"<p>WebSockets Engine supports the SockJS framework, a JavaScript library that provides a WebSocket-like object for browsers that do not support native WebSocket connections. SockJS seamlessly falls back to alternative transport mechanisms when necessary.</p> <p>Example SockJS Connection:</p> <pre><code>// Establish SockJS Connection\nvar socket = new SockJS(\"http://example.com/sockjs\");\n</code></pre>"},{"location":"platform/engines/websockets/#stomp-protocol-integration","title":"Stomp Protocol Integration","text":"<p>The WebSockets Engine integrates the Stomp protocol (Simple Text Oriented Messaging Protocol) for framing messages and interacting with the WebSocket server. Stomp simplifies the communication protocol and supports features such as message acknowledgment and subscription.</p> <p>Example Stomp Connection:</p> <pre><code>// Connect to WebSocket using Stomp\nvar stompClient = Stomp.over(socket);\nstompClient.connect({}, function (frame) {\n    console.log(\"Connected: \" + frame);\n});\n</code></pre>"},{"location":"platform/engines/websockets/#websocket-file-descriptor-configuration","title":"WebSocket File Descriptor Configuration","text":"<p>The configuration of WebSocket endpoints is defined in *.websocket descriptor files. Below is an example descriptor configuration:</p> <pre><code>{\n  \"handler\":\"my-project/websockets/my-handler.js\",\n  \"endpoint\":\"my-websocket\",\n  \"description\":\"My Websocket\"\n}\n</code></pre> <ul> <li> <p><code>handler</code>: Specifies the location of the JavaScript file serving as the WebSocket endpoint's handler logic.</p> </li> <li> <p><code>endpoint</code>: Specifies the WebSocket endpoint path that clients use to connect.</p> </li> <li> <p><code>description</code>: Provides a brief description of the WebSocket endpoint.</p> </li> </ul>"},{"location":"platform/engines/websockets/#websocket-handler","title":"WebSocket Handler","text":"<p>JavaScript file serving as the WebSocket endpoint's handler logic.</p> <p>Example:</p> <pre><code>export function onOpen()  {\n  console.log(\"Connection openned.\");\n}\n\nexport function onMessage(message, from) {\n  console.log(\"Message received: \" + message + \", from: \" + from);\n  return \"Hello from WebSocket! [\" + message + \"]\";\n}\n\nexport function onError(error) {\n  console.error(\"Error: \" + error);\n}\n\nexport function onClose() {\n  console.warn(\"Connection closed.\");\n}\n</code></pre>"},{"location":"platform/engines/websockets/#websocket-client","title":"WebSocket Client","text":"<p>Below is an example HTML code snippet for a WebSocket client:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;JavaScript WebSocket&lt;/title&gt;\n\n        &lt;script src=\"js/sockjs-0.3.4.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"js/stomp.js\"&gt;&lt;/script&gt;\n\n        &lt;script type=\"text/javascript\"&gt;\n\n            var stompClient = null;\n\n            function setConnected(connected) {\n\n                document.getElementById('connect').disabled = connected;\n                document.getElementById('disconnect').disabled = !connected;\n                document.getElementById('conversationDiv').style.visibility = connected ? 'visible' : 'hidden';\n                document.getElementById('response').innerHTML = '';\n            }\n\n            function connect() {\n\n                var socket = new SockJS('/stomp');\n                stompClient = Stomp.over(socket);\n\n                stompClient.connect({}, function(frame) {\n\n                    setConnected(true);\n                    console.log('Connected: ' + frame);\n\n                    stompClient.subscribe('/user/queue/reply/my-websocket', function(messageOutput) {\n                        showMessage(JSON.parse(messageOutput.body));\n                    });\n\n                    stompClient.subscribe('/user/queue/errors/my-websocket', function(error) {\n                        showError(error);\n                    });\n\n                }, function(error) {\n                    showError(error);\n                });\n            }\n\n            function disconnect() {\n\n                if(stompClient != null) {\n                    stompClient.disconnect();\n                }\n\n                setConnected(false);\n                console.log(\"Disconnected\");\n            }\n\n            function sendMessage() {\n                var from = document.getElementById('from').value;\n                var text = document.getElementById('text').value;\n                stompClient.send(\"/ws/stomp/my-websocket\", {}, JSON.stringify({'from':from, 'text':text}));\n            }\n\n            function showMessage(messageOutput) {\n                var response = document.getElementById('response');\n                var p = document.createElement('p');\n                p.style.wordWrap = 'break-word';\n                p.appendChild(document.createTextNode(messageOutput.from + \": \" + messageOutput.text + \" (\" + messageOutput.time + \")\"));\n                response.appendChild(p);\n            }\n\n            function showError(error) {\n                var response = document.getElementById('response');\n                var p = document.createElement('p');\n                p.style.wordWrap = 'break-word';\n                p.appendChild(document.createTextNode(error));\n                response.appendChild(p);\n            }\n\n        &lt;/script&gt;\n\n    &lt;/head&gt;\n\n    &lt;body onload=\"disconnect()\"&gt;\n\n        &lt;div&gt;\n\n\n            &lt;div&gt;\n                &lt;input type=\"text\" id=\"from\" placeholder=\"Choose a nickname\"/&gt;\n            &lt;/div&gt;\n            &lt;br /&gt;\n            &lt;div&gt;\n                &lt;button id=\"connect\" onclick=\"connect();\"&gt;Connect&lt;/button&gt;\n                &lt;button id=\"disconnect\" disabled=\"disabled\" onclick=\"disconnect();\"&gt;Disconnect&lt;/button&gt;\n            &lt;/div&gt;\n            &lt;br /&gt;\n            &lt;div id=\"conversationDiv\"&gt;\n                &lt;input type=\"text\" id=\"text\" placeholder=\"Write a message...\"/&gt;\n                &lt;button id=\"sendMessage\" onclick=\"sendMessage();\"&gt;Send&lt;/button&gt;\n                &lt;p id=\"response\"&gt;&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"platform/engines/websockets/#conclusion","title":"Conclusion","text":"<p>The WebSockets Engine in the codbex platform provides a powerful and flexible solution for real-time communication. With support for the SockJS framework, integration with the Stomp protocol, and the ability to configure WebSocket endpoints through <code>*.websocket</code> descriptors, developers can create dynamic and responsive applications that leverage the capabilities of WebSockets.</p>"},{"location":"platform/engines/wiki/","title":"Wiki Engine","text":""},{"location":"platform/engines/wiki/#introduction","title":"Introduction","text":"<p>The Wiki Engine in the codbex platform provides a versatile platform for creating and managing documentation and collaborative content. This documentation explores key features of the Wiki Engine, emphasizing its support for two widely-used markup languages: Markdown and Confluence.</p>"},{"location":"platform/engines/wiki/#wiki-engine-features","title":"Wiki Engine Features","text":""},{"location":"platform/engines/wiki/#markdown-support","title":"Markdown Support","text":"<p>The Wiki Engine supports Markdown syntax, a lightweight markup language that allows users to create formatted text using plain text. Markdown provides an easy-to-read and easy-to-write syntax for various document styles.</p> <p>Example Markdown Content:</p> <pre><code># Heading 1\n## Heading 2\n\n* List item 1\n* List item 2\n\n[Link to Markdown](https://en.wikipedia.org/wiki/Markdown)\n</code></pre>"},{"location":"platform/engines/wiki/#confluence-syntax-support","title":"Confluence Syntax Support","text":"<p>The Wiki Engine also supports Confluence syntax, a markup language used in Confluence, a popular collaboration and documentation platform. Confluence syntax enables the creation of rich and structured content.</p> <p>Example Confluence Syntax:</p> <pre><code>h1. Heading 1\nh2. Heading 2\n\n* List item 1\n* List item 2\n\n[Link to Confluence|https://en.wikipedia.org/wiki/Wiki#Editing]\n</code></pre>"},{"location":"platform/engines/wiki/#conclusion","title":"Conclusion","text":"<p>The Wiki Engine in the codbex platform empowers users to create, edit, and collaborate on documentation and content seamlessly. With support for both Markdown and Confluence syntaxes, users can choose their preferred markup language and leverage the WYSIWYG editor for a flexible and user-friendly experience.</p>"},{"location":"platform/languages/","title":"Languages","text":""},{"location":"platform/languages/#introduction","title":"Introduction","text":"<p>The codbex platform supports multiple programming languages for building applications. This documentation provides an overview of the languages supported with a focus on JavaScript (ES6 syntax), TypeScript, Python, and ABAP.</p>"},{"location":"platform/languages/#supported-languages","title":"Supported Languages","text":""},{"location":"platform/languages/#javascript-es6-syntax","title":"JavaScript (ES6 Syntax)","text":"<p>The platform fully supports JavaScript, including the ES6 syntax. Developers can leverage modern JavaScript features to build scalable and maintainable applications. The platform also provides a rich set of APIs and tools for JavaScript development.</p> <p>Example</p> <pre><code>// ES6 Arrow Function\nconst addNumbers = (a, b) =&gt; a + b;\n\n// Destructuring Assignment\nconst { firstName, lastName } = person;\n</code></pre>"},{"location":"platform/languages/#typescript","title":"TypeScript","text":"<p>TypeScript, a superset of JavaScript, is also supported in the platform. Developers can use TypeScript to write strongly-typed code, enhancing code quality and maintainability. The TypeScript compiler is integrated into the platform, allowing seamless development.</p> <p>Example</p> <pre><code>// TypeScript Interface\ninterface Person {\n  firstName: string;\n  lastName: string;\n}\n\n// Strongly-typed Function\nfunction greet(person: Person): string {\n  return `Hello, ${person.firstName} ${person.lastName}!`;\n}\n</code></pre>"},{"location":"platform/languages/#python","title":"Python","text":"<p>The platform extends its support to Python, enabling developers to write Python applications and scripts. The platform includes a Python runtime, and developers can utilize the standard Python libraries for various functionalities.</p> <p>Example</p> <pre><code># Python Function\ndef add_numbers(a, b):\n    return a + b\n\n# List Comprehension\nsquares = [x**2 for x in range(10)]\n</code></pre>"},{"location":"platform/languages/#abap","title":"ABAP","text":"<p>ABAP (Advanced Business Application Programming) support is provided through open-abap and abaplint transpiler. Developers can write ABAP code and transpile it to JavaScript for execution on the codbex platform.</p> <p>Example</p> <pre><code>\" ABAP Example\nDATA(lv_text) = 'Hello World from ABAP!'.\nWRITE: / lv_text.\n</code></pre> <p>The transpilation process converts ABAP code to JavaScript, allowing seamless integration into the platform.</p>"},{"location":"platform/languages/#sap-hana-xs-classic-aka-xsk-project","title":"SAP HANA XS Classic (a.k.a XSK project)","text":"<p>The codbex supports SAP HANA XS Classic development using and furter developing the XSK project. Developers can utilize XSK to manage database artifacts, define data models, develop server side XSJS services, and perform data provisioning within the SAP HANA XS Classic environment.</p> <p>For more information on SAP HANA XS Classic development with the codbex platform, refer to the XSK project documentation.</p> <p>Example</p> <pre><code>$.response.contentType=\"application/json\";\n$.response.setBody(\"Hello World from XSJS\");\n$.response.status = $.net.http.OK;\n</code></pre>"},{"location":"platform/sdk/","title":"SDK API Guide","text":"<p>Welcome to the API Index for the SDK utility classes. Here, you'll find information on how to use various APIs from the different modules of the SDK.</p>"},{"location":"platform/sdk/#sdk-api-documentation-index","title":"SDK API Documentation Index","text":"<p>Explore detailed documentation for various SDK APIs available in the codbex platform:</p> <ul> <li>BPM</li> <li>CMS</li> <li>Core</li> <li>Database</li> <li>Extensions</li> <li>Git</li> <li>HTTP</li> <li>Indexing</li> <li>IO</li> <li>Job</li> <li>Log</li> <li>Mail</li> <li>Messaging</li> <li>Net</li> <li>Platform</li> <li>Security</li> <li>Template</li> <li>Test</li> <li>Utils</li> </ul> <p>Feel free to click on each API to access its detailed documentation and learn more about its functions, use cases, and examples. The SDK documentation provides comprehensive information to assist developers in leveraging the platform's capabilities through these APIs.</p>"},{"location":"platform/sdk/bpm/","title":"BPM Module","text":"<p>Welcome to the BPM (Business Process Management) API Module documentation. This API allows you to interact with business process models, start processes, manage execution contexts, and more.</p>"},{"location":"platform/sdk/bpm/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Usage</li> <li>Delegate Parameters</li> <li>Functions</li> <li>Objects</li> </ol>"},{"location":"platform/sdk/bpm/#basic-usage","title":"Basic Usage","text":"<p>The Basic Usage section provides information on how to use the BPM API to start processes and create delegates.</p>"},{"location":"platform/sdk/bpm/#delegate-parameters","title":"Delegate Parameters","text":"<p>The Delegate Parameters section explains the parameters required for creating delegates in the BPM API.</p>"},{"location":"platform/sdk/bpm/#functions","title":"Functions","text":"<p>The Functions section lists the available functions provided by the BPM API along with their descriptions and return types.</p>"},{"location":"platform/sdk/bpm/#objects","title":"Objects","text":"<p>The Objects section describes the objects used in the BPM API, such as the ExecutionContext object.</p>"},{"location":"platform/sdk/bpm/process/","title":"Process","text":""},{"location":"platform/sdk/bpm/process/#basic-usage","title":"Basic Usage","text":"<p>The BPM API allows you to interact with business process models, start processes, and manage execution contexts.</p>"},{"location":"platform/sdk/bpm/process/#starting-a-process","title":"Starting a Process","text":"<p>To start a process, you can use the <code>start</code> function provided by the BPM API.</p>"},{"location":"platform/sdk/bpm/process/#ecma6","title":"ECMA6","text":"<pre><code>import { process } from \"sdk/bpm\"\n\nprocess.start(\"hello\", {\n    variable1: \"value1\"\n});\n</code></pre>"},{"location":"platform/sdk/bpm/process/#creating-a-business-process-model","title":"Creating a Business Process Model","text":"<p>To create a new business process model, follow these steps:</p> <ul> <li>Create a new BPMN file.</li> <li>Open the BPMN file with a code editor.</li> <li>Paste the process definition XML into the file.</li> </ul> <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&lt;definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\"&gt;\n  &lt;process id=\"hello\" name=\"hello\" isExecutable=\"true\"&gt;\n    &lt;startEvent id=\"sid-3334E861-7999-4B89-B8B0-11724BA17A3E\"/&gt;\n    &lt;serviceTask id=\"sayHello\" name=\"SayHello\" flowable:class=\"org.eclipse.dirigible.components.engine.bpm.flowable.delegate.DirigibleCallDelegate\"&gt;\n      &lt;extensionElements&gt;\n        &lt;flowable:field name=\"handler\"&gt;\n          &lt;flowable:string&gt;&lt;![CDATA[bpmFlows/hello.js]]&gt;&lt;/flowable:string&gt;\n        &lt;/flowable:field&gt;\n      &lt;/extensionElements&gt;\n    &lt;/serviceTask&gt;\n    &lt;sequenceFlow id=\"sid-797626AE-B2F6-4C00-ABEE-FB30ADC177E4\" sourceRef=\"sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" targetRef=\"sayHello\"/&gt;\n    &lt;endEvent id=\"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\"/&gt;\n    &lt;sequenceFlow id=\"sid-645847E8-C959-48BD-816B-2E9CC4A2F08A\" sourceRef=\"sayHello\" targetRef=\"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\"/&gt;\n  &lt;/process&gt;\n  &lt;bpmndi:BPMNDiagram id=\"BPMNDiagram_hello\"&gt;\n    &lt;bpmndi:BPMNPlane bpmnElement=\"hello\" id=\"BPMNPlane_hello\"&gt;\n      &lt;bpmndi:BPMNShape bpmnElement=\"sid-3334E861-7999-4B89-B8B0-11724BA17A3E\" id=\"BPMNShape_sid-3334E861-7999-4B89-B8B0-11724BA17A3E\"&gt;\n        &lt;omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"103.0\" y=\"78.0\"/&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape bpmnElement=\"sayHello\" id=\"BPMNShape_sayHello\"&gt;\n        &lt;omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"300.0\" y=\"105.0\"/&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape bpmnElement=\"sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\" id=\"BPMNShape_sid-70B488C1-384A-4E19-8091-1B12D1AEC7FD\"&gt;\n        &lt;omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"562.0\" y=\"78.0\"/&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNEdge bpmnElement=\"sid-797626AE-B2F6-4C00-ABEE-FB30ADC177E4\" id=\"BPMNEdge_sid-797626AE-B2F6-4C00-ABEE-FB30ADC177E4\"&gt;\n        &lt;omgdi:waypoint x=\"133.0\" y=\"93.0\"/&gt;\n        &lt;omgdi:waypoint x=\"201.0\" y=\"93.0\"/&gt;\n        &lt;omgdi:waypoint x=\"201.0\" y=\"145.0\"/&gt;\n        &lt;omgdi:waypoint x=\"300.0\" y=\"145.0\"/&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge bpmnElement=\"sid-645847E8-C959-48BD-816B-2E9CC4A2F08A\" id=\"BPMNEdge_sid-645847E8-C959-48BD-816B-2E9CC4A2F08A\"&gt;\n        &lt;omgdi:waypoint x=\"400.0\" y=\"145.0\"/&gt;\n        &lt;omgdi:waypoint x=\"466.0\" y=\"145.0\"/&gt;\n        &lt;omgdi:waypoint x=\"466.0\" y=\"92.0\"/&gt;\n        &lt;omgdi:waypoint x=\"562.0\" y=\"92.0\"/&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n    &lt;/bpmndi:BPMNPlane&gt;\n  &lt;/bpmndi:BPMNDiagram&gt;\n&lt;/definitions&gt;\n</code></pre>"},{"location":"platform/sdk/bpm/process/#creating-a-delegate","title":"Creating a Delegate","text":"<p>In a new project called bpmFlows, add a delegate file named hello.js or hello.mjs with the following content:</p> <pre><code>// manipulating process variables throughout the execution context\nimport { process } from \"sdk/bpm\";\n\n// Hello from the Enterprise Javascript delegate\nconsole.info(\"Hello from the Javascript Engine!\");\n\nlet execution = process.getExecutionContext();\n\nprocess.setVariable(execution.getId(), \"variable2\", \"value2\");\ntry {\n    console.info(\"variable1: \" + process.getVariable(execution.getId(), \"variable1\"));\n    console.info(\"variable2: \" + process.getVariable(execution.getId(), \"variable2\"));\n} catch (e) {\n    if (e instanceof Error) {\n        console.error(e.message);\n    } else {\n        console.error(\"Something went wrong\", e)\n    }\n\n}\n</code></pre>"},{"location":"platform/sdk/bpm/process/#delegate-parameters","title":"Delegate Parameters","text":"<ul> <li>Type: ServiceType</li> <li>Class: org.eclipse.dirigible.bpm.flowable.DirigibleCallDelegate</li> <li>Field for Service Callback: handler (e.g., 'bpmFlows/hello.js')</li> <li>Field for Service Engine Type: type (e.g., 'javascript')</li> </ul>"},{"location":"platform/sdk/bpm/process/#functions","title":"Functions","text":"Function Description Returns start(key, parameters) Starts a process by its key and initial parameters and returns the process instance id string getExecutionContext() Returns the execution context object ExecutionContext"},{"location":"platform/sdk/bpm/process/#objects","title":"Objects","text":""},{"location":"platform/sdk/bpm/process/#executioncontext","title":"ExecutionContext","text":"Function Description Returns getId() Returns the id from the execution context string isActive() Returns the isActive flag from the execution context string isScope() Returns the isScope flag from the execution context string isConcurrent() Returns the isConcurrent flag from the execution context string isEnded() Returns the isEnded flag from the execution context string isEventScope() Returns the isEventScope flag from the execution context string isMultiInstanceRoot() Returns the isMultiInstanceRoot flag from the execution context string isCountEnabled() Returns the isCountEnabled flag from the execution context string suspensionState() Returns the suspensionState flag from the execution context string startTime() Returns the start time from the execution context string eventSubscriptionCount() Returns the event subscription count from the execution context string taskCount() Returns the task count from the execution context string jobCount() Returns the job count from the execution context string timerJobCount() Returns the timer job count from the execution context string suspendedJobCount() Returns the suspended job count from the execution context string deadLetterJobCount() Returns the dead letter job count from the execution context string variableCount() Returns the variable count from the execution context string identityLinkCount() Returns the identity link count from the execution context string processDefinitionId() Returns the process definition id from the execution context string processDefinitionKey() Returns the process definition key from the execution context string activityId() Returns the activity id from the execution context string processInstanceId() Returns the process instance id from the execution context string parentId() Returns the parent process id from the execution context string rootProcessInstanceId() Returns the root process instance id from the execution context string forcedUpdate() Returns the forcedUpdate flag from the execution context string revision() Returns the revision from the execution context string tenantId() Returns the tenant id from the execution context string"},{"location":"platform/sdk/cms/","title":"CMS Module","text":"<p>Welcome to the CMS (Content Management System) API Module documentation compliant with the CMIS (Content Management Interoperability Services) specification. This API allows you to interact with content repositories, create, retrieve, update, and delete documents and folders, and manage content streams.</p>"},{"location":"platform/sdk/cms/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Usage</li> <li>Functions</li> <li>Objects</li> <li>Constants</li> </ol>"},{"location":"platform/sdk/cms/#basic-usage","title":"Basic Usage","text":"<p>The Basic Usage section provides examples of how to use the CMS API to perform common tasks such as listing children of a folder, creating documents, and retrieving content.</p>"},{"location":"platform/sdk/cms/#functions","title":"Functions","text":"<p>The Functions section lists the available functions provided by the CMS API along with their descriptions and return types.</p>"},{"location":"platform/sdk/cms/#objects","title":"Objects","text":"<p>The Objects section describes the objects used in the CMS API, such as Session, RepositoryInfo, ObjectFactory, Folder, Document, and ContentStream.</p>"},{"location":"platform/sdk/cms/#constants","title":"Constants","text":"<p>The Constants section lists the predefined constants used in the CMS API, including base properties, document properties, folder properties, relationship properties, versioning states, and object types.</p>"},{"location":"platform/sdk/cms/cmis/","title":"CMIS","text":"<p>The CMIS API provides a set of functions and objects compliant with the CMIS (Content Management Interoperability Services) specification, allowing users to interact with content repositories. This documentation covers the usage, functions, objects, and constants available in the CMS API.</p>"},{"location":"platform/sdk/cms/cmis/#basic-usage","title":"Basic Usage","text":"<p>The Basic Usage section demonstrates how to use the CMS API to perform common tasks:</p> ECMA6 <pre><code>import { cmis } from \"sdk/cms\";\nimport { response } from \"sdk/http\";\nimport { streams } from \"sdk/io\";\n\nlet cmisSession = cmis.getSession();\n\nlet rootFolder = cmisSession.getRootFolder();\n\nlet children = rootFolder.getChildren();\nresponse.println(\"Listing the children of the root folder:\");\nfor (let i in children) {\n    response.println(\"Object ID: \" + children[i].getId());\n    response.println(\"Object Name: \" + children[i].getName());\n}\n\nconst textFileName = \"test.txt\";\nresponse.println(\"Creating a simple text file, \" + textFileName);\n\nconst mimetype = \"text/plain; charset=UTF-8\";\nlet content = \"This is some test content.\";\nlet filename = textFileName;\n\nlet outputStream = streams.createByteArrayOutputStream();\noutputStream.writeText(content);\nlet bytes = outputStream.getBytes();\nlet inputStream = streams.createByteArrayInputStream(bytes);\n\nlet contentStream = cmisSession.getObjectFactory().createContentStream(filename, bytes.length, mimetype, inputStream);\n\nlet properties = { \"cmis:name\": \"\", \"cmis:objectTypeId\": \"\" };\nproperties[cmis.OBJECT_TYPE_ID] = cmis.OBJECT_TYPE_DOCUMENT;\nproperties[cmis.NAME] = filename;\nlet newDocument;\ntry {\n    newDocument = rootFolder.createDocument(properties, contentStream, cmis.VERSIONING_STATE_MAJOR);\n} catch (e) {\n    response.println(\"Error: \" + e);\n}\nlet documentId = newDocument?.getId();\n\nresponse.println(\"Document ID: \" + documentId);\n\nchildren = rootFolder.getChildren();\nresponse.println(\"Listing the children of the root folder again:\");\nfor (let i in children) {\n    response.println(\"Object ID: \" + children[i].getId());\n    response.println(\"Object Name: \" + children[i].getName());\n    response.println(\"Object Type: \" + JSON.stringify(children[i].getType().getId().toString()));\n}\n\n// Get the contents of the file\nlet doc;\nif (documentId !== undefined) {\n    doc = cmisSession.getObject(documentId);\n} else {\n    response.println(\"No content\");\n}\n\ncontentStream = doc?.getContentStream(); // returns null if the document has no content\nif (contentStream !== null) {\n    content = contentStream.getStream().readText();\n    response.println(\"Contents of \" + filename + \" are: \" + content);\n} else {\n    response.println(\"No content.\");\n}\n\nresponse.println(\"Deleting the newly created document\");\nif (newDocument) {\n    newDocument.delete();\n}\n\nresponse.flush();\nresponse.close();\n</code></pre>"},{"location":"platform/sdk/cms/cmis/#functions","title":"Functions","text":"Function Description Returns getSession() Returns the CMIS connection session to the CMS system Session getAccessDefinitions(path, method) Returns array of CMIS access constraints for the specified path and method array of objects"},{"location":"platform/sdk/cms/cmis/#objects","title":"Objects","text":""},{"location":"platform/sdk/cms/cmis/#session","title":"Session","text":"Function Description Returns getRepositoryInfo() Returns the information about the CMIS repository RepositoryInfo getObjectFactory() Returns the ObjectFactory utility ObjectFactory getRootFolder() Returns the root folder of this repository Folder getObject() Returns a CMIS Object by name CmisObject getObjectByPath() Returns a CMIS Object by path CmisObject"},{"location":"platform/sdk/cms/cmis/#repositoryinfo","title":"RepositoryInfo","text":"Function Description Returns getId() Returns the ID of the CMIS repository string getName() Returns the Name of the CMIS repository string"},{"location":"platform/sdk/cms/cmis/#objectfactory","title":"ObjectFactory","text":"Function Description Returns createContentStream() Returns a newly created ContentStream object ContentStream"},{"location":"platform/sdk/cms/cmis/#contentstream","title":"ContentStream","text":"Function Description Returns getStream() Returns the InputStream of this ContentStream object streams.InputStream"},{"location":"platform/sdk/cms/cmis/#cmisobject","title":"CmisObject","text":"Function Description Returns getId() Returns the ID of this CmisObject string getName() Returns the Name of this CmisObject string getType() Returns the Type of this CmisObject string delete() Deletes this CmisObject string rename(newName) Renames this CmisObject -"},{"location":"platform/sdk/cms/cmis/#folder","title":"Folder","text":"Function Description Returns getId() Returns the ID of this Folder string getName() Returns the Name of this Folder string getPath() Returns the Path of this Folder string createFolder(properties) Creates a new folder under this Folder Folder createDocument(properties, contentStream, versioningState) Creates a new document under this Folder Document getChildren() Returns an array of CmisObject sub-elements of this Folder array of CmisObject isRootFolder() Returns true if this Folder is a root folder and false otherwise boolean getFolderParent() Returns the parent Folder of this Folder Folder delete() Deletes this Folder string rename(newName) Renames this Folder -"},{"location":"platform/sdk/cms/cmis/#document","title":"Document","text":"Function Description Returns getId() Returns the ID of this Document string getName() Returns the Name of this Document string delete() Deletes this Document string getContentStream() Returns the ContentStream representing the contents of this Document ContentStream rename(newName) Renames this Document -"},{"location":"platform/sdk/cms/cmis/#constants","title":"Constants","text":""},{"location":"platform/sdk/cms/cmis/#base","title":"Base","text":"Constant Description Type NAME Value is cmis:name string OBJECT_ID Value is cmis:objectId string OBJECT_TYPE_ID Value is cmis:objectTypeId string BASE_TYPE_ID Value is cmis:baseTypeId string CREATED_BY Value is cmis:createdBy string CREATION_DATE Value is cmis:creationDate string LAST_MODIFIED_BY Value is cmis:lastModifiedBy string LAST_MODIFICATION_DATE Value is cmis:lastModificationDate string CHANGE_TOKEN Value is mis:changeToken string"},{"location":"platform/sdk/cms/cmis/#document_1","title":"Document","text":"Constant Description Type IS_IMMUTABLE Value is cmis:isImmutable string IS_LATEST_VERSION Value is cmis:isLatestVersion string IS_MAJOR_VERSION Value is cmis:isMajorVersion string IS_LATEST_MAJOR_VERSION Value is cmis:isLatestMajorVersion string VERSION_LABEL Value is cmis:versionLabel string VERSION_SERIES_ID Value is ccmis:versionSeriesId string IS_VERSION_SERIES_CHECKED_OUT Value is cmis:isVersionSeriesCheckedOut string VERSION_SERIES_CHECKED_OUT_BY Value is cmis:versionSeriesCheckedOutBy string VERSION_SERIES_CHECKED_OUT_ID Value is cmis:versionSeriesCheckedOutId string CHECKIN_COMMENT Value is cmis:checkinComment string CONTENT_STREAM_LENGTH Value is cmis:contentStreamLength string CONTENT_STREAM_MIME_TYPE Value is cmis:contentStreamMimeType string CONTENT_STREAM_FILE_NAME Value is cmis:contentStreamFileName string CONTENT_STREAM_ID Value is cmis:contentStreamId string"},{"location":"platform/sdk/cms/cmis/#folder_1","title":"Folder","text":"Constant Description Type PARENT_ID Value is cmis:parentId string ALLOWED_CHILD_OBJECT_TYPE_IDS Value is cmis:allowedChildObjectTypeIds string PATH Value is cmis:path string"},{"location":"platform/sdk/cms/cmis/#relationship","title":"Relationship","text":"Constant Description Type SOURCE_ID Value is cmis:sourceId string TARGET_ID Value is cmis:targetId string"},{"location":"platform/sdk/cms/cmis/#relationship_1","title":"Relationship","text":"Constant Description Type POLICY_TEXT Value is cmis:policyText string"},{"location":"platform/sdk/cms/cmis/#versioning-states","title":"Versioning States","text":"Constant Description Type VERSIONING_STATE_NONE Value is none string VERSIONING_STATE_MAJOR Value is major string VERSIONING_STATE_MINOR Value is minor string VERSIONING_STATE_CHECKEDOUT Value is checkedout string"},{"location":"platform/sdk/cms/cmis/#object-types","title":"Object Types","text":"Constant Description Type OBJECT_TYPE_DOCUMENT Value is cmis:document string OBJECT_TYPE_FOLDER Value is cmis:folder string OBJECT_TYPE_RELATIONSHIP Value is cmis:relationship string OBJECT_TYPE_POLICY Value is cmis:policy string OBJECT_TYPE_ITEM Value is cmis:item string OBJECT_TYPE_SECONDARY Value is cmis:secondary string"},{"location":"platform/sdk/core/","title":"Core Module","text":"<p>The <code>Core</code> module of the SDK utility classes provides various APIs to interact with configuration settings, context, environment variables, and global variables.</p>"},{"location":"platform/sdk/core/#configuration-api","title":"Configuration API","text":"<p>The <code>Configurations</code> class provides methods for working with configuration settings.</p>"},{"location":"platform/sdk/core/#configuration-api-documentation","title":"Configuration API Documentation","text":""},{"location":"platform/sdk/core/#context-api","title":"Context API","text":"<p>The <code>Context</code> class provides a simple interface to interact with the context in your application.</p>"},{"location":"platform/sdk/core/#context-api-documentation","title":"Context API Documentation","text":""},{"location":"platform/sdk/core/#environment-variables-api","title":"Environment Variables API","text":"<p>The <code>Env</code> class allows you to work with environment variables.</p>"},{"location":"platform/sdk/core/#environment-variables-api-documentation","title":"Environment Variables API Documentation","text":""},{"location":"platform/sdk/core/#globals-api","title":"Globals API","text":"<p>The <code>Globals</code> class provides an interface for working with global variables.</p>"},{"location":"platform/sdk/core/#globals-api-documentation","title":"Globals API Documentation","text":""},{"location":"platform/sdk/core/configurations/","title":"Configurations","text":""},{"location":"platform/sdk/core/configurations/#overview","title":"Overview","text":"<p>The <code>Configurations</code> class provides a set of methods to interact with the configuration settings using the platform. This API allows you to retrieve, modify, and manage configuration parameters for your application.</p>"},{"location":"platform/sdk/core/configurations/#methods","title":"Methods","text":""},{"location":"platform/sdk/core/configurations/#get","title":"get","text":"<pre><code>public static get(key: string, defaultValue?: string): string | undefined\n</code></pre> <p>Retrieve the value associated with the specified configuration key. If the key is not found, it returns the specified default value, or undefined if not provided.</p> <p>Example</p> <pre><code>const value = Configurations.get(\"myConfigKey\", \"defaultValue\");\nconsole.log(value); // Output: \"configuredValue\" or \"defaultValue\" if not found\n</code></pre>"},{"location":"platform/sdk/core/configurations/#set","title":"set","text":"<pre><code>public static set(key: string, value: string): void\n</code></pre> <p>Set the value for the specified configuration key.</p> <p>Example</p> <pre><code>Configurations.set(\"myConfigKey\", \"configuredValue\");\n</code></pre>"},{"location":"platform/sdk/core/configurations/#remove","title":"remove","text":"<pre><code>public static remove(key: string): void\n</code></pre> <p>Remove the configuration entry associated with the specified key.</p> <p>Example</p> <pre><code>Configurations.remove(\"myConfigKey\");\n</code></pre>"},{"location":"platform/sdk/core/configurations/#getkeys","title":"getKeys","text":"<pre><code>public static getKeys(): string[]\n</code></pre> <p>Retrieve an array of all configuration keys.</p> <p>Example</p> <pre><code>const keys = Configurations.getKeys();\nconsole.log(keys); // Output: [\"key1\", \"key2\", ...]\n</code></pre>"},{"location":"platform/sdk/core/configurations/#load","title":"load","text":"<pre><code>public static load(path: string): void\n</code></pre> <p>Load configuration settings from the specified path.</p> <p>Example</p> <pre><code>Configurations.load(\"/path/to/config/file.properties\");\n</code></pre>"},{"location":"platform/sdk/core/configurations/#update","title":"update","text":"<pre><code>public static update(): void\n</code></pre> <p>Update the configuration settings.</p> <p>Example</p> <pre><code>Configurations.update();\n</code></pre>"},{"location":"platform/sdk/core/configurations/#getos","title":"getOS","text":"<pre><code>public static getOS(): string\n</code></pre> <p>Retrieve the operating system name.</p> <p>Example</p> <pre><code>const osName = Configurations.getOS();\nconsole.log(osName); // Output: \"Windows\", \"Mac OS X\", \"Linux\", \"Solaris\", etc.\n</code></pre>"},{"location":"platform/sdk/core/configurations/#isoswindows","title":"isOSWindows","text":"<pre><code>public static isOSWindows(): boolean\n</code></pre> <p>Check if the operating system is Windows.</p> <p>Example</p> <pre><code>const isWindows = Configurations.isOSWindows();\nconsole.log(isWindows); // Output: true or false\n</code></pre>"},{"location":"platform/sdk/core/configurations/#isosmac","title":"isOSMac","text":"<pre><code>public static isOSMac(): boolean\n</code></pre> <p>Check if the operating system is Mac OS.</p> <p>Example</p> <pre><code>const isMac = Configurations.isOSMac();\nconsole.log(isMac); // Output: true or false\n</code></pre>"},{"location":"platform/sdk/core/configurations/#isosunix","title":"isOSUNIX","text":"<pre><code>public static isOSUNIX(): boolean\n</code></pre> <p>Check if the operating system is UNIX-based.</p> <p>Example</p> <pre><code>const isUNIX = Configurations.isOSUNIX();\nconsole.log(isUNIX); // Output: true or false\n</code></pre>"},{"location":"platform/sdk/core/configurations/#isossolaris","title":"isOSSolaris","text":"<pre><code>public static isOSSolaris(): boolean\n</code></pre> <p>Check if the operating system is Solaris.</p> <p>Example</p> <pre><code>const isSolaris = Configurations.isOSSolaris();\nconsole.log(isSolaris); // Output: true or false\n</code></pre>"},{"location":"platform/sdk/core/configurations/#functions","title":"Functions","text":"Function Description Returns get(key, defaultValue)() Returns the value for the specified key, or the default value string set(key, value) Sets a value, for the specified key - getKeys() Returns an arrays of keys array of string load(path) Loads a configuration from a properties file at path - update() Updates the loaded configurations -"},{"location":"platform/sdk/core/context/","title":"Context","text":""},{"location":"platform/sdk/core/context/#overview","title":"Overview","text":"<p>The <code>Context</code> class provides a simple interface to interact with the context in your application. This API allows you to retrieve and set values within the application context.</p>"},{"location":"platform/sdk/core/context/#methods","title":"Methods","text":""},{"location":"platform/sdk/core/context/#get","title":"get","text":"<pre><code>public static get(name: string): any | undefined\n</code></pre> <p>Retrieve the value associated with the specified context name.</p> <p>Example</p> <pre><code>const value = Context.get(\"myContextName\");\nconsole.log(value); // Output: The value associated with \"myContextName\" or undefined if not found\n</code></pre>"},{"location":"platform/sdk/core/context/#set","title":"set","text":"<pre><code>public static set(name: string, value: any): void\n</code></pre> <p>Set the value for the specified context name.</p> <p>Example</p> <pre><code>Context.set(\"myContextName\", \"contextValue\");\n</code></pre>"},{"location":"platform/sdk/core/context/#functions","title":"Functions","text":"Function Description Returns get(key) Returns the value per key from the context parameters string set(key, value) Sets the value per key to the context parameters -"},{"location":"platform/sdk/core/env/","title":"Env","text":""},{"location":"platform/sdk/core/env/#overview","title":"Overview","text":"<p>The <code>Env</code> class provides an interface for interacting with environment variables from the platform. This API allows you to retrieve specific environment variable values and list all environment variables.</p>"},{"location":"platform/sdk/core/env/#methods","title":"Methods","text":""},{"location":"platform/sdk/core/env/#get","title":"get","text":"<pre><code>public static get(name: string): string | undefined\n</code></pre> <p>Retrieve the value associated with the specified environment variable name.</p> <p>Example</p> <pre><code>const value = Env.get(\"MY_ENV_VARIABLE\");\nconsole.log(value); // Output: The value associated with \"MY_ENV_VARIABLE\" or undefined if not found\n</code></pre>"},{"location":"platform/sdk/core/env/#list","title":"list","text":"<pre><code>public static list(): EnvValues\n</code></pre> <p>List all environment variables as key-value pairs.</p> <p>Example</p> <pre><code>const envVariables = Env.list();\nconsole.log(envVariables); // Output: { \"VAR1\": \"value1\", \"VAR2\": \"value2\", ... }\n</code></pre>"},{"location":"platform/sdk/core/env/#functions","title":"Functions","text":"Function Description Returns get(key) Returns the value per key from the environments variables string list() Returns the list of the environments variables in JSON formatted string string"},{"location":"platform/sdk/core/globals/","title":"Globals","text":""},{"location":"platform/sdk/core/globals/#overview","title":"Overview","text":"<p>The <code>Globals</code> class provides an interface for interacting with global variables from the platform. This API allows you to retrieve specific global variable values, set global variables, and list all global variables.</p>"},{"location":"platform/sdk/core/globals/#methods","title":"Methods","text":""},{"location":"platform/sdk/core/globals/#get","title":"get","text":"<pre><code>public static get(name: string): string | undefined\n</code></pre> <p>Retrieve the value associated with the specified global variable name.</p> <p>Example</p> <pre><code>const value = Globals.get(\"MY_GLOBAL_VARIABLE\");\nconsole.log(value); // Output: The value associated with \"MY_GLOBAL_VARIABLE\" or undefined if not found\n</code></pre>"},{"location":"platform/sdk/core/globals/#set","title":"set","text":"<pre><code>public static set(name: string, value: string): void\n</code></pre> <p>Set the value for the specified global variable name.</p> <p>Example</p> <pre><code>Globals.set(\"MY_GLOBAL_VARIABLE\", \"globalValue\");\n</code></pre>"},{"location":"platform/sdk/core/globals/#list","title":"list","text":"<pre><code>public static list(): GlobalsValues\n</code></pre> <p>List all global variables as key-value pairs.</p> <p>Example</p> <pre><code>const globalVariables = Globals.list();\nconsole.log(globalVariables); // Output: { \"VAR1\": \"value1\", \"VAR2\": \"value2\", ... }\n</code></pre>"},{"location":"platform/sdk/core/globals/#functions","title":"Functions","text":"Function Description Returns get(key) Returns the value per key from the environments variables string list() Returns the list of the environments variables in JSON formatted string string"},{"location":"platform/sdk/db/","title":"Database Module","text":"<p>The Database module provides various APIs to interact with databases, perform SQL operations, and manage data stores. Below are the key components and APIs available in this module:</p>"},{"location":"platform/sdk/db/#dao-data-access-object-api","title":"DAO (Data Access Object) API","text":"<p>The <code>DAO</code> API facilitates database operations using an Object-Relational Mapping (ORM) approach. It includes methods for executing SQL statements, creating, updating, and deleting entities, as well as handling database tables.</p>"},{"location":"platform/sdk/db/#dao-api-documentation","title":"DAO API Documentation","text":""},{"location":"platform/sdk/db/#insert-api","title":"Insert API","text":"<p>The <code>Insert</code> API allows the execution of SQL <code>INSERT</code> statements. It provides a simple way to insert data into a database table.</p>"},{"location":"platform/sdk/db/#insert-api-documentation","title":"Insert API Documentation","text":""},{"location":"platform/sdk/db/#procedure-api","title":"Procedure API","text":"<p>The <code>Procedure</code> API enables the execution of stored procedures. It includes methods for creating and executing stored procedures with parameters.</p>"},{"location":"platform/sdk/db/#procedure-api-documentation","title":"Procedure API Documentation","text":""},{"location":"platform/sdk/db/#query-api","title":"Query API","text":"<p>The <code>Query</code> API provides functionality to execute SQL <code>SELECT</code> statements. It simplifies querying the database and retrieving result sets.</p>"},{"location":"platform/sdk/db/#query-api-documentation","title":"Query API Documentation","text":""},{"location":"platform/sdk/db/#sequence-api","title":"Sequence API","text":"<p>The <code>Sequence</code> API offers methods for working with sequences in the database. It includes operations for obtaining the next value, creating, and dropping sequences.</p>"},{"location":"platform/sdk/db/#sequence-api-documentation","title":"Sequence API Documentation","text":""},{"location":"platform/sdk/db/#update-api","title":"Update API","text":"<p>The <code>Update</code> API allows the execution of SQL <code>UPDATE</code> statements. It provides a straightforward way to update records in a database table.</p>"},{"location":"platform/sdk/db/#update-api-documentation","title":"Update API Documentation","text":""},{"location":"platform/sdk/db/#store-api","title":"Store API","text":"<p>The <code>Store</code> API simplifies interactions with a data store. It includes methods for saving, listing, retrieving, and removing entries from the data store.</p>"},{"location":"platform/sdk/db/#store-api-documentation","title":"Store API Documentation","text":"<p>Explore each API documentation for detailed information on methods, parameters, and usage examples. These APIs collectively empower developers to efficiently work with databases and manage data storage.</p>"},{"location":"platform/sdk/db/dao/","title":"Data Access Object (DAO)","text":""},{"location":"platform/sdk/db/dao/#introduction","title":"Introduction","text":"<p>The provided code defines a Data Access Object (DAO) module in JavaScript/TypeScript for interfacing with a database. The module is intended to work with a specific Object-Relational Mapping (ORM) configuration.</p> <p>Here's an overview of the main functionalities:</p>"},{"location":"platform/sdk/db/dao/#dao-constructor","title":"DAO Constructor:","text":"<pre><code>export function DAO(orm, logCtxName, dataSourceName) { ... }\n</code></pre> <p>Parameters:</p> <ul> <li><code>orm</code>: The Object-Relational Mapping configuration.</li> <li><code>logCtxName</code>: (Optional) Log context name.</li> <li><code>dataSourceName</code>: (Optional) Data source name.</li> </ul>"},{"location":"platform/sdk/db/dao/#methods","title":"Methods","text":""},{"location":"platform/sdk/db/dao/#executesqlbuilder-parameterbindings","title":"execute(sqlBuilder, parameterBindings)","text":"<p>Executes SQL statements (select, insert, update) based on the provided SQL builder and parameter bindings.</p> <p>Parameters:</p> <ul> <li><code>sqlBuilder</code>: SQL statement builder.</li> <li><code>parameterBindings</code>: Parameter bindings for the SQL statement.</li> </ul>"},{"location":"platform/sdk/db/dao/#notifyevent","title":"notify(event)","text":"<p>Notifies an event.</p> <p>Parameters:</p> <ul> <li><code>event</code>: Event to notify.</li> </ul>"},{"location":"platform/sdk/db/dao/#createsqlentityentity","title":"createSQLEntity(entity)","text":"<p>Prepares a JSON object for insertion into the database.</p>"},{"location":"platform/sdk/db/dao/#createentityresultsetentry-entitypropertynames","title":"createEntity(resultSetEntry, entityPropertyNames)","text":"<p>Creates an entity as a JSON object from a ResultSet current row.</p>"},{"location":"platform/sdk/db/dao/#validateentityentity-skip","title":"validateEntity(entity, skip)","text":"<p>Validates the entity based on mandatory properties.</p>"},{"location":"platform/sdk/db/dao/#insert_entity","title":"insert(_entity)","text":"<p>Inserts an entity or an array of entities into the database.</p>"},{"location":"platform/sdk/db/dao/#updateentity","title":"update(entity)","text":"<p>Updates an entity in the database.</p>"},{"location":"platform/sdk/db/dao/#remove","title":"remove(...)","text":"<p>Deletes an entity by ID or an array of IDs, or deletes all entities.</p>"},{"location":"platform/sdk/db/dao/#expandexpansionpath-context","title":"expand(expansionPath, context)","text":"<p>Expands an entity based on the provided expansion path and context.</p>"},{"location":"platform/sdk/db/dao/#findid-expand-select","title":"find(id, expand, select)","text":"<p>Reads a single entity by ID, parsed into a JSON object. It supports expansion and selection.</p>"},{"location":"platform/sdk/db/dao/#countsettings","title":"count(settings)","text":"<p>Counts entities based on the provided settings.</p>"},{"location":"platform/sdk/db/dao/#listsettings","title":"list(settings)","text":"<p>Lists entities based on the provided settings, supporting expansion and selection.</p>"},{"location":"platform/sdk/db/dao/#existstable","title":"existsTable()","text":"<p>Checks if the table associated with the ORM definition exists.</p>"},{"location":"platform/sdk/db/dao/#createtable","title":"createTable()","text":"<p>Creates the table associated with the ORM definition.</p>"},{"location":"platform/sdk/db/dao/#droptabledropidsequence","title":"dropTable(dropIdSequence)","text":"<p>Drops the table associated with the ORM definition, optionally dropping the ID sequence.</p>"},{"location":"platform/sdk/db/dao/#additional-functions","title":"Additional Functions:","text":""},{"location":"platform/sdk/db/dao/#isnotemptyarrayarray","title":"isNotEmptyArray(array)","text":"<p>Checks if an array is not empty.</p>"},{"location":"platform/sdk/db/dao/#createodefinition-logctxname-datasourcename","title":"create(oDefinition, logCtxName, dataSourceName)","text":"<p>Creates a DAO instance based on the ORM definition.</p>"},{"location":"platform/sdk/db/dao/#daoodefinition-logctxname-datasourcename","title":"dao(oDefinition, logCtxName, dataSourceName)","text":"<p>Alias for the create function.</p>"},{"location":"platform/sdk/db/dao/#usage-example","title":"Usage Example:","text":"<pre><code>import { dao } from \"sdk/db\";\n\n//create a DAO from configuration\nconst customers = dao.create({\n    table: \"CUSTOMERS\",\n    properties: [{\n        name: \"id\",\n        column: \"ID\",\n        type: \"BIGINT\",\n        id: true\n    }, {\n        name: \"orgName\",\n        column: \"ORG_NAME\",\n        type: \"VARCHAR\",\n        required: true\n    }, {\n        name: \"employeesNumber\",\n        column: \"ORG_EMP_NUM\",\n        type: \"INTEGER\",\n        required: true\n    }, {\n        name: \"orgDescription\",\n        column: \"ORG_DESCR\",\n        type: \"VARCHAR\",\n        required: false\n    }]\n});\n\n//Create CUSTOMERS table\ncustomers.createTable();\n\ntry {\n\n    //Create a new customer entity\n    let customerId = customers.insert({\n        orgName: \"ACME\",\n        employeesNumber: 1000\n    });\n\n    //List all customer entities\n    let customersList = customers.list();\n\n    //Get a particular customer entity by its id\n    let customer = customers.find(customerId);\n\n    //Update a customer entity property\n    customer.orgDescription = \"ACME is a company\";\n    customers.update(customer);\n\n    //Delete a customer entity\n    customers.remove(customerId);\n\n} finally {\n    //Drop CUSTOMERS table\n    customers.dropTable();\n}\n</code></pre>"},{"location":"platform/sdk/db/dao/#advance-usage","title":"Advance Usage","text":""},{"location":"platform/sdk/db/dao/#filter","title":"\"Filter\"","text":"<p>To apply filter use the <code>$filter</code> property with the followin options:</p> <ul> <li><code>equals</code> - exact match of the given value(s) (single value or array of values).</li> <li><code>notEquals</code> - exclude for the given value(s) from the result (single value or array of values).</li> <li><code>contains</code> - performs <code>LIKE %...%</code> operation (case sensitive).</li> <li><code>greaterThan</code> - performs comparison operation (<code>&gt;</code>).</li> <li><code>lessThan</code> - performs comparison operation (<code>&lt;</code>).</li> <li><code>greaterThanOrEqual</code> - performs comparison operation (<code>&gt;=</code>).</li> <li><code>lessThanOrEqual</code> - performs comparison operation (<code>&lt;=</code>).</li> </ul> <p>Note</p> <p>The \"key\" (e.g. <code>Team</code>, <code>Country</code>, etc.) should match a property in the DAO definition.</p> DAO Definition <pre><code>import { dao as daoApi } from \"sdk/db\";\n\nconst dao = daoApi.create({\n    table: \"SAMPLE_EMPLOYEE\",\n    properties: [\n    {\n        name: \"Id\",\n        column: \"EMPLOYEE_ID\",\n        type: \"INTEGER\",\n        id: true,\n        autoIncrement: true,\n    },\n    {\n        name: \"Name\",\n        column: \"EMPLOYEE_NAME\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Email\",\n        column: \"EMPLOYEE_EMAIL\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Phone\",\n        column: \"EMPLOYEE_PHONE\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Address\",\n        column: \"EMPLOYEE_ADDRESS\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"PostCode\",\n        column: \"EMPLOYEE_POSTCODE\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"City\",\n        column: \"EMPLOYEE_CITY\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Country\",\n        column: \"EMPLOYEE_COUNTRY\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Team\",\n        column: \"EMPLOYEE_TEAM\",\n        type: \"INTEGER\",\n    },\n    {\n        name: \"Company\",\n        column: \"EMPLOYEE_COMPANY\",\n        type: \"INTEGER\",\n    },\n    {\n        name: \"Vacation\",\n        column: \"EMPLOYEE_VACATION\",\n        type: \"INTEGER\",\n    }\n    ]\n});\n</code></pre> <pre><code>const data = dao.list({\n    $filter: {\n        equals: {\n            Team: [11, 12, 18]\n        },\n        notEquals: {\n            Country: [\"Indonesia\", \"Chile\"],\n            Company: 4\n        },\n        contains: {\n            Address: \"Cedar St\",\n            City: \"town\"\n        },\n        greaterThan: {\n            Vacation: 20\n        },\n        // lessThan: {\n        //     Vacation: 35\n        // },\n        // greaterThanOrEqual: {\n        //     Vacation: 20\n        // },\n        lessThanOrEqual: {\n            Vacation: 35\n        }\n    }\n});\n</code></pre> <p>The following SQL is being executed:</p> <pre><code>SELECT * FROM \"SAMPLE_EMPLOYEE\"\nWHERE (\"EMPLOYEE_TEAM\" IN (?, ?, ?))\n    AND (\"EMPLOYEE_COUNTRY\" NOT IN (?, ?))\n    AND (\"EMPLOYEE_COMPANY\" != ?)\n    AND (\"EMPLOYEE_ADDRESS\" LIKE ?)\n    AND (\"EMPLOYEE_CITY\" LIKE ?)\n    AND (\"EMPLOYEE_VACATION\" &gt; ?)\n    AND (\"EMPLOYEE_VACATION\" &lt;= ?)\n</code></pre>"},{"location":"platform/sdk/db/dao/#select","title":"\"Select\"","text":"<p>The <code>$select</code> property can be used to select only a set of properties/columns from the DAO query.</p> <p>Note</p> <p>The selected \"key\" (e.g. <code>Name</code>, <code>Country</code>, etc.) should match a property in the DAO definition.</p> DAO Definition <pre><code>import { dao as daoApi } from \"sdk/db\";\n\nconst dao = daoApi.create({\n    table: \"SAMPLE_EMPLOYEE\",\n    properties: [\n    {\n        name: \"Id\",\n        column: \"EMPLOYEE_ID\",\n        type: \"INTEGER\",\n        id: true,\n        autoIncrement: true,\n    },\n    {\n        name: \"Name\",\n        column: \"EMPLOYEE_NAME\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Email\",\n        column: \"EMPLOYEE_EMAIL\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Phone\",\n        column: \"EMPLOYEE_PHONE\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Address\",\n        column: \"EMPLOYEE_ADDRESS\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"PostCode\",\n        column: \"EMPLOYEE_POSTCODE\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"City\",\n        column: \"EMPLOYEE_CITY\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Country\",\n        column: \"EMPLOYEE_COUNTRY\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Team\",\n        column: \"EMPLOYEE_TEAM\",\n        type: \"INTEGER\",\n    },\n    {\n        name: \"Company\",\n        column: \"EMPLOYEE_COMPANY\",\n        type: \"INTEGER\",\n    },\n    {\n        name: \"Vacation\",\n        column: \"EMPLOYEE_VACATION\",\n        type: \"INTEGER\",\n    }\n    ]\n});\n</code></pre> <pre><code>const data = dao.list({\n    $select: [\"Name\", \"Country\", \"Company\"]\n});\n</code></pre> <p>The following SQL is being executed:</p> <pre><code>SELECT \"EMPLOYEE_NAME\", \"EMPLOYEE_COUNTRY\", \"EMPLOYEE_COMPANY\" FROM \"SAMPLE_EMPLOYEE\"\n</code></pre>"},{"location":"platform/sdk/db/dao/#limit-and-offset","title":"\"Limit and Offset\"","text":"<p>The <code>$limit</code> and <code>$offset</code> properties can be used together to achieve pagination of large data sets.</p> <p>Note</p> <p>Values for both <code>$limit</code> and <code>$offset</code> should be provided.</p> DAO Definition <pre><code>import { dao as daoApi } from \"sdk/db\";\n\nconst dao = daoApi.create({\n    table: \"SAMPLE_EMPLOYEE\",\n    properties: [\n    {\n        name: \"Id\",\n        column: \"EMPLOYEE_ID\",\n        type: \"INTEGER\",\n        id: true,\n        autoIncrement: true,\n    },\n    {\n        name: \"Name\",\n        column: \"EMPLOYEE_NAME\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Email\",\n        column: \"EMPLOYEE_EMAIL\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Phone\",\n        column: \"EMPLOYEE_PHONE\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Address\",\n        column: \"EMPLOYEE_ADDRESS\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"PostCode\",\n        column: \"EMPLOYEE_POSTCODE\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"City\",\n        column: \"EMPLOYEE_CITY\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Country\",\n        column: \"EMPLOYEE_COUNTRY\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Team\",\n        column: \"EMPLOYEE_TEAM\",\n        type: \"INTEGER\",\n    },\n    {\n        name: \"Company\",\n        column: \"EMPLOYEE_COMPANY\",\n        type: \"INTEGER\",\n    },\n    {\n        name: \"Vacation\",\n        column: \"EMPLOYEE_VACATION\",\n        type: \"INTEGER\",\n    }\n    ]\n});\n</code></pre> <pre><code>const data = dao.list({\n    $limit: 50,\n    $offset: 0,\n});\n</code></pre> <p>The following SQL is being executed:</p> <pre><code>SELECT * FROM \"SAMPLE_EMPLOYEE\" LIMIT 50 OFFSET 0\n</code></pre>"},{"location":"platform/sdk/db/dao/#sort-and-order","title":"\"Sort and Order\"","text":"<p>The <code>$sort</code> and <code>$order</code> properties can be used together to sort the returned data.</p> <p>Note</p> <ul> <li><code>$sort</code> - comma separated list of \"keys\" matching properties in the DAO definition (e.g. <code>Country,City</code>).</li> <li><code>$order</code> - either <code>asc</code> or <code>desc</code> (the default order is <code>asc</code>).</li> </ul> DAO Definition <pre><code>import { dao as daoApi } from \"sdk/db\";\n\nconst dao = daoApi.create({\n    table: \"SAMPLE_EMPLOYEE\",\n    properties: [\n    {\n        name: \"Id\",\n        column: \"EMPLOYEE_ID\",\n        type: \"INTEGER\",\n        id: true,\n        autoIncrement: true,\n    },\n    {\n        name: \"Name\",\n        column: \"EMPLOYEE_NAME\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Email\",\n        column: \"EMPLOYEE_EMAIL\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Phone\",\n        column: \"EMPLOYEE_PHONE\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Address\",\n        column: \"EMPLOYEE_ADDRESS\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"PostCode\",\n        column: \"EMPLOYEE_POSTCODE\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"City\",\n        column: \"EMPLOYEE_CITY\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Country\",\n        column: \"EMPLOYEE_COUNTRY\",\n        type: \"VARCHAR\",\n    },\n    {\n        name: \"Team\",\n        column: \"EMPLOYEE_TEAM\",\n        type: \"INTEGER\",\n    },\n    {\n        name: \"Company\",\n        column: \"EMPLOYEE_COMPANY\",\n        type: \"INTEGER\",\n    },\n    {\n        name: \"Vacation\",\n        column: \"EMPLOYEE_VACATION\",\n        type: \"INTEGER\",\n    }\n    ]\n});\n</code></pre> <pre><code>const data = dao.list({\n    $sort: \"Country,City\",\n    $order: \"desc\",\n});\n</code></pre> <p>The following SQL is being executed:</p> <pre><code>SELECT * FROM \"SAMPLE_EMPLOYEE\" ORDER BY \"EMPLOYEE_COUNTRY\" DESC, \"EMPLOYEE_CITY\" DESC\n</code></pre>"},{"location":"platform/sdk/db/dao/#functions","title":"Functions","text":"Function Description Returns create(configuration, loggerName?) Creates new DAO instances from <code>configuraiton</code> JS object, which can be either standard ORM definition or a standard table definition DAO"},{"location":"platform/sdk/db/dao/#objects","title":"Objects","text":""},{"location":"platform/sdk/db/dao/#dao","title":"DAO","text":"Function Description Returns insert(entity) inserts array or entity and returns id (or ids of array of entities was supplied as input) any list(querySettings?) lists entities optionally constrained with the supplied query settings Array find(id, expand?, select?) returns an entity by its id(if any), optionally expanding inline the associations defined in expand and optionally constraining the entitiy properties to those specified in select Object update(entity) updates a persistent entity and returns for its dao chaining DAO remove(?id) delete entity by id, or array of ids, or delete all (if not argument is provided). --- count() returns the number of persisted entities Number createTable() Creates a table for persisting entities --- dropTable() Drops the entities table ---"},{"location":"platform/sdk/db/database/","title":"Database","text":""},{"location":"platform/sdk/db/database/#introduction","title":"Introduction","text":"<p>The Database API provides a set of functions to interact with databases in the codbex platform environment. This guide will walk you through the available methods and how to use them effectively.</p>"},{"location":"platform/sdk/db/database/#methods","title":"Methods","text":""},{"location":"platform/sdk/db/database/#getdatasources","title":"getDataSources()","text":"<p>Retrieves the available data sources.</p> <pre><code>// Example\nconst datasources = getDataSources();\nconsole.log(datasources); // Outputs an array of available data sources\n</code></pre>"},{"location":"platform/sdk/db/database/#getmetadatadatasourcename","title":"getMetadata(datasourceName?)","text":"<p>Retrieves metadata for a specified data source. If no data source is provided, it retrieves metadata for all data sources.</p> <pre><code>// Example\nconst metadata = getMetadata(\"exampleDS\");\nconsole.log(metadata); // Outputs metadata for the specified data source\n</code></pre>"},{"location":"platform/sdk/db/database/#getproductnamedatasourcename","title":"getProductName(datasourceName?)","text":"<p>Retrieves the product name for a specified data source. If no data source is provided, it retrieves the product name for all data sources.</p> <pre><code>// Example\nconst productName = getProductName(\"exampleDS\");\nconsole.log(productName); // Outputs the product name for the specified data source\n</code></pre>"},{"location":"platform/sdk/db/database/#getconnectiondatasourcename","title":"getConnection(datasourceName?)","text":"<p>Establishes a connection to the specified data source. If no data source is provided, it establishes a connection to the default data source.</p> <pre><code>// Example\nconst connection = getConnection(\"exampleDS\");\n// Use the connection object for further database operations\n</code></pre>"},{"location":"platform/sdk/db/database/#ishanadatabaseconnection","title":"isHanaDatabase(connection)","text":"<p>Checks if the provided database connection is of type SAP HANA database.</p> <pre><code>// Example\nconst connection = ...; // obtain a database connection\nconst isHana = isHanaDatabase(connection);\n</code></pre>"},{"location":"platform/sdk/db/database/#readblobvaluevalue","title":"readBlobValue(value)","text":"<p>Reads a Blob value and returns it as a byte array.</p> <pre><code>// Example\nconst blobValue = ...; // obtain a Blob value\nconst byteArray = readBlobValue(blobValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#createblobvaluenative-value","title":"createBlobValue(native, value)","text":"<p>Creates a new Blob value based on the provided byte array. The creation process depends on the database type.</p> <pre><code>// Example\nconst nativeConnection = ...; // obtain the native connection\nconst byteValue = ...; // byte array data\nconst blob = createBlobValue(nativeConnection, byteValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#readclobvaluevalue","title":"readClobValue(value)","text":"<p>Reads a Clob value and returns it as a string.</p> <pre><code>// Example\nconst clobValue = ...; // obtain a Clob value\nconst stringValue = readClobValue(clobValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#createclobvaluenative-value","title":"createClobValue(native, value)","text":"<p>Creates a new Clob value based on the provided string. The creation process depends on the database type.</p> <pre><code>// Example\nconst nativeConnection = ...; // obtain the native connection\nconst stringValue = ...; // string data\nconst clob = createClobValue(nativeConnection, stringValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#readnclobvaluevalue","title":"readNClobValue(value)","text":"<p>Reads an NClob value and returns it as a string.</p> <pre><code>// Example\nconst nclobValue = ...; // obtain an NClob value\nconst stringValue = readNClobValue(nclobValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#createnclobvaluenative-value","title":"createNClobValue(native, value)","text":"<p>Creates a new NClob value based on the provided string. The creation process depends on the database type.</p> <pre><code>// Example\nconst nativeConnection = ...; // obtain the native connection\nconst stringValue = ...; // string data\nconst nclob = createNClobValue(nativeConnection, stringValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#getdatevaluevalue","title":"getDateValue(value)","text":"<p>Converts the input value to a JavaScript Date object. If the input is a string, it is parsed into a Date.</p> <pre><code>// Example\nconst dateString = \"2024-02-25\";\nconst dateObject = getDateValue(dateString);\n</code></pre>"},{"location":"platform/sdk/db/database/#sqltypes-constants","title":"SQLTypes Constants","text":"<p>The <code>SQLTypes</code> constants represent various SQL data types. Each constant is associated with a specific integer value that corresponds to a particular SQL data type. Below is a description of each constant:</p> <ul> <li><code>BOOLEAN</code> (16): Represents the SQL <code>BOOLEAN</code> data type.</li> <li><code>DATE</code> (91): Represents the SQL <code>DATE</code> data type.</li> <li><code>TIME</code> (92): Represents the SQL <code>TIME</code> data type.</li> <li><code>TIMESTAMP</code> (93): Represents the SQL <code>TIMESTAMP</code> data type.</li> <li><code>DOUBLE</code> (8): Represents the SQL <code>DOUBLE</code> data type.</li> <li><code>FLOAT</code> (6): Represents the SQL <code>FLOAT</code> data type.</li> <li><code>REAL</code> (7): Represents the SQL <code>REAL</code> data type.</li> <li><code>TINYINT</code> (-6): Represents the SQL <code>TINYINT</code> data type.</li> <li><code>SMALLINT</code> (5): Represents the SQL <code>SMALLINT</code> data type.</li> <li><code>INTEGER</code> (4): Represents the SQL <code>INTEGER</code> data type.</li> <li><code>BIGINT</code> (-5): Represents the SQL <code>BIGINT</code> data type.</li> <li><code>VARCHAR</code> (12): Represents the SQL <code>VARCHAR</code> data type.</li> <li><code>CHAR</code> (1): Represents the SQL <code>CHAR</code> data type.</li> <li><code>CLOB</code> (2005): Represents the SQL <code>CLOB</code> data type.</li> <li><code>BLOB</code> (2004): Represents the SQL <code>BLOB</code> data type.</li> <li><code>VARBINARY</code> (-3): Represents the SQL <code>VARBINARY</code> data type.</li> <li><code>DECIMAL</code> (3): Represents the SQL <code>DECIMAL</code> data type.</li> <li><code>ARRAY</code> (2003): Represents the SQL <code>ARRAY</code> data type.</li> <li><code>NVARCHAR</code> (-9): Represents the SQL <code>NVARCHAR</code> data type.</li> <li><code>NCLOB</code> (2011): Represents the SQL <code>NCLOB</code> data type.</li> <li><code>BIT</code> (-7): Represents the SQL <code>BIT</code> data type.</li> </ul>"},{"location":"platform/sdk/db/database/#connection-object-methods","title":"Connection Object Methods","text":"<p>The <code>Connection</code> object provides methods for various operations on the database connection.</p>"},{"location":"platform/sdk/db/database/#preparestatementsql","title":"prepareStatement(sql)","text":"<p>Creates a <code>PreparedStatement</code> object for the given SQL query.</p> <pre><code>// Example\nconst preparedStatement = connection.prepareStatement(\"SELECT * FROM example_table\");\n</code></pre>"},{"location":"platform/sdk/db/database/#preparecallsql","title":"prepareCall(sql)","text":"<p>Creates a <code>CallableStatement</code> object for the given SQL query.</p> <pre><code>// Example\nconst callableStatement = connection.prepareCall(\"call example_procedure()\");\n</code></pre>"},{"location":"platform/sdk/db/database/#close","title":"close()","text":"<p>Closes the database connection.</p> <pre><code>// Example\nconnection.close();\n</code></pre>"},{"location":"platform/sdk/db/database/#commit","title":"commit()","text":"<p>Commits the current transaction.</p> <pre><code>// Example\nconnection.commit();\n</code></pre>"},{"location":"platform/sdk/db/database/#getautocommit","title":"getAutoCommit()","text":"<p>Retrieves the current auto-commit mode.</p> <pre><code>// Example\nconst autoCommitMode = connection.getAutoCommit();\nconsole.log(autoCommitMode); // Outputs true or false\n</code></pre>"},{"location":"platform/sdk/db/database/#getcatalog","title":"getCatalog()","text":"<p>Retrieves the current catalog name.</p> <pre><code>// Example\nconst catalogName = connection.getCatalog();\nconsole.log(catalogName); // Outputs the catalog name\n</code></pre>"},{"location":"platform/sdk/db/database/#getschema","title":"getSchema()","text":"<p>Retrieves the current schema name.</p> <pre><code>// Example\nconst schemaName = connection.getSchema();\nconsole.log(schemaName); // Outputs the schema name\n</code></pre>"},{"location":"platform/sdk/db/database/#gettransactionisolation","title":"getTransactionIsolation()","text":"<p>Retrieves the current transaction isolation level.</p> <pre><code>// Example\nconst isolationLevel = connection.getTransactionIsolation();\nconsole.log(isolationLevel); // Outputs the transaction isolation level\n</code></pre>"},{"location":"platform/sdk/db/database/#isclosed","title":"isClosed()","text":"<p>Checks whether the connection is closed.</p> <pre><code>// Example\nconst isClosed = connection.isClosed();\nconsole.log(isClosed); // Outputs true or false\n</code></pre>"},{"location":"platform/sdk/db/database/#isreadonly","title":"isReadOnly()","text":"<p>Checks whether the connection is in read-only mode.</p> <pre><code>// Example\nconst isReadOnly = connection.isReadOnly();\nconsole.log(isReadOnly); // Outputs true or false\n</code></pre>"},{"location":"platform/sdk/db/database/#isvalid","title":"isValid()","text":"<p>Checks whether the connection is valid.</p> <pre><code>// Example\nconst isValid = connection.isValid();\nconsole.log(isValid); // Outputs true or false\n</code></pre>"},{"location":"platform/sdk/db/database/#rollback","title":"rollback()","text":"<p>Rolls back the current transaction.</p> <pre><code>// Example\nconnection.rollback();\n</code></pre>"},{"location":"platform/sdk/db/database/#setautocommitautocommit","title":"setAutoCommit(autoCommit)","text":"<p>Sets the auto-commit mode for the connection.</p> <pre><code>// Example\nconnection.setAutoCommit(true); // or connection.setAutoCommit(false);\n</code></pre>"},{"location":"platform/sdk/db/database/#setcatalogcatalog","title":"setCatalog(catalog)","text":"<p>Sets the current catalog name for the connection.</p> <pre><code>// Example\nconnection.setCatalog(\"new_catalog\");\n</code></pre>"},{"location":"platform/sdk/db/database/#setreadonlyreadonly","title":"setReadOnly(readOnly)","text":"<p>Sets the read-only mode for the connection.</p> <pre><code>// Example\nconnection.setReadOnly(true); // or connection.setReadOnly(false);\n</code></pre>"},{"location":"platform/sdk/db/database/#setschemaschema","title":"setSchema(schema)","text":"<p>Sets the current schema name for the connection.</p> <pre><code>// Example\nconnection.setSchema(\"new_schema\");\n</code></pre>"},{"location":"platform/sdk/db/database/#settransactionisolationtransactionisolation","title":"setTransactionIsolation(transactionIsolation)","text":"<p>Sets the transaction isolation level for the connection.</p> <pre><code>// Example\nconnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n</code></pre> <p>These methods provide essential functionalities for managing and interacting with the database connection in the platform. Depending on your use case, you may need to utilize these methods to control transactions, handle connection properties, and more.</p>"},{"location":"platform/sdk/db/database/#preparedstatement-object-methods","title":"PreparedStatement Object Methods","text":"<p>The <code>PreparedStatement</code> object provides methods for managing and executing precompiled SQL statements.</p>"},{"location":"platform/sdk/db/database/#close_1","title":"close()","text":"<p>Closes the prepared statement.</p> <pre><code>// Example\npreparedStatement.close();\n</code></pre>"},{"location":"platform/sdk/db/database/#getresultset","title":"getResultSet()","text":"<p>Retrieves the result set of the prepared statement.</p> <pre><code>// Example\nconst resultSet = preparedStatement.getResultSet();\n</code></pre>"},{"location":"platform/sdk/db/database/#execute","title":"execute()","text":"<p>Executes the SQL query.</p> <pre><code>// Example\nconst result = preparedStatement.execute();\n</code></pre>"},{"location":"platform/sdk/db/database/#executequery","title":"executeQuery()","text":"<p>Executes a <code>SELECT</code> SQL query and returns a <code>ResultSet</code> object.</p> <pre><code>// Example\nconst result = preparedStatement.execute();\n</code></pre>"},{"location":"platform/sdk/db/database/#executeupdate","title":"executeUpdate()","text":"<p>Executes an SQL <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> query.</p> <pre><code>// Example\nconst rowCount = preparedStatement.executeUpdate();\n</code></pre>"},{"location":"platform/sdk/db/database/#setnullindex-sqltype","title":"setNull(index, sqlType)","text":"<p>Sets a parameter to <code>NULL</code>.</p> <pre><code>// Example\npreparedStatement.setNull(1, SQLTypes.INTEGER);\n</code></pre>"},{"location":"platform/sdk/db/database/#setbinarystreamparameter-inputstream-length","title":"setBinaryStream(parameter, inputStream, length)","text":"<p>Sets a binary stream as a parameter.</p> <pre><code>// Example\npreparedStatement.setBinaryStream(1, inputStream, length);\n</code></pre>"},{"location":"platform/sdk/db/database/#setbooleanindex-value","title":"setBoolean(index, value)","text":"<p>Sets a Boolean parameter.</p> <pre><code>// Example\npreparedStatement.setBoolean(1, true);\n</code></pre>"},{"location":"platform/sdk/db/database/#setbyteindex-value","title":"setByte(index, value)","text":"<p>Sets a Byte parameter.</p> <pre><code>// Example\npreparedStatement.setByte(1, 42);\n</code></pre>"},{"location":"platform/sdk/db/database/#setblobindex-value","title":"setBlob(index, value)","text":"<p>Sets a Blob parameter.</p> <pre><code>// Example\npreparedStatement.setBlob(1, blobValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#setclobindex-value","title":"setClob(index, value)","text":"<p>Sets a Clob parameter.</p> <pre><code>// Example\npreparedStatement.setClob(1, clobValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#setnclobindex-value","title":"setNClob(index, value)","text":"<p>Sets an NClob parameter.</p> <pre><code>// Example\npreparedStatement.setNClob(1, nclobValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#setbytesnativeindex-value","title":"setBytesNative(index, value)","text":"<p>Sets a native byte parameter.</p> <pre><code>// Example\npreparedStatement.setBytesNative(1, byteArray);\n</code></pre>"},{"location":"platform/sdk/db/database/#setbytesindex-value","title":"setBytes(index, value)","text":"<p>Sets a byte array as a parameter.</p> <pre><code>// Example\npreparedStatement.setBytes(1, byteArray);\n</code></pre>"},{"location":"platform/sdk/db/database/#setdateindex-value","title":"setDate(index, value)","text":"<p>Sets a Date parameter.</p> <pre><code>// Example\npreparedStatement.setDate(1, new Date());\n</code></pre>"},{"location":"platform/sdk/db/database/#setdoubleindex-value","title":"setDouble(index, value)","text":"<p>Sets a Double parameter.</p> <pre><code>// Example\npreparedStatement.setDouble(1, 3.14);\n</code></pre>"},{"location":"platform/sdk/db/database/#setfloatindex-value","title":"setFloat(index, value)","text":"<p>Sets a Float parameter.</p> <pre><code>// Example\npreparedStatement.setFloat(1, 2.718);\n</code></pre>"},{"location":"platform/sdk/db/database/#setintindex-value","title":"setInt(index, value)","text":"<p>Sets an Integer parameter.</p> <pre><code>// Example\npreparedStatement.setInt(1, 42);\n</code></pre>"},{"location":"platform/sdk/db/database/#setlongindex-value","title":"setLong(index, value)","text":"<p>Sets a Long parameter.</p> <pre><code>// Example\npreparedStatement.setLong(1, 123456789);\n</code></pre>"},{"location":"platform/sdk/db/database/#setshortindex-value","title":"setShort(index, value)","text":"<p>Sets a Short parameter.</p> <pre><code>// Example\npreparedStatement.setShort(1, 7);\n</code></pre>"},{"location":"platform/sdk/db/database/#setstringindex-value","title":"setString(index, value)","text":"<p>Sets a String parameter.</p> <pre><code>// Example\npreparedStatement.setString(1, \"example\");\n</code></pre>"},{"location":"platform/sdk/db/database/#settimeindex-value","title":"setTime(index, value)","text":"<p>Sets a Time parameter.</p> <pre><code>// Example\npreparedStatement.setTime(1, new Date());\n</code></pre>"},{"location":"platform/sdk/db/database/#settimestampindex-value","title":"setTimestamp(index, value)","text":"<p>Sets a Timestamp parameter.</p> <pre><code>// Example\npreparedStatement.setTimestamp(1, new Date());\n</code></pre>"},{"location":"platform/sdk/db/database/#setbigdecimalindex-value","title":"setBigDecimal(index, value)","text":"<p>Sets a BigDecimal parameter.</p> <pre><code>// Example\npreparedStatement.setBigDecimal(1, bigDecimalValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#setnstringindex-value","title":"setNString(index, value)","text":"<p>Sets an NString parameter.</p> <pre><code>// Example\npreparedStatement.setNString(1, \"example\");\n</code></pre>"},{"location":"platform/sdk/db/database/#addbatch","title":"addBatch()","text":"<p>Adds the current set of parameters to the batch for later execution.</p> <pre><code>// Example\npreparedStatement.addBatch();\n</code></pre>"},{"location":"platform/sdk/db/database/#executebatch","title":"executeBatch()","text":"<p>Executes the batch of commands.</p> <pre><code>// Example\nconst results = preparedStatement.executeBatch();\n</code></pre>"},{"location":"platform/sdk/db/database/#getmetadata","title":"getMetaData()","text":"<p>Retrieves the metadata for the prepared statement.</p> <pre><code>// Example\nconst metaData = preparedStatement.getMetaData();\n</code></pre>"},{"location":"platform/sdk/db/database/#getmoreresults","title":"getMoreResults()","text":"<p>Moves to the next result set, if available.</p> <pre><code>// Example\nconst hasMoreResults = preparedStatement.getMoreResults();\n</code></pre>"},{"location":"platform/sdk/db/database/#getparametermetadata","title":"getParameterMetaData()","text":"<p>Retrieves the parameter metadata for the prepared statement.</p> <pre><code>// Example\nconst parameterMetaData = preparedStatement.getParameterMetaData();\n</code></pre>"},{"location":"platform/sdk/db/database/#getsqlwarning","title":"getSQLWarning()","text":"<p>Retrieves the first warning reported by calls on this statement.</p> <pre><code>// Example\nconst sqlWarning = preparedStatement.getSQLWarning();\n</code></pre>"},{"location":"platform/sdk/db/database/#isclosed_1","title":"isClosed()","text":"<p>Checks if the prepared statement is closed.</p> <pre><code>// Example\nconst isClosed = preparedStatement.isClosed();\n</code></pre> <p>These methods provide a comprehensive set of functionalities for handling prepared statements, setting parameters, executing queries, and managing result sets. Depending on your use case, you can leverage these methods to interact with your database effectively.</p>"},{"location":"platform/sdk/db/database/#callablestatement-object-methods","title":"CallableStatement Object Methods","text":"<p>The <code>CallableStatement</code> object provides methods for executing SQL stored procedures.</p>"},{"location":"platform/sdk/db/database/#getresultset_1","title":"getResultSet()","text":"<p>Retrieves the result set of the callable statement.</p> <pre><code>// Example\nconst resultSet = callableStatement.getResultSet();\n</code></pre>"},{"location":"platform/sdk/db/database/#executequery_1","title":"executeQuery()","text":"<p>Executes a stored procedure that returns a result set.</p> <pre><code>// Example\nconst resultSet = callableStatement.executeQuery();\n</code></pre>"},{"location":"platform/sdk/db/database/#executeupdate_1","title":"executeUpdate()","text":"<p>Executes a stored procedure that performs an update.</p> <pre><code>// Example\nconst rowCount = callableStatement.executeUpdate();\n</code></pre>"},{"location":"platform/sdk/db/database/#registeroutparameterparameterindex-sqltype","title":"registerOutParameter(parameterIndex, sqlType)","text":"<p>Registers the output parameter with the given SQL type.</p> <pre><code>// Example\ncallableStatement.registerOutParameter(1, SQLTypes.INTEGER);\n</code></pre>"},{"location":"platform/sdk/db/database/#registeroutparameterbyscaleparameterindex-sqltype-scale","title":"registerOutParameterByScale(parameterIndex, sqlType, scale)","text":"<p>Registers the output parameter with the given SQL type and scale.</p> <pre><code>// Example\ncallableStatement.registerOutParameterByScale(1, SQLTypes.DECIMAL, 2);\n</code></pre>"},{"location":"platform/sdk/db/database/#registeroutparameterbytypenameparameterindex-sqltype-typename","title":"registerOutParameterByTypeName(parameterIndex, sqlType, typeName)","text":"<p>Registers the output parameter with the given SQL type and type name.</p> <pre><code>// Example\ncallableStatement.registerOutParameterByTypeName(1, SQLTypes.VARCHAR, \"VARCHAR\");\n</code></pre>"},{"location":"platform/sdk/db/database/#wasnull","title":"wasNull()","text":"<p>Determines if the last column read was NULL.</p> <pre><code>// Example\nconst isNull = callableStatement.wasNull();\n</code></pre>"},{"location":"platform/sdk/db/database/#getstringparameter","title":"getString(parameter)","text":"<p>Retrieves the value of the specified parameter as a String.</p> <pre><code>// Example\nconst value = callableStatement.getString(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getbooleanparameter","title":"getBoolean(parameter)","text":"<p>Retrieves the value of the specified parameter as a Boolean.</p> <pre><code>// Example\nconst value = callableStatement.getBoolean(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getbyteparameter","title":"getByte(parameter)","text":"<p>Retrieves the value of the specified parameter as a Byte.</p> <pre><code>// Example\nconst value = callableStatement.getByte(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getshortparameter","title":"getShort(parameter)","text":"<p>Retrieves the value of the specified parameter as a Short.</p> <pre><code>// Example\nconst value = callableStatement.getShort(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getintparameter","title":"getInt(parameter)","text":"<p>Retrieves the value of the specified parameter as an Integer.</p> <pre><code>// Example\nconst value = callableStatement.getInt(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getlongparameter","title":"getLong(parameter)","text":"<p>Retrieves the value of the specified parameter as a Long.</p> <pre><code>// Example\nconst value = callableStatement.getLong(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getfloatparameter","title":"getFloat(parameter)","text":"<p>Retrieves the value of the specified parameter as a Float.</p> <pre><code>// Example\nconst value = callableStatement.getFloat(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getdoubleparameter","title":"getDouble(parameter)","text":"<p>Retrieves the value of the specified parameter as a Double.</p> <pre><code>// Example\nconst value = callableStatement.getDouble(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getdateparameter","title":"getDate(parameter)","text":"<p>Retrieves the value of the specified parameter as a Date.</p> <pre><code>// Example\nconst value = callableStatement.getDate(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#gettimeparameter","title":"getTime(parameter)","text":"<p>Retrieves the value of the specified parameter as a Time.</p> <pre><code>// Example\nconst value = callableStatement.getTime(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#gettimestampparameter","title":"getTimestamp(parameter)","text":"<p>Retrieves the value of the specified parameter as a Timestamp.</p> <pre><code>// Example\nconst value = callableStatement.getTimestamp(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getobjectparameter","title":"getObject(parameter)","text":"<p>Retrieves the value of the specified parameter as an Object.</p> <pre><code>// Example\nconst value = callableStatement.getObject(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getbigdecimalparameter","title":"getBigDecimal(parameter)","text":"<p>Retrieves the value of the specified parameter as a BigDecimal.</p> <pre><code>// Example\nconst value = callableStatement.getBigDecimal(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getrefparameter","title":"getRef(parameter)","text":"<p>Retrieves the value of the specified parameter as a Ref.</p> <pre><code>// Example\nconst value = callableStatement.getRef(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getbytesparameter","title":"getBytes(parameter)","text":"<p>Retrieves the value of the specified parameter as a byte array.</p> <pre><code>// Example\nconst value = callableStatement.getBytes(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getbytesnativeparameter","title":"getBytesNative(parameter)","text":"<p>Retrieves the value of the specified parameter as a byte array in native format.</p> <pre><code>// Example\nconst value = callableStatement.getBytesNative(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getblobparameter","title":"getBlob(parameter)","text":"<p>Retrieves the value of the specified parameter as a Blob.</p> <pre><code>// Example\nconst value = callableStatement.getBlob(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getblobnativeparameter","title":"getBlobNative(parameter)","text":"<p>Retrieves the value of the specified parameter as a Blob in native format.</p> <pre><code>// Example\nconst value = callableStatement.getBlobNative(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getclobparameter","title":"getClob(parameter)","text":"<p>Retrieves the value of the specified parameter as a Clob.</p> <pre><code>// Example\nconst value = callableStatement.getClob(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getnclobparameter","title":"getNClob(parameter)","text":"<p>Retrieves the value of the specified parameter as an NClob.</p> <pre><code>// Example\nconst value = callableStatement.getNClob(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getnstringparameter","title":"getNString(parameter)","text":"<p>Retrieves the value of the specified parameter as an NString.</p> <pre><code>// Example\nconst value = callableStatement.getNString(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getarrayparameter","title":"getArray(parameter)","text":"<p>Retrieves the value of the specified parameter as an Array.</p> <pre><code>// Example\nconst value = callableStatement.getArray(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#geturlparameter","title":"getURL(parameter)","text":"<p>Retrieves the value of the specified parameter as a URL.</p> <pre><code>// Example\nconst value = callableStatement.getURL(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getrowidparameter","title":"getRowId(parameter)","text":"<p>Retrieves the value of the specified parameter as a RowId.</p> <pre><code>// Example\nconst value = callableStatement.getRowId(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getsqlxmlparameter","title":"getSQLXML(parameter)","text":"<p>Retrieves the value of the specified parameter as an SQLXML.</p> <pre><code>// Example\nconst value = callableStatement.getSQLXML(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#seturlparameter-value","title":"setURL(parameter, value)","text":"<p>Sets the value of the specified parameter as a URL.</p> <pre><code>// Example\ncallableStatement.setURL(1, \"https://example.com\");\n</code></pre>"},{"location":"platform/sdk/db/database/#setnullparameter-sqltypestr-typename","title":"setNull(parameter, sqlTypeStr, typeName)","text":"<p>Sets the value of the specified parameter to NULL.</p> <pre><code>// Example\ncallableStatement.setNull(1, SQLTypes.INTEGER);\n</code></pre>"},{"location":"platform/sdk/db/database/#setbooleanparameter-value","title":"setBoolean(parameter, value)","text":"<p>Sets the value of the specified parameter as a Boolean.</p> <pre><code>// Example\ncallableStatement.setBoolean(1, true);\n</code></pre>"},{"location":"platform/sdk/db/database/#setbyteparameter-value","title":"setByte(parameter, value)","text":"<p>Sets the value of the specified parameter as a Byte.</p> <pre><code>// Example\ncallableStatement.setByte(1, 42);\n</code></pre>"},{"location":"platform/sdk/db/database/#setshortparameter-value","title":"setShort(parameter, value)","text":"<p>Sets the value of the specified parameter as a Short.</p> <pre><code>// Example\ncallableStatement.setShort(1, 7);\n</code></pre>"},{"location":"platform/sdk/db/database/#setintparameter-value","title":"setInt(parameter, value)","text":"<p>Sets the value of the specified parameter as an Integer.</p> <pre><code>// Example\ncallableStatement.setInt(1, 42);\n</code></pre>"},{"location":"platform/sdk/db/database/#setlongparameter-value","title":"setLong(parameter, value)","text":"<p>Sets the value of the specified parameter as a Long.</p> <pre><code>// Example\ncallableStatement.setLong(1, 123456789);\n</code></pre>"},{"location":"platform/sdk/db/database/#setfloatparameter-value","title":"setFloat(parameter, value)","text":"<p>Sets the value of the specified parameter as a Float.</p> <pre><code>// Example\ncallableStatement.setFloat(1, 2.718);\n</code></pre>"},{"location":"platform/sdk/db/database/#setdoubleparameter-value","title":"setDouble(parameter, value)","text":"<p>Sets the value of the specified parameter as a Double.</p> <pre><code>// Example\ncallableStatement.setDouble(1, 3.14);\n</code></pre>"},{"location":"platform/sdk/db/database/#setbigdecimalparameter-value","title":"setBigDecimal(parameter, value)","text":"<p>Sets the value of the specified parameter as a BigDecimal.</p> <pre><code>// Example\ncallableStatement.setBigDecimal(1, bigDecimalValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#setstringparameter-value","title":"setString(parameter, value)","text":"<p>Sets the value of the specified parameter as a String.</p> <pre><code>// Example\ncallableStatement.setString(1, \"example\");\n</code></pre>"},{"location":"platform/sdk/db/database/#setbytesparameter-value","title":"setBytes(parameter, value)","text":"<p>Sets the value of the specified parameter as a byte array.</p> <pre><code>// Example\ncallableStatement.setBytes(1, byteArray);\n</code></pre>"},{"location":"platform/sdk/db/database/#setdateparameter-value","title":"setDate(parameter, value)","text":"<p>Sets the value of the specified parameter as a Date.</p> <pre><code>// Example\ncallableStatement.setDate(1, new Date());\n</code></pre>"},{"location":"platform/sdk/db/database/#settimeparameter-value","title":"setTime(parameter, value)","text":"<p>Sets the value of the specified parameter as a Time.</p> <pre><code>// Example\ncallableStatement.setTime(1, new Date());\n</code></pre>"},{"location":"platform/sdk/db/database/#settimestampparameter-value","title":"setTimestamp(parameter, value)","text":"<p>Sets the value of the specified parameter as a Timestamp.</p> <pre><code>// Example\ncallableStatement.setTimestamp(1, new Date());\n</code></pre>"},{"location":"platform/sdk/db/database/#setasciistreamparameter-inputstream-length","title":"setAsciiStream(parameter, inputStream, length)","text":"<p>Sets the value of the specified parameter as an ASCII stream.</p> <pre><code>// Example\ncallableStatement.setAsciiStream(1, inputStream, length);\n</code></pre>"},{"location":"platform/sdk/db/database/#setbinarystreamparameter-inputstream-length_1","title":"setBinaryStream(parameter, inputStream, length)","text":"<p>Sets the value of the specified parameter as a binary stream.</p> <pre><code>// Example\ncallableStatement.setBinaryStream(1, inputStream, length);\n</code></pre>"},{"location":"platform/sdk/db/database/#setobjectparameter-value-targetsqltype-scale","title":"setObject(parameter, value, targetSqlType, scale)","text":"<p>Sets the value of the specified parameter as an Object.</p> <pre><code>// Example\ncallableStatement.setObject(1, value, SQLTypes.INTEGER, 2);\n</code></pre>"},{"location":"platform/sdk/db/database/#setrowidparameter-value","title":"setRowId(parameter, value)","text":"<p>Sets the value of the specified parameter as a RowId.</p> <pre><code>// Example\ncallableStatement.setRowId(1, rowIdValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#setnstringparameter-value","title":"setNString(parameter, value)","text":"<p>Sets the value of the specified parameter as an NString.</p> <pre><code>// Example\ncallableStatement.setNString(1, \"example\");\n</code></pre>"},{"location":"platform/sdk/db/database/#setsqlxmlparameter-value","title":"setSQLXML(parameter, value)","text":"<p>Sets the value of the specified parameter as an SQLXML.</p> <pre><code>// Example\ncallableStatement.setSQLXML(1, sqlxmlValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#setblobparameter-value","title":"setBlob(parameter, value)","text":"<p>Sets the value of the specified parameter as a Blob.</p> <pre><code>// Example\ncallableStatement.setBlob(1, blobValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#setclobparameter-value","title":"setClob(parameter, value)","text":"<p>Sets the value of the specified parameter as a Clob.</p> <pre><code>// Example\ncallableStatement.setClob(1, clobValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#setnclobparameter-value","title":"setNClob(parameter, value)","text":"<p>Sets the value of the specified parameter as an NClob.</p> <pre><code>// Example\ncallableStatement.setNClob(1, nclobValue);\n</code></pre>"},{"location":"platform/sdk/db/database/#execute_1","title":"execute()","text":"<p>Executes the callable statement.</p> <pre><code>// Example\nconst result = callableStatement.execute();\n</code></pre>"},{"location":"platform/sdk/db/database/#getmoreresults_1","title":"getMoreResults()","text":"<p>Moves to the next result set, if available.</p> <pre><code>// Example\nconst hasMoreResults = callableStatement.getMoreResults();\n</code></pre>"},{"location":"platform/sdk/db/database/#getparametermetadata_1","title":"getParameterMetaData()","text":"<p>Retrieves the parameter metadata for the callable statement.</p> <pre><code>// Example\nconst parameterMetaData = callableStatement.getParameterMetaData();\n</code></pre>"},{"location":"platform/sdk/db/database/#isclosed_2","title":"isClosed()","text":"<p>Checks if the callable statement is closed.</p> <pre><code>// Example\nconst isClosed = callableStatement.isClosed();\n</code></pre>"},{"location":"platform/sdk/db/database/#close_2","title":"close()","text":"<p>Closes the callable statement.</p> <pre><code>// Example\ncallableStatement.close();\n</code></pre> <p>These methods provide a comprehensive set of functionalities for handling callable statements, registering parameters, executing queries, and managing result sets. Depending on your use case, you can leverage these methods to interact with your database effectively.</p>"},{"location":"platform/sdk/db/database/#resultset-object-methods","title":"ResultSet Object Methods","text":"<p>The <code>ResultSet</code> object provides methods for retrieving and processing query results.</p>"},{"location":"platform/sdk/db/database/#tojsonlimited","title":"toJson(limited?)","text":"<p>Converts the result set to JSON format. If `limited`` is true, only a limited number of rows are included.</p> <pre><code>// Example\nconst jsonResult = resultSet.toJson(true);\nconsole.log(jsonResult); // Outputs JSON representation of the result set\n</code></pre>"},{"location":"platform/sdk/db/database/#close_3","title":"close()","text":"<p>Closes the result set.</p> <pre><code>// Example\nresultSet.close();\n</code></pre>"},{"location":"platform/sdk/db/database/#getbigdecimalidentifier","title":"getBigDecimal(identifier)","text":"<p>Retrieves the value of the specified column as a BigDecimal.</p> <pre><code>// Example\nconst value = resultSet.getBigDecimal(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getbooleanidentifier","title":"getBoolean(identifier)","text":"<p>Retrieves the value of the specified column as a Boolean.</p> <pre><code>// Example\nconst value = resultSet.getBoolean(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getbyteidentifier","title":"getByte(identifier)","text":"<p>Retrieves the value of the specified column as a Byte.</p> <pre><code>// Example\nconst value = resultSet.getByte(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getbytesidentifier","title":"getBytes(identifier)","text":"<p>Retrieves the value of the specified column as a byte array.</p> <pre><code>// Example\nconst value = resultSet.getBytes(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getbytesnativeidentifier","title":"getBytesNative(identifier)","text":"<p>Retrieves the value of the specified column as a byte array in native format.</p> <pre><code>// Example\nconst value = resultSet.getBytesNative(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getblobidentifier","title":"getBlob(identifier)","text":"<p>Retrieves the value of the specified column as a Blob.</p> <pre><code>// Example\nconst value = resultSet.getBlob(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getblobnativeidentifier","title":"getBlobNative(identifier)","text":"<p>Retrieves the value of the specified column as a Blob in native format.</p> <pre><code>// Example\nconst value = resultSet.getBlobNative(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getclobidentifier","title":"getClob(identifier)","text":"<p>Retrieves the value of the specified column as a Clob.</p> <pre><code>// Example\nconst value = resultSet.getClob(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getnclobcolumnindex","title":"getNClob(columnIndex)","text":"<p>Retrieves the value of the specified column as an NClob.</p> <pre><code>// Example\nconst value = resultSet.getNClob(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getdateidentifier","title":"getDate(identifier)","text":"<p>Retrieves the value of the specified column as a Date.</p> <pre><code>// Example\nconst value = resultSet.getDate(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getdoubleidentifier","title":"getDouble(identifier)","text":"<p>Retrieves the value of the specified column as a Double.</p> <pre><code>// Example\nconst value = resultSet.getDouble(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getfloatidentifier","title":"getFloat(identifier)","text":"<p>Retrieves the value of the specified column as a Float.</p> <pre><code>// Example\nconst value = resultSet.getFloat(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getintidentifier","title":"getInt(identifier)","text":"<p>Retrieves the value of the specified column as an Integer.</p> <pre><code>// Example\nconst value = resultSet.getInt(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getlongidentifier","title":"getLong(identifier)","text":"<p>Retrieves the value of the specified column as a Long.</p> <pre><code>// Example\nconst value = resultSet.getLong(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getshortidentifier","title":"getShort(identifier)","text":"<p>Retrieves the value of the specified column as a Short.</p> <pre><code>// Example\nconst value = resultSet.getShort(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#getstringidentifier","title":"getString(identifier)","text":"<p>Retrieves the value of the specified column as a String.</p> <pre><code>// Example\nconst value = resultSet.getString(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#gettimeidentifier","title":"getTime(identifier)","text":"<p>Retrieves the value of the specified column as a Time.</p> <pre><code>// Example\nconst value = resultSet.getTime(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#gettimestampidentifier","title":"getTimestamp(identifier)","text":"<p>Retrieves the value of the specified column as a Timestamp.</p> <pre><code>// Example\nconst value = resultSet.getTimestamp(1);\n</code></pre>"},{"location":"platform/sdk/db/database/#isafterlast","title":"isAfterLast()","text":"<p>Checks if the result set cursor is positioned after the last row.</p> <pre><code>// Example\nconst isAfterLast = resultSet.isAfterLast();\n</code></pre>"},{"location":"platform/sdk/db/database/#isbeforefirst","title":"isBeforeFirst()","text":"<p>Checks if the result set cursor is positioned before the first row.</p> <pre><code>// Example\nconst isBeforeFirst = resultSet.isBeforeFirst();\n</code></pre>"},{"location":"platform/sdk/db/database/#isclosed_3","title":"isClosed()","text":"<p>Checks if the result set is closed.</p> <pre><code>// Example\nconst isClosed = resultSet.isClosed();\n</code></pre>"},{"location":"platform/sdk/db/database/#isfirst","title":"isFirst()","text":"<p>Checks if the result set cursor is positioned on the first row.</p> <pre><code>// Example\nconst isFirst = resultSet.isFirst();\n</code></pre>"},{"location":"platform/sdk/db/database/#islast","title":"isLast()","text":"<p>Checks if the result set cursor is positioned on the last row.</p> <pre><code>// Example\nconst isLast = resultSet.isLast();\n</code></pre>"},{"location":"platform/sdk/db/database/#next","title":"next()","text":"<p>Moves the result set cursor to the next row.</p> <pre><code>// Example\nconst hasNextRow = resultSet.next();\n</code></pre>"},{"location":"platform/sdk/db/database/#getmetadata_1","title":"getMetaData()","text":"<p>Retrieves the metadata for the result set.</p> <pre><code>// Example\nconst metaData = resultSet.getMetaData();\n</code></pre>"},{"location":"platform/sdk/db/database/#getnstringcolumnindex","title":"getNString(columnIndex)","text":"<p>Retrieves the value of the specified column as an NString.</p> <pre><code>// Example\nconst value = resultSet.getNString(1);\n</code></pre> <p>These methods offer various functionalities for accessing and manipulating data within a result set. Use them according to your requirements to interact with the retrieved data effectively.</p>"},{"location":"platform/sdk/db/database/#functions","title":"Functions","text":"Function Description Returns getDatabaseTypes() <code>deprecated</code> as all the datasources now are in a single list list of string getDataSources() Returns the list of the available data-sources in this instance. The data-sources of the default database type are listed list of string createDataSource(name, driver, url, username, password, properties) Creates a named dynamic datasource based on the provided parameters - getMetadata(datasourceName) Returns the metadata of the selected datasourceName. In case the datasourceName parameter is omitted, then the default data-source for the selected database is taken. metadata object getConnection(datasourceName) Establishes a connection to the selected data-source. Both parameters are optional Connection"},{"location":"platform/sdk/db/database/#objects","title":"Objects","text":""},{"location":"platform/sdk/db/database/#connection","title":"Connection","text":"Function Description Returns prepareStatement(sql) Creates a prepared statement by the given SQL script PreparedStatement prepareCall(sql) Creates a callable statement by the given SQL script CallableStatement close() Closes the Connection and returns it to the pool - commit() Commits the current transaction - getAutoCommit() Returns the value of the auto commit setting boolean getCatalog() Returns the Catalog name, which the Connection is related to string getSchema() Returns the Schema name, which the Connection is related to string getTransactionIsolation() Returns the value of the transaction isolation setting int isClosed() Returns true if the Connection is already closed and false otherwise boolean isReadOnly() Returns true if the Connection is opened in a read only state and false otherwise boolean isValid() Returns true if the Connection is still valid and false otherwise boolean rollback() Rolls the current transaction back - setAutoCommit(autoCommit) Sets the value of the auto commit setting - setCatalog(catalog) Sets the Catalog name, which the Connection is related to - setSchema(schema) Sets the Schema name, which the Connection is related to - setReadOnly(readOnly) Sets the value of the read only state - setTransactionIsolation(transactionIsolation) Sets the value of the transaction isolation setting -"},{"location":"platform/sdk/db/database/#preparedstatement","title":"PreparedStatement","text":"Function Description Returns close() Closes the Statement - execute() Executes an SQL query, script, procedure, etc. boolean executeQuery() Executes a query and returns a ResultSet ResultSet executeUpdate() Executes an update SQL statement - setNull(index, value) Sets a parameter as null - setBoolean(index, value) Sets a parameter of type boolean - setDate(index, value) Sets a parameter of type date - setClob(index, value) Sets a parameter of type clob - setBlob(index, value) Sets a parameter of type blob - setBytes(index, value) Sets a parameter of type bytes - setBinaryStream(index, inputStreamValue, length?) Sets a parameter of type binary stream - setDouble(index, value) Sets a parameter of type double - setFloat(index, value) Sets a parameter of type float - setInt(index, value) Sets a parameter of type integer - setLong(index, value) Sets a parameter of type long - setShort(index, value) Sets a parameter of type short - setString(index, value) Sets a parameter of type string - setTime(index, value) Sets a parameter of type time - setTimestamp(index, value) Sets a parameter of type timestamp - addBatch() Adds a set of parameters to this PreparedStatement batch of commands - executeBatch() Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts. integer array getMetaData() Retrieves a metadata object that contains information about the columns of the object that will be returned when this PreparedStatement is executed object getMoreResults() Returns true, if there are more ResultSet objects to be retrieved. boolean getParameterMetaData() Retrieves the number, types and properties of this PreparedStatement parameters object getSQLWarning() Retrieves the first warning reported object isClosed() Returns true, if closed boolean"},{"location":"platform/sdk/db/database/#callablestatement","title":"CallableStatement","text":"Function Description Returns close() Closes the Statement - execute() Executes an SQL query, script, procedure, etc. boolean executeQuery() Executes a query and returns a ResultSet ResultSet executeUpdate() Executes an update SQL statement - setNull(index, value) Sets a parameter as null - setBoolean(index, value) Sets a parameter of type boolean - setDate(index, value) Sets a parameter of type date - setClob(index, value) Sets a parameter of type clob - setBlob(index, value) Sets a parameter of type blob - setBytes(index, value) Sets a parameter of type bytes - setDouble(index, value) Sets a parameter of type double - setFloat(index, value) Sets a parameter of type float - setInt(index, value) Sets a parameter of type integer - setLong(index, value) Sets a parameter of type long - setShort(index, value) Sets a parameter of type short - setString(index, value) Sets a parameter of type string - setTime(index, value) Sets a parameter of type time - setTimestamp(index, value) Sets a parameter of type timestamp - addBatch() Adds a set of parameters to this PreparedStatement batch of commands - executeBatch() Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts. integer array getMetaData() Retrieves a metadata object that contains information about the columns of the object that will be returned when this PreparedStatement is executed object getMoreResults() Returns true, if there are more ResultSet objects to be retrieved. boolean getParameterMetaData() Retrieves the number, types and properties of this PreparedStatement parameters object getSQLWarning() Retrieves the first warning reported object isClosed() Returns true, if closed boolean"},{"location":"platform/sdk/db/database/#resultset","title":"ResultSet","text":"Function Description Returns toJson(limited) Returns the result set as stringfied JSON, <code>limited = true</code> will return only the first 100 records string close() Closes the ResultSet - getBoolean(identifier) Returns a value of type boolean boolean getDate(identifier) Returns a value of type date Date getDouble(identifier) Returns a value of type double double getFloat(identifier) Returns a value of type float float getInt(identifier) Returns a value of type integer int getLong(identifier) Returns a value of type long long getShort(identifier) Returns a value of type short short getString(identifier) Returns a value of type string string getTime(identifier) Returns a value of type time Date getTimestamp(identifier) Returns a value of type timestamp Date isAfterLast() Returns true if the ResultSet is iterated at the end and false otherwise boolean isBeforeFirst() Returns true if the ResultSet is iterated at the beginning and false otherwise boolean isFirst() Returns true if the ResultSet is iterated at the first row and false otherwise boolean isLast() Returns true if the ResultSet is iterated at the last row and false otherwise boolean isClosed() Returns true if the ResultSet is already closed and false otherwise boolean next() Iterates the ResultSet to the next row and returns true if it is successful. Returns false if no more rows remain. boolean"},{"location":"platform/sdk/db/insert/","title":"Insert","text":""},{"location":"platform/sdk/db/insert/#overview","title":"Overview","text":"<p>The provided API defines a TypeScript module <code>Insert</code> that facilitates the execution of SQL <code>INSERT</code> statements in a database.</p> <p>Here's an explanation of the key components:</p>"},{"location":"platform/sdk/db/insert/#insertparameter-interface","title":"InsertParameter Interface:","text":"<pre><code>export interface InsertParameter {\n    readonly type: string;\n    readonly value: any;\n}\n</code></pre> <p>This interface represents a parameter that can be used in an SQL <code>INSERT</code> statement. It includes the <code>type</code> of the parameter (string) and its <code>value</code> (any).</p>"},{"location":"platform/sdk/db/insert/#insert-class","title":"Insert Class:","text":"<p>The Insert class provides a static method execute for executing SQL <code>INSERT</code> statements.</p>"},{"location":"platform/sdk/db/insert/#execute","title":"execute","text":"<pre><code>execute(sql: string, parameters?: (string | number | boolean | Date | InsertParameter)[], datasourceName?: string): number\n</code></pre> <p>Parameters:</p> <ul> <li><code>sql</code>: The SQL INSERT statement to be executed.</li> <li><code>parameters</code>: (Optional) An array of parameters to be included in the INSERT statement. Parameters can be of type string, number, boolean, Date, or an object conforming to the InsertParameter interface.</li> <li> <p><code>datasourceName</code>: (Optional) The name of the data source.</p> </li> <li> <p>Return Value: The method returns a number, possibly representing the result of the INSERT operation.</p> </li> </ul>"},{"location":"platform/sdk/db/insert/#example-usage","title":"Example Usage:","text":"<pre><code>import { Insert } from 'sdk/db';\n\n// Example SQL INSERT statement\nconst sql = 'INSERT INTO your_table (column1, column2) VALUES (?, ?)';\n\n// Example parameters\nconst parameters: (string | number | boolean | Date )[] = [\n  'value1',\n  42,\n  true,\n  new Date()\n];\n\n// Execute the INSERT statement\nconst result = Insert.execute(sql, parameters, 'yourDataSource');\n\nconsole.log('INSERT result:', result);\n</code></pre> <p>Replace <code>your_table</code>, <code>column1</code>, <code>column2</code>, <code>value1</code>, <code>42</code>, <code>true</code>, <code>yourDataSource</code>, and other placeholders with your actual module path, table name, column names, values, data source, and other details.</p>"},{"location":"platform/sdk/db/procedure/","title":"Procedure","text":""},{"location":"platform/sdk/db/procedure/#overview","title":"Overview","text":"<p>The provided TypeScript module <code>Procedure</code> facilitates the execution of stored procedures in a database. It includes methods for creating and executing stored procedures.</p> <p>Here's an explanation of the key components:</p>"},{"location":"platform/sdk/db/procedure/#procedureparameter-interface","title":"ProcedureParameter Interface:","text":"<pre><code>export interface ProcedureParameter {\n    readonly type: string;\n    readonly value: any;\n}\n</code></pre> <p>This interface represents a parameter that can be used in a stored procedure call. It includes the <code>type</code> of the parameter (string) and its <code>value</code> (any).</p>"},{"location":"platform/sdk/db/procedure/#procedure-class","title":"Procedure Class:","text":"<p>The `Procedure`` class provides static methods for creating and executing stored procedures.</p>"},{"location":"platform/sdk/db/procedure/#methods","title":"Methods:","text":""},{"location":"platform/sdk/db/procedure/#create","title":"create","text":"<pre><code>create(sql: string, datasourceName?: string): void\n</code></pre> <p>Creates a stored procedure using an Update operation. (Assumed to be part of the Update class, as Update.execute is used.)</p> <p>Parameters:</p> <ul> <li><code>sql</code>: The SQL statement for creating the stored procedure.</li> <li><code>datasourceName</code>: (Optional) The name of the data source.</li> </ul>"},{"location":"platform/sdk/db/procedure/#execute","title":"execute","text":"<pre><code>execute(sql: string, parameters: (string | number | ProcedureParameter)[] = [], datasourceName?: string): any[]\n</code></pre> <p>Executes a stored procedure and returns the result sets.</p> <p>Parameters:</p> <ul> <li><code>sql</code>: The SQL statement for executing the stored procedure.</li> <li><code>parameters</code>: (Optional) An array of parameters to be included in the stored procedure call. Parameters can be of type string, number, or an object conforming to the ProcedureParameter interface.</li> <li><code>datasourceName</code>: (Optional) The name of the data source.</li> <li>Return Value: An array containing the result sets of the stored procedure execution.</li> </ul>"},{"location":"platform/sdk/db/procedure/#example-usage","title":"Example Usage:","text":"<p>Note</p> <p>To use procedures you need to add database that supports them (default DB is H2 that does not support procedures):</p> <ol> <li>Open <code>Database</code> perspective and click on <code>Databases</code> at the bottom.</li> <li>Click <code>New</code> and add your database information.</li> <li>Use you newly added database in most methods as <code>databaseType</code>.</li> </ol>"},{"location":"platform/sdk/db/procedure/#create-procedure","title":"Create Procedure:","text":"<pre><code>import { procedure } from \"sdk/db\";\nimport { response } from \"sdk/http\";\n\nconst sql = \" \\\nCREATE PROCEDURE CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS(c_id integer, c_name text, c_country text) \\\nLANGUAGE SQL \\\nAS $$ \\\n  INSERT INTO CUSTOMERS(id, name, country) values (c_id, c_name, c_country); \\\n$$; \\\n\"\n\nprocedure.create(sql, \"psql\");\n\nresponse.println(\"Procedure created\");\nresponse.flush();\nresponse.close();\n</code></pre> <p>Call Procedure:</p> <pre><code>import { query, procedure } from \"sdk/db\";\nimport { response } from \"sdk/http\";\n\nconst sql = \"CALL CUSTOMERS_BY_COUNTRY_AND_ALL_CUSTOMERS(c_id =&gt; ?, c_name =&gt; ?, c_country =&gt; ?)\";\n\ntry {\n    procedure.execute(sql, [6, \"IBM\", \"USA\"], \"psql\");\n} finally {\n    let result = query.execute(\"SELECT * FROM CUSTOMERS\", [], \"psql\");\n\n    response.println(JSON.stringify(result));\n    response.flush();\n    response.close();\n}\n</code></pre>"},{"location":"platform/sdk/db/procedure/#functions","title":"Functions","text":"Function Description Returns create(sql, datasourceName?) Creates a SQL Stored Procedure in the selected datasourceName, throws Error, if issue occur - execute(sql, parameters?, datasourceName?) Execute SQL Stored Procedure in the selected datasourceName with the provided parameters and returns the result, if any array of arrays <p>Sample Parameters Array:</p> <pre><code>let parameters = [1, 'John', 34.56];\n</code></pre> <p>or <pre><code>let parameters = [\n  {\n    value: 1,\n    type: \"int\"\n  }, {\n    value: 'John',\n    type: \"string\"\n  }, {\n    value: 34.56\n    type: \"double\"\n  }\n];\n</code></pre></p>"},{"location":"platform/sdk/db/query/","title":"Query","text":""},{"location":"platform/sdk/db/query/#overview","title":"Overview","text":"<p>The provided TypeScript module <code>Query</code> facilitates the execution of SQL queries in a database. It includes a method for executing queries. Here's an explanation of the key components:</p>"},{"location":"platform/sdk/db/query/#queryparameter-interface","title":"QueryParameter Interface:","text":"<pre><code>export interface QueryParameter {\n    readonly type: string;\n    readonly value: any;\n}\n</code></pre> <p>This interface represents a parameter that can be used in an SQL query. It includes the <code>type</code> of the parameter (string) and its <code>value</code> (any).</p>"},{"location":"platform/sdk/db/query/#query-class","title":"Query Class:","text":"<p>The <code>Query</code> class provides a static method for executing SQL queries.</p>"},{"location":"platform/sdk/db/query/#execute","title":"execute","text":"<pre><code>execute(sql: string, parameters?: (string | number | boolean | Date | QueryParameter)[], datasourceName?: string): any[]\n</code></pre> <p>Executes an SQL query and returns the result sets.</p> <p>Parameters:</p> <ul> <li><code>sql</code>: The SQL statement to be executed.</li> <li><code>parameters</code>: (Optional) An array of parameters to be included in the SQL query. Parameters can be of type string, number, boolean, Date, or an object conforming to the QueryParameter interface.</li> <li><code>datasourceName</code>: (Optional) The name of the data source.</li> <li>Return Value: An array containing the result sets of the SQL query execution.</li> </ul>"},{"location":"platform/sdk/db/query/#example-usage","title":"Example Usage:","text":"<pre><code>import { Query } from 'sdk/db';\n\n// Example SQL query\nconst sql = 'SELECT * FROM your_table WHERE column1 = ? AND column2 &gt; ?';\n\n// Example parameters\nconst parameters: (string | number | boolean | Date)[] = [\n  'value1',\n  42,\n  true,\n  new Date('2024-02-28')\n];\n\n// Execute the SQL query\nconst result = Query.execute(sql, parameters, 'yourDataSource');\n\nconsole.log('Query Result:', result);\n</code></pre> <p>Replace <code>your_table</code>, <code>column1</code>, <code>column2</code>, <code>value1</code>, <code>42</code>, <code>true</code>, <code>2024-02-28</code>, <code>yourDataSource</code>, and other placeholders with your actual module path, table name, column names, values, data source, and query details.</p>"},{"location":"platform/sdk/db/query/#functions","title":"Functions","text":"Function Description Returns execute(sql, parameters?, datasourceName?) Executes a SQL query against the selected datasourceName with the provided parameters result-set as JSON object <p>parameters array supports primitives e.g. [1, 'John', 34.56] or objects in format {'type':'[DATA_TYPE]', 'value':[VALUE]} e.g. [1, {'type':'CHAR', 'value':'ISBN19202323322'}]</p>"},{"location":"platform/sdk/db/sequence/","title":"Sequence","text":""},{"location":"platform/sdk/db/sequence/#overview","title":"Overview","text":"<p>The provided TypeScript module <code>Sequence</code> provides methods for interacting with sequences in a database. Here's an explanation of the key components:</p>"},{"location":"platform/sdk/db/sequence/#sequence-class","title":"Sequence Class:","text":"<p>The `Sequence`` class provides static methods for working with database sequences.</p>"},{"location":"platform/sdk/db/sequence/#methods","title":"Methods","text":""},{"location":"platform/sdk/db/sequence/#nextval","title":"nextval","text":"<pre><code>nextval(sequence: string, tableName?: string, datasourceName?: string): number\n</code></pre> <p>Retrieves the next value from the specified sequence.</p> <p>Parameters:</p> <ul> <li><code>sequence</code>: The name of the sequence.</li> <li><code>tableName</code>: (Optional) The name of the table associated with the sequence.</li> <li><code>datasourceName</code>: (Optional) The name of the data source.</li> <li>Return Value: The next value from the specified sequence.</li> </ul>"},{"location":"platform/sdk/db/sequence/#create","title":"create","text":"<pre><code>create(sequence: string, start?: number, datasourceName?: string): void\n</code></pre> <p>Creates a new sequence with the specified name and optional starting value.</p> <p>Parameters:</p> <ul> <li><code>sequence</code>: The name of the sequence to be created.</li> <li><code>start</code>: (Optional) The starting value of the sequence. Defaults to 1 if not provided.</li> <li><code>datasourceName</code>: (Optional) The name of the data source.</li> <li>Return Value: None.</li> </ul>"},{"location":"platform/sdk/db/sequence/#drop","title":"drop","text":"<pre><code>drop(sequence: string, datasourceName?: string): void\n</code></pre> <p>Drops (deletes) the specified sequence.</p> <p>Parameters:</p> <ul> <li><code>sequence</code>: The name of the sequence to be dropped.</li> <li><code>datasourceName</code>: (Optional) The name of the data source.</li> <li>Return Value: None.</li> </ul>"},{"location":"platform/sdk/db/sequence/#example-usage","title":"Example Usage:","text":"<pre><code>import { Sequence } from 'sdk/db/sequence';\n\n// Example sequence name\nconst sequenceName = 'your_sequence';\n\n// Retrieve the next value from the sequence\nconst nextValue = Sequence.nextval(sequenceName);\nconsole.log('Next Value:', nextValue);\n\n// Create a new sequence with the specified name and starting value\nSequence.create(sequenceName, 100, datasourceName);\n\n// Drop (delete) the specified sequence\nSequence.drop(sequenceName, datasourceName);\n</code></pre> <p>Replace <code>your_sequence</code>, and other placeholders with your actual module path, sequence name, table name, data source, and sequence details.</p>"},{"location":"platform/sdk/db/sequence/#functions","title":"Functions","text":"Function Description Returns nextval(name, databaseType?, datasourceName?) Increment the sequence with the given name and returns the value. Creates the sequence implicitly if it deos not exist. integer create(name, databaseType?, datasourceName?) Creates the sequence by the given name. - drop(name, databaseType?, datasourceName?) Remove the sequence by the given name. -"},{"location":"platform/sdk/db/store/","title":"Store","text":""},{"location":"platform/sdk/db/store/#overview","title":"Overview","text":"<p>The `Store`` API provides simple methods to interact with a data store. It allows you to save, retrieve, list, and remove entries from the data store.</p>"},{"location":"platform/sdk/db/store/#methods","title":"Methods","text":""},{"location":"platform/sdk/db/store/#save","title":"save","text":"<pre><code>save(name: string, entry: any): void\n</code></pre> <p>Saves the provided entry to the data store.</p> <p>Parameters:</p> <ul> <li><code>name</code> (string): The name of the data store.</li> <li><code>entry</code> (any): The entry to be saved. Should be a JavaScript object.</li> </ul> <p>Example:</p> <pre><code>Store.save(\"myDataStore\", { id: 1, name: \"John Doe\", age: 30 });\n</code></pre>"},{"location":"platform/sdk/db/store/#list","title":"list","text":"<pre><code>list(name: string): any[]\n</code></pre> <p>Retrieves a list of entries from the data store.</p> <p>Parameters:</p> <ul> <li><code>name</code> (string): The name of the data store.</li> <li>Returns: An array containing the entries from the data store.</li> </ul> <p>Example:</p> <pre><code>const entries = Store.list(\"myDataStore\");\nconsole.log(entries);\n</code></pre>"},{"location":"platform/sdk/db/store/#get","title":"get","text":"<pre><code>get(name: string, id: string): any | undefined\n</code></pre> <p>Retrieves a specific entry from the data store based on its ID.</p> <p>Parameters:</p> <ul> <li><code>name</code> (string): The name of the data store.</li> <li><code>id</code> (string): The ID of the entry to retrieve.</li> <li>Returns: The retrieved entry as a JavaScript object. If the entry is not found, undefined is returned.</li> </ul> <p>Example:</p> <pre><code>const entry = Store.get(\"myDataStore\", \"1\");\nconsole.log(entry);\n</code></pre>"},{"location":"platform/sdk/db/store/#remove","title":"remove","text":"<pre><code>remove(name: string, id: string): void\n</code></pre> <p>Removes an entry from the data store based on its ID.</p> <p>Parameters:</p> <ul> <li><code>name</code> (string): The name of the data store.</li> <li><code>id</code> (string): The ID of the entry to remove.</li> </ul> <p>Example:</p> <pre><code>Store.remove(\"myDataStore\", \"1\");\n</code></pre>"},{"location":"platform/sdk/db/store/#example-usage","title":"Example Usage","text":"<pre><code>import { Store } from \"sdk/db\";\nimport { Response } from \"sdk/http\";\n\nlet entry = { 'name': 'Peter', 'address': 'Sofia, Bulgaria' };\n\nStore.save('Customer', entry);\n\nlet list = Store.list('Customer');\n\nResponse.println(JSON.stringify(list));\nResponse.flush();\nResponse.close();\n</code></pre> <p>The <code>Entity</code> description in the Hibernate <code>xml</code> format (e.g. Customer.hbm.xml as XML)</p> <pre><code>&lt;hibernate-mapping&gt;\n\n    &lt;class entity-name=\"Customer\"&gt;\n\n        &lt;id name=\"id\" type=\"long\" column=\"ID\"&gt;\n            &lt;generator class=\"sequence\" /&gt;\n        &lt;/id&gt;\n\n        &lt;property name=\"name\" column=\"NAME\" type=\"string\" /&gt;\n\n        &lt;property name=\"address\" column=\"ADDRESS\" type=\"string\" /&gt;\n\n    &lt;/class&gt;\n\n&lt;/hibernate-mapping&gt;\n</code></pre>"},{"location":"platform/sdk/db/store/#functions","title":"Functions","text":"Function Description Returns save(name, entry) Save the <code>entry</code> in the collection with <code>name</code> - list(name) List all the entris in the collection with <code>name</code> Array of Objects get(name, id) Get the entry from the collection with <code>name</code> by its <code>id</code> Object deleteEntry(name, id) Delete the entry from the collection with <code>name</code> by its <code>id</code> -"},{"location":"platform/sdk/db/update/","title":"Update","text":""},{"location":"platform/sdk/db/update/#overview","title":"Overview","text":"<p>The provided TypeScript module <code>Update</code> contains a class with a static method for executing database update operations. Here's an explanation of the key components:</p>"},{"location":"platform/sdk/db/update/#queryparameter-interface","title":"QueryParameter Interface:","text":"<pre><code>export interface UpdateParameter {\n    readonly type: string;\n    readonly value: any;\n}\n</code></pre> <p>This interface represents a parameter that can be used in an SQL update. It includes the <code>type</code> of the parameter (string) and its <code>value</code> (any).</p>"},{"location":"platform/sdk/db/update/#update-class","title":"Update Class:","text":"<p>The <code>Update</code> class provides a static method for executing SQL update statements.</p>"},{"location":"platform/sdk/db/update/#methods","title":"Methods","text":""},{"location":"platform/sdk/db/update/#execute","title":"execute","text":"<pre><code>execute(sql: string, parameters?: (string | number | boolean | Date | UpdateParameter)[], datasourceName?: string): number\n</code></pre> <p>Executes the SQL update statement with optional parameters.</p> <p>Parameters:</p> <ul> <li><code>sql</code>: The SQL update statement to be executed.</li> <li><code>parameters</code>: (Optional) An array of update parameters, including type and value.</li> <li><code>datasourceName</code>: (Optional) The name of the data source.</li> <li>Return Value: The number of rows affected by the update operation.</li> </ul>"},{"location":"platform/sdk/db/update/#example-usage","title":"Example Usage:","text":"<pre><code>import { Update, UpdateParameter } from 'sdk/db/update';\n\n// Example SQL update statement\nconst sqlStatement = 'UPDATE your_table SET column1 = ?, column2 = ? WHERE id = ?';\n\n// Example update parameters\nconst updateParameters: UpdateParameter[] = [\n  { type: 'string', value: 'new_value1' },\n  { type: 'number', value: 42 },\n  { type: 'number', value: 123 },\n];\n\n// Example data source name\nconst datasourceName = 'yourDataSource';\n\n// Execute the SQL update statement\nconst affectedRows = Update.execute(sqlStatement, updateParameters, datasourceName);\nconsole.log('Affected Rows:', affectedRows);\n</code></pre> <p>Replace <code>your_table</code>, <code>new_value1</code>, <code>42</code>, <code>123</code>, <code>yourDataSource</code>, and other placeholders with your actual module path, SQL update statement, update parameters, data source, and details.</p>"},{"location":"platform/sdk/db/update/#functions","title":"Functions","text":"Function Description Returns execute(sql, parameters?, datasourceName?) Executes a SQL update against the selected datasourceName with the provided parameters and returns the number of affected rows int <p>parameters array supports primitives e.g. [1, 'John', 34.56] or objects in format {'type':'[DATA_TYPE]', 'value':[VALUE]} e.g. [1, {'type':'CHAR', 'value':'ISBN19202323322'}]</p>"},{"location":"platform/sdk/extensions/","title":"Extensions","text":"<p>The Extensions API allows developers to enhance and extend the functionality of their applications by providing a mechanism to add custom extensions. This documentation covers the basic usage and available functions of the Extensions API.</p>"},{"location":"platform/sdk/extensions/#basic-usage","title":"Basic Usage","text":"<p>The Basic Usage section demonstrates how to use the Extensions API to retrieve and utilize extensions:</p> ECMA6 <pre><code>import { extensions } from \"sdk/extensions\";\nimport { response } from \"sdk/http\";\n\nconst mainmenu = [];\nconst menuExtensions = extensions.getExtensions(\"ide-menu\");\nfor (let i = 0; i &lt; menuExtensions.length; i++) {\n    const extensionPath = menuExtensions[i];\n\n    const { getMenu } = await import(`${extensionPath}`);\n    const menu = getMenu();\n    mainmenu.push(menu);\n}\n\nresponse.println(JSON.stringify(mainmenu));\n</code></pre>"},{"location":"platform/sdk/extensions/#functions","title":"Functions","text":"Function Description Returns getExtensionPoints() Returns an array of the extension points names array of string getExtensions(extensionPoint) Returns an array of the extensions names for the specified extension point array of string"},{"location":"platform/sdk/git/","title":"Git Module","text":""},{"location":"platform/sdk/git/client/","title":"Git Client","text":"<p>The Git Client API provides developers with a set of functions to interact with Git repositories, allowing them to perform various operations such as initializing repositories, committing changes, cloning repositories, and more. This documentation covers the basic usage, functions, and objects available in the Git Client API.</p>"},{"location":"platform/sdk/git/client/#basic-usage","title":"Basic Usage","text":"<p>The following example demonstrates the basic usage of the Git Client API in ECMA6:</p> <pre><code>import { client } from \"sdk/git\"\n\nconst user = \"developer\";\nconst email = \"developer@codbex.com\";\nconst workspaceName = \"workspace\";\nconst projectName = \"project\";\nconst repositoryName = projectName;\nconst initialCommitMessage = \"Initial commit\";\nconst commitMessage = \"Second commit\";\nconst add = true;\n\nclient.initRepository(user, email, workspaceName, projectName, repositoryName, initialCommitMessage);\n\nclient.commit(user, email, workspaceName, repositoryName, commitMessage, add);\n</code></pre>"},{"location":"platform/sdk/git/client/#functions","title":"Functions","text":""},{"location":"platform/sdk/git/client/#initrepositoryuser-email-workspacename-projectname-repositoryname-commitmessage","title":"<code>initRepository(user, email, workspaceName, projectName, repositoryName, commitMessage)</code>","text":"<p>Initializes a repository in the selected project.</p>"},{"location":"platform/sdk/git/client/#commituser-useremail-workspacename-repositoryname-commitmessage-add","title":"<code>commit(user, userEmail, workspaceName, repositoryName, commitMessage, add)</code>","text":"<p>Creates a new commit in the selected project repository.</p>"},{"location":"platform/sdk/git/client/#getgitrepositoriesworkspacename","title":"<code>getGitRepositories(workspaceName)</code>","text":"<p>Returns all git repositories in the selected workspace.</p>"},{"location":"platform/sdk/git/client/#gethistoryrepositoryname-workspacename-path","title":"<code>getHistory(repositoryName, workspaceName, path)</code>","text":"<p>Returns git history for the selected repository.</p>"},{"location":"platform/sdk/git/client/#deleterepositoryworkspacename-repositoryname","title":"<code>deleteRepository(workspaceName, repositoryName)</code>","text":"<p>Deletes git repository.</p>"},{"location":"platform/sdk/git/client/#clonerepositoryworkspacename-repositoryuri-username-password-branch","title":"<code>cloneRepository(workspaceName, repositoryUri, username, password, branch)</code>","text":"<p>Clones repository from given URL in selected workspace.</p>"},{"location":"platform/sdk/git/client/#pullworkspacename-repositoryname-username-password","title":"<code>pull(workspaceName, repositoryName, username, password)</code>","text":"<p>Pull current branch of selected repository.</p>"},{"location":"platform/sdk/git/client/#pushworkspacename-repositoryname-username-password","title":"<code>push(workspaceName, repositoryName, username, password)</code>","text":"<p>Push current branch to origin.</p>"},{"location":"platform/sdk/git/client/#checkoutworkspacename-repositoryname-branchname","title":"<code>checkout(workspaceName, repositoryName, branchName)</code>","text":"<p>Checkout given branch.</p>"},{"location":"platform/sdk/git/client/#createbranchworkspacename-repositoryname-branchname-startingpoint","title":"<code>createBranch(workspaceName, repositoryName, branchName, startingPoint)</code>","text":"<p>Creates a new branch.</p>"},{"location":"platform/sdk/git/client/#hardresetworkspacename-repositoryname","title":"<code>hardReset(workspaceName, repositoryName)</code>","text":"<p>Hard reset current branch.</p>"},{"location":"platform/sdk/git/client/#rebaseworkspacename-repositoryname-branchname","title":"<code>rebase(workspaceName, repositoryName, branchName)</code>","text":"<p>Rebase selected branch.</p>"},{"location":"platform/sdk/git/client/#statusworkspacename-repositoryname","title":"<code>status(workspaceName, repositoryName)</code>","text":"<p>Get selected repository status.</p>"},{"location":"platform/sdk/git/client/#getbranchworkspacename-repositoryname","title":"<code>getBranch(workspaceName, repositoryName)</code>","text":"<p>Get current branch.</p>"},{"location":"platform/sdk/git/client/#getlocalbranchesworkspacename-repositoryname","title":"<code>getLocalBranches(workspaceName, repositoryName)</code>","text":"<p>Get list of local branches.</p>"},{"location":"platform/sdk/git/client/#getremotebranchesworkspacename-repositoryname","title":"<code>getRemoteBranches(workspaceName, repositoryName)</code>","text":"<p>Get list of remote branches.</p>"},{"location":"platform/sdk/git/client/#getunstagedchangesworkspacename-repositoryname","title":"<code>getUnstagedChanges(workspaceName, repositoryName)</code>","text":"<p>Get unstaged changes for selected repository.</p>"},{"location":"platform/sdk/git/client/#getstagedchangesworkspacename-repositoryname","title":"<code>getStagedChanges(workspaceName, repositoryName)</code>","text":"<p>Get staged changes for selected repository.</p>"},{"location":"platform/sdk/git/client/#getfilecontentworkspacename-repositoryname-filepath-revstr","title":"<code>getFileContent(workspaceName, repositoryName, filePath, revStr)</code>","text":"<p>Get the content of selected file.</p>"},{"location":"platform/sdk/git/client/#functions_1","title":"Functions","text":"Function Description Returns initRepository(user, email, workspaceName, projectName, repositoryName, commitMessage) Initializes a repository in the selected project - commit(user, userEmail, workspaceName, repositoryName, commitMessage, add) Creates a new commit in the selected project repository - getGitRepositories(workspaceName) Returns all git repositories in the selected workspace Projects getHistory(repositoryName, workspaceName, path) Returns git history for the selected repository GitCommitInfoList deleteRepository(workspaceName, repositoryName) Deletes git repository - cloneRepository(workspaceName, repositoryUri, username, password, branch) Clones repository from given URL in selected workspace - pull(workspaceName, repositoryName, username, password) Pull current branch of selected repository - push(workspaceName, repositoryName, username, password) Push current branch to origin - checkout(workspaceName, repositoryName, branchName) Checkout given branch - createBranch(workspaceName, repositoryName, branchName, startingPoint) Creates a new branch - hardReset(workspaceName, repositoryName) Hard reset current branch - rebase(workspaceName, repositoryName, branchName) Rebase selected branch - status(workspaceName, repositoryName) Get selected repository status Status getBranch(workspaceName, repositoryName) Get current branch String getLocalBranches(workspaceName, repositoryName) Get list of local branches Branches getRemoteBranches(workspaceName, repositoryName) Get list of remote branches Branches getUnstagedChanges(workspaceName, repositoryName) Get unstaged changes for selected repository GitChangedFiles getStagedChanges(workspaceName, repositoryName) Get staged changes for selected repository GitChangedFiles getFileContent(workspaceName, repositoryName, filePath, revStr) Get the content of selected file String"},{"location":"platform/sdk/git/client/#objects","title":"Objects","text":""},{"location":"platform/sdk/git/client/#gitcommitinfolist","title":"GitCommitInfoList","text":"Function Description Returns size() Returns the size of this GitCommitInfoList programmatically integer get(index) Gets a GitCommitInfo by index programmatically GitCommitInfo"},{"location":"platform/sdk/git/client/#gitcommitinfo","title":"GitCommitInfo","text":"Function Description Returns getId() Gets the id of the commit string getAuthor() Gets the author of the commit string getEmailAddress() Gets the author's email address string getDateTime() Gets the date and time of the commit string getMessage() Gets the commit's message string"},{"location":"platform/sdk/git/client/#status","title":"Status","text":"Function Description Returns isClean() Checks whether the repository is clean boolean getAdded() Gets added files array of strings getChanged() Gets changed files array of strings getRemoved() Gets removed files array of strings getMissing() Gets missing files array of strings getUntracked() Gets untracked files array of strings getUntrackedFolders() Gets untracked folders array of strings getConflicting() Gets conflicting files array of strings getIgnoredNotInIndex() Get ignored files array of strings getUncommittedChanges() Get uncommited changes array of strings"},{"location":"platform/sdk/git/client/#branches","title":"Branches","text":"Function Description Returns size() Returns the size of this Branches list programmatically integer get(index) Gets a Branch by index programmatically Branch"},{"location":"platform/sdk/git/client/#branch","title":"Branch","text":"Function Description Returns getName() Gets the name of the branch string isRemote() Checks whether the branch is remote boolean isCurrent Checks whether the branch is current boolean getCommitObjectId() Gets the commit's object id string getCommitShortId() Gets the commit's short id string getCommitDate() Gets the commit's data string getCommitMessage() Gets the commit's message string getCommitAuthor Gets the commit's author name string"},{"location":"platform/sdk/git/client/#gitchangedfiles","title":"GitChangedFiles","text":"Function Description Returns size() Returns the size of this GitChangedFiles list programmatically integer get(index) Gets a GitChangedFile by index programmatically GitChangedFile"},{"location":"platform/sdk/git/client/#gitchangedfile","title":"GitChangedFile","text":"Function Description Returns getPath() Gets the path of the changed file string"},{"location":"platform/sdk/http/","title":"HTTP Module","text":"<p>This module provides various functionalities for handling HTTP requests and responses within scripting services.</p>"},{"location":"platform/sdk/http/#apis","title":"APIs","text":"<ol> <li>Client Async</li> <li>Synchronous HTTP Client</li> <li>HTTP Request Object</li> <li>HTTP Response Object</li> <li>HTTP RESTful Services Framework</li> <li>HTTP Session Object</li> <li>HTTP Upload</li> </ol>"},{"location":"platform/sdk/http/#client-async","title":"Client Async","text":"<p>Client Async is used by scripting services to call external services asynchronously via HTTP.</p> <ul> <li>Documentation</li> </ul>"},{"location":"platform/sdk/http/#synchronous-http-client","title":"Synchronous HTTP Client","text":"<p>The synchronous HTTP Client is used by scripting services to call external services synchronously via HTTP.</p> <ul> <li>Documentation</li> </ul>"},{"location":"platform/sdk/http/#http-request-object","title":"HTTP Request Object","text":"<p>The HTTP Request object is provided to the scripting services implementation. It contains the headers and parameters coming as input from the HTTP call.</p> <ul> <li>Documentation</li> </ul>"},{"location":"platform/sdk/http/#http-response-object","title":"HTTP Response Object","text":"<p>The HTTP Response object is provided to the scripting services implementation to create the result, which will be sent back to the client.</p> <ul> <li>Documentation</li> </ul>"},{"location":"platform/sdk/http/#http-restful-services-framework","title":"HTTP RESTful Services Framework","text":"<p>The HTTP RESTful Services Framework provides utilities for building RESTful APIs within scripting services.</p> <ul> <li>Documentation</li> </ul>"},{"location":"platform/sdk/http/#http-session-object","title":"HTTP Session Object","text":"<p>The HTTP Session object is provided to the scripting services implementation to hold session attributes for multiple client requests.</p> <ul> <li>Documentation</li> </ul>"},{"location":"platform/sdk/http/#http-upload","title":"HTTP Upload","text":"<p>HTTP Upload is used to consume files posted as multipart requests.</p> <ul> <li>Documentation</li> </ul> <p>This Index page provides an overview of the HTTP Module and quick access to detailed documentation for each API provided within the module.</p>"},{"location":"platform/sdk/http/client-async/","title":"Client Async","text":"<p>Client Async is a module designed to facilitate asynchronous calls to external services via HTTP within scripting services. It provides a straightforward interface for making HTTP requests and handling responses asynchronously. This module is particularly useful for scenarios where calling external services synchronously would result in blocking operations, hindering the performance and responsiveness of the application.</p> <p>With Client Async, developers can initiate HTTP requests without halting the execution flow of their scripts. This allows for concurrent processing of multiple requests, enabling improved efficiency and responsiveness in applications that interact with external services over the web.</p>"},{"location":"platform/sdk/http/client-async/#example-usage","title":"Example Usage","text":"<pre><code>import { client, clientAsync } from \"sdk/http\";\n\nlet clientAsyncInstance = clientAsync.getInstance();\nlet api = 'https://services.odata.org/V4/Northwind/Northwind.svc/';\nlet northWindResponse = client.get(api, {\n    params: [{\n        name: \"$format\",\n        value: \"json\"\n    }]\n});\n\nlet northWindEntities = JSON.parse(northWindResponse.text);\n\nfor (let i = 0; i &lt; northWindEntities.value.length; i++) {\n    clientAsyncInstance.getAsync(api + northWindEntities.value[i].url, {\n        success: function (response) {\n            let entity = JSON.parse(response.text);\n            console.error(entity[\"@odata.context\"] + \" : \" + entity.value.length);\n        }\n    });\n}\n\nclientAsyncInstance.execute();\n</code></pre>"},{"location":"platform/sdk/http/client-async/#functions","title":"Functions","text":"Function Description Returns getAsync(url, config, options) Makes a HTTP GET Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - postAsync(url, config, options) Makes a HTTP POST Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - putAsync(url, config, options) Makes a HTTP PUT Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - deleteAsync(url, config, options) Makes a HTTP DELETE Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - headAsync(url, config, options) Makes a HTTP HEAD Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback - traceAsync(url, config, options) Makes a HTTP TRACE Async request to a remote service at the URL by the HttpOptions and returns HttpResponse to the HttpResponseCallback -"},{"location":"platform/sdk/http/client-async/#objects","title":"Objects","text":""},{"location":"platform/sdk/http/client-async/#httpresponsecallbackconfig","title":"HttpResponseCallbackConfig","text":"Property Description Type success The success response callback HttpResponseCallback function error The error response callback HttpResponseCallback function cancel The cancel response callback HttpResponseCallback function"},{"location":"platform/sdk/http/client-async/#httpresponsecallback","title":"HttpResponseCallback","text":"Parameters Description Type response? The HTTP Response object HttpResponse error? The HTTP Response Error Object HttpResponseError"},{"location":"platform/sdk/http/client-async/#httpresponse","title":"HttpResponse","text":"Property Description Type statusCode The Response status code int statusMessage The Response status message string data The Response data array of bytes text The Response data as text string binary Whether the Response data is binary in data or string in text boolean protocol The HTTP version of the Response string headers The Response headers array of HttpHeader"},{"location":"platform/sdk/http/client-async/#httpresponseerror","title":"HttpResponseError","text":"Property Description Type message The error message string"},{"location":"platform/sdk/http/client-async/#httpheader","title":"HttpHeader","text":"Property Description Type name The name of the header string value The value of the header string"},{"location":"platform/sdk/http/client-async/#httpparam","title":"HttpParam","text":"Property Description Type name The name of the param string value The value of the param string"},{"location":"platform/sdk/http/client-async/#httpoptions","title":"HttpOptions","text":"Property Description Type data The body of the HTTP Request as binary array of bytes text The body of the HTTP Request as text string files The body of the HTTP Request as files (for POST) array of strings params The body of the HTTP Request as form parameters array of HttpParam binary Whether the body of the HTTP Request is binary boolean characterEncodingEnabled The character encoding enabled parameter. Default is true boolean characterEncoding The character encoding parameter. Default is UTF-8 string contentType The content type parameter. Default is plain/text string headers The Response headers array of HttpHeader proxyHost The proxy host parameter string proxyPort The proxy port parameter int expectContinueEnabled The continue enabled parameter boolean cookieSpec The cookieSpec parameter string redirectsEnabled The redirects enabled parameter boolean relativeRedirectsAllowed The relative redirects allowed parameter boolean circularRedirectsAllowed The circular redirects allowed parameter boolean maxRedirects The max redirects parameter int authenticationEnabled The authentication enabled parameter boolean targetPreferredAuthSchemes The target preferred authentication schemes parameter array of strings proxyPreferredAuthSchemes The proxy preferred authentication schemes parameter array of strings connectionRequestTimeout The connection request timeout parameter int connectTimeout The connect timeout parameter int socketTimeout The socket timeout parameter int contentCompressionEnabled The content compression enabled parameter boolean sslTrustAllEnabled The SSL trust all enabled parameter boolean"},{"location":"platform/sdk/http/client/","title":"Client","text":"<p>The synchronous HTTP Client module is utilized within scripting services to establish synchronous communication with external services via HTTP. This module offers a streamlined interface for making HTTP requests and handling responses synchronously. It serves as a fundamental component for integrating scripting environments with external services over the web.</p> <p>Developers leverage the Synchronous HTTP Client module to initiate HTTP requests and await their responses, allowing for synchronous execution of code. This synchronous approach ensures that the script waits for the completion of each HTTP request before proceeding, simplifying the handling of data and responses within the script's execution flow.</p> <p>By providing synchronous HTTP communication capabilities, the module enables scripting services to interact seamlessly with external APIs, web services, and other HTTP-based resources. This facilitates the exchange of data and enables the integration of external functionality into scripting environments with ease and efficiency.</p>"},{"location":"platform/sdk/http/client/#example-usage","title":"Example Usage","text":"<pre><code>import { client, response } from \"sdk/http\";\n\nconst httpResponse = client.get(\"https://services.odata.org/V4/Northwind/Northwind.svc/\");\n\nresponse.println(httpResponse.statusMessage);\nresponse.println(httpResponse.text);\nresponse.flush();\nresponse.close();\n</code></pre>"},{"location":"platform/sdk/http/client/#functions","title":"Functions","text":"Function Description Returns get(url, options) Makes a HTTP GET request to a remote service at the URL by the HttpOptions and returns the result HttpResponse post(url, options) Makes a HTTP POST request to a remote service at the URL by the HttpOptions and returns the result HttpResponse put(url, options) Makes a HTTP PUT request to a remote service at the URL by the HttpOptions and returns the result HttpResponse delete(url, options) Makes a HTTP DELETE request to a remote service at the URL by the HttpOptions and returns the result HttpResponse head(url, options) Makes a HTTP HEAD request to a remote service at the URL by the HttpOptions and returns the result HttpResponse trace(url, options) Makes a HTTP TRACE request to a remote service at the URL by the HttpOptions and returns the result HttpResponse"},{"location":"platform/sdk/http/client/#objects","title":"Objects","text":""},{"location":"platform/sdk/http/client/#httpresponse","title":"HttpResponse","text":"Property Description Type statusCode The Response status code int statusMessage The Response status message string data The Response data array of bytes text The Response data as text string binary Whether the Response data is binary in data or string in text boolean protocol The HTTP version of the Response string headers The Response headers array of HttpHeader"},{"location":"platform/sdk/http/client/#httpheader","title":"HttpHeader","text":"Property Description Type name The name of the header string value The value of the header string"},{"location":"platform/sdk/http/client/#httpparam","title":"HttpParam","text":"Property Description Type name The name of the param string value The value of the param string"},{"location":"platform/sdk/http/client/#httpoptions","title":"HttpOptions","text":"Property Description Type data The body of the HTTP Request as binary array of bytes text The body of the HTTP Request as text string files The body of the HTTP Request as files (for POST) array of strings params The body of the HTTP Request as form parameters array of HttpParam binary Whether the body of the HTTP Request is binary boolean characterEncodingEnabled The character encoding enabled parameter. Default is true boolean characterEncoding The character encoding parameter. Default is UTF-8 string contentType The content type parameter. Default is plain/text string headers The Response headers array of HttpHeader proxyHost The proxy host parameter string proxyPort The proxy port parameter int expectContinueEnabled The continue enabled parameter boolean cookieSpec The cookieSpec parameter string redirectsEnabled The redirects enabled parameter boolean relativeRedirectsAllowed The relative redirects allowed parameter boolean circularRedirectsAllowed The circular redirects allowed parameter boolean maxRedirects The max redirects parameter int authenticationEnabled The authentication enabled parameter boolean targetPreferredAuthSchemes The target preferred authentication schemes parameter array of strings proxyPreferredAuthSchemes The proxy preferred authentication schemes parameter array of strings connectionRequestTimeout The connection request timeout parameter int connectTimeout The connect timeout parameter int socketTimeout The socket timeout parameter int contentCompressionEnabled The content compression enabled parameter boolean sslTrustAllEnabled The SSL trust all enabled parameter boolean"},{"location":"platform/sdk/http/request/","title":"HTTP Request","text":"<p>The HTTP Request object serves as a pivotal component within the scripting services implementation, providing access to the headers and parameters received as input from HTTP calls. This object encapsulates the details of an incoming HTTP request, allowing scripts to access and manipulate its various attributes.</p> <p>Developers leverage the HTTP Request object to extract essential information from incoming HTTP requests, such as headers, query parameters, and request body content. This enables scripts to process incoming data and respond accordingly based on the client's request.</p> <p>Key features of the HTTP Request object include:</p> <ul> <li> <p><code>Access to Headers</code>: The HTTP Request object provides methods for retrieving and manipulating the headers included in the incoming HTTP request. Developers can access header values to extract metadata or perform conditional logic based on specific header values.</p> </li> <li> <p><code>Query Parameters Handling</code>: With the HTTP Request object, scripts can easily access query parameters included in the URL of the incoming request. This allows for dynamic processing of requests based on query parameters supplied by clients.</p> </li> <li> <p><code>Request Body Access</code>: Scripts can access the content of the request body through the HTTP Request object, enabling the extraction of payload data sent by clients. This facilitates the processing of POST requests and other HTTP methods that include request bodies.</p> </li> </ul> <p>By providing comprehensive access to incoming HTTP request details, the HTTP Request object empowers scripting services to handle client requests effectively and implement custom logic based on the received input. This facilitates the development of dynamic and responsive web applications within the scripting environment.</p>"},{"location":"platform/sdk/http/request/#example-usage","title":"Example Usage","text":"<pre><code>import { request, response } from \"sdk/http\";\n\nlet method = request.getMethod();\n\nresponse.println(\"[Method]: \" + method);\nresponse.flush();\nresponse.close();\n</code></pre>"},{"location":"platform/sdk/http/request/#functions","title":"Functions","text":"Function Description Returns isValid() Returns true if the current execution context is in a HTTP call boolean getMethod() Returns the HTTP request method - GET, POST, PUT, DELETE, HEAD, TRACE string getRemoteUser() Returns the user name performing the request string getPathInfo() Returns the path info section of the URL string getPathTranslated() Returns the translated path string getHeader(name) Returns the value of the header by name, if any string isUserInRole(role) Returns true if the user has the given role and false otherwise string getAttribute(name) Returns the value of the attribute by name, if any string getAuthType() Returns the authentication type string getCookies() Returns all the cookies from the request array of HttpCookie getAttributeNames() Returns the names of all the attribute array of string getCharacterEncoding() Returns the character encoding string getContentLength() Returns the content length string getHeaders() Returns the array of headers array of HttpHeader getContentType() Returns the content type string getBytes() Returns the content as byte array array of bytes getText() Returns the content as text string getJSON() Returns a JSON object, after parsing the content as text Object getParameter(name) Returns the value of the parameter by name, if any string getHeaderNames() Returns the names of all the headers array of string getParameterNames() Returns the names of all the parameters array of string getParameterValues(name) Returns the values of the parameter by name array of string getParameters() Returns the all the parameters - name and value pairs array of pair getProtocol() Returns the protocol string getScheme() Returns the scheme string getContextPath() Returns the context path string getServerName() Returns the server name string getServerPort() Returns the server port int getQueryString() Returns the query string string getRemoteAddress() Returns the remote address string getRemoteHost() Returns the remote host string setAttribute(name,value) Sets the value of the attribute by name - removeAttribute(name) Sets the value of the attribute by name - getLocale() Returns the locale string string getRequestURI() Returns the request URI string isSecure() Whether the request goes via a secured channel boolean getRequestURL() Returns the request URL string getServicePath() Returns the service path string getRemotePort() Returns the remote port string getLocalName() Returns the local name string getLocalAddress() Returns the local address string getLocalPort() Returns the local port string"},{"location":"platform/sdk/http/request/#objects","title":"Objects","text":""},{"location":"platform/sdk/http/request/#httpcookie","title":"HttpCookie","text":"Property Description Type name The HttpCookie name string value The HttpCookie value string comment The HttpCookie comment section string maxAge The HttpCookie maximum age int path The URI path to which the client should return the HttpCookie string domain The domain name set to this HttpCookie string secure Returns true if the client is sending HttpCookie only over a secure protocol string version Returns the version of the protocol this cookie complies with 0 httpOnly The HttpCookie will not be exposed to the client-side scripting code if true boolean"},{"location":"platform/sdk/http/request/#httpheader","title":"HttpHeader","text":"Property Description Type name The name of the header string value The value of the header string"},{"location":"platform/sdk/http/response/","title":"HTTP Response","text":"<p>The HTTP Response object plays a crucial role in scripting services implementations, serving as the mechanism through which scripts generate the result to be sent back to the client in response to an HTTP request. This object encapsulates the details of an HTTP response, allowing scripts to construct and customize the response content, status code, and headers.</p> <p>Developers utilize the HTTP Response object to craft dynamic responses tailored to the specific requirements of client requests. By leveraging this object, scripts can generate various types of responses, including HTML content, JSON data, or binary files, to fulfill the client's needs.</p> <p>Key features of the HTTP Response object include:</p> <ul> <li> <p><code>Response Content Generation</code>: The HTTP Response object enables scripts to generate the content of the response dynamically. This flexibility allows for the creation of responses containing structured data, such as JSON objects, or formatted text, such as HTML pages, based on the logic and processing performed by the script.</p> </li> <li> <p><code>Status Code Setting</code>: Scripts can set the HTTP status code of the response using the HTTP Response object, indicating the outcome of the request processing. By specifying the appropriate status code, scripts communicate the success, failure, or other status of the request to the client, facilitating proper handling on the client side.</p> </li> <li> <p><code>Headers Manipulation</code>: Developers can manipulate the headers of the HTTP response using the HTTP Response object, allowing for customization of response metadata. This includes setting content type headers, caching directives, and custom headers to provide additional information to the client or intermediary servers.</p> </li> </ul> <p>Error Handling: The HTTP Response object provides mechanisms for handling errors and exceptional conditions within scripts. Scripts can generate error responses with appropriate status codes and error messages to communicate issues encountered during request processing, aiding in debugging and troubleshooting.</p> <p>By providing robust capabilities for generating custom responses, setting status codes, and manipulating headers, the HTTP Response object empowers scripting services to deliver dynamic and tailored responses to client requests. This facilitates the development of interactive and responsive web applications within the scripting environment.</p>"},{"location":"platform/sdk/http/response/#example-usage","title":"Example Usage","text":"<pre><code>import { response } from \"sdk/http\";\n\nresponse.println(\"Hello World!\");\nresponse.flush();\nresponse.close();\n</code></pre>"},{"location":"platform/sdk/http/response/#functions","title":"Functions","text":"Function Description Returns isValid() Returns true if the current execution context is in a HTTP call boolean print(text) Prints the text to the response body - println(text) Prints the text to the response body with line separator at the end - write(bytes) Prints the bytes array to the response body - isCommitted() Whether response is already committed boolean setContentType() Sets the content type - flush() Flushes the content to the response to the client - close() Closes the response stream to the client - addCookie(cookie) Adds a HttpCookie to the response - containsHeader(name) Checks existence of the header by name boolean encodeURL(url) Returns the encoded url parameter string getCharacterEncoding() Returns the character encoding of the response string encodeRedirectURL() Returns the encoded redirect URL string getContentType() Returns the content type of the response string sendError(code, message) Sends an error instruction to the client with the given code and message. The message parameter is optional - setCharacterEncoding(encoding) Sets the character encoding of the response - sendRedirect(location) Sends a redirect instruction to the client to the given location - setContentLength(length) Sets the content length of the response - setHeader(name, value) Updates a header name/value pair to the response - addHeader(name, value) Adds a header name/value pair to the response - setStatus(status) Sets the status of the response - reset(status) Resets the response - getHeader(name) Returns the header value by name - setLocale(language, country, variant) Sets the locale to the response - getHeaders(name) Returns the array of header values by name array of string getHeaderNames() Returns the names of all the headers array of string getLocale() Returns the locale of the response string getOutputStream() Returns the OutputStream of the response OutputStream"},{"location":"platform/sdk/http/response/#constants","title":"Constants","text":"Constant Description Type ACCEPTED Status code (202) indicating that a request was accepted for processing, but was not completed. int BAD_GATEWAY Status code (502) indicating that the HTTP server received an invalid response from a server it consulted when acting as a proxy or gateway. int BAD_REQUEST Status code (400) indicating the request sent by the client was syntactically incorrect. int CONFLICT Status code (409) indicating that the request could not be completed due to a conflict with the current state of the resource. int CONTINUE Status code (100) indicating the client can continue. int CREATED Status code (201) indicating the request succeeded and created a new resource on the server. int EXPECTATION_FAILED Status code (417) indicating that the server could not meet the expectation given in the Expect request header. int FORBIDDEN Status code (403) indicating the server understood the request but refused to fulfill it. int FOUND Status code (302) indicating that the resource reside temporarily under a different URI. int GATEWAY_TIMEOUT Status code (504) indicating that the server did not receive a timely response from the upstream server while acting as a gateway or proxy. int GONE Status code (410) indicating that the resource is no longer available at the server and no forwarding address is known. int HTTP_VERSION_NOT_SUPPORTED Status code (505) indicating that the server does not support or refuses to support the HTTP protocol version that was used in the request message. int INTERNAL_SERVER_ERROR Status code (500) indicating an error inside the HTTP server which prevented it from fulfilling the request. int LENGTH_REQUIRED Status code (411) indicating that the request cannot be handled without a defined Content-Length. int METHOD_NOT_ALLOWED Status code (405) indicating that the method specified in the Request-Line is not allowed for the resource identified by the Request-URI. int MOVED_PERMANENTLY Status code (301) indicating that the resource has permanently moved to a new location, and that future references should use a new URI with their requests. int MOVED_TEMPORARILY Status code (302) indicating that the resource has temporarily moved to another location, but that future references should still use the original URI to access the resource. int MULTIPLE_CHOICES Status code (300) indicating that the requested resource corresponds to any one of a set of representations, each with its own specific location. int NO_CONTENT Status code (204) indicating that the request succeeded but that there was no new information to return. int NON_AUTHORITATIVE_INFORMATION Status code (203) indicating that the meta information presented by the client did not originate from the server. int NOT_ACCEPTABLE Status code (406) indicating that the resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request. int NOT_FOUND Status code (404) indicating that the requested resource is not available. int NOT_IMPLEMENTED Status code (501) indicating the HTTP server does not support the functionality needed to fulfill the request. int NOT_MODIFIED Status code (304) indicating that a conditional GET operation found that the resource was available and not modified. int OK Status code (200) indicating the request succeeded normally. int PARTIAL_CONTENT Status code (206) indicating that the server has fulfilled the partial GET request for the resource. int PAYMENT_REQUIRED Status code (402) reserved for future use. int PRECONDITION_FAILED Status code (412) indicating that the precondition given in one or more of the request-header fields evaluated to false when it was tested on the server. int PROXY_AUTHENTICATION_REQUIRED Status code (407) indicating that the client MUST first authenticate itself with the proxy. int REQUEST_ENTITY_TOO_LARGE Status code (413) indicating that the server is refusing to process the request because the request entity is larger than the server is willing or able to process. int REQUEST_TIMEOUT Status code (408) indicating that the client did not produce a request within the time that the server was prepared to wait. int REQUEST_URI_TOO_LONG Status code (414) indicating that the server is refusing to service the request because the Request-URI is longer than the server is willing to interpret. int REQUESTED_RANGE_NOT_SATISFIABLE Status code (416) indicating that the server cannot serve the requested byte range. int RESET_CONTENT Status code (205) indicating that the agent SHOULD reset the document view which caused the request to be sent. int SEE_OTHER Status code (303) indicating that the response to the request can be found under a different URI. int SERVICE_UNAVAILABLE Status code (503) indicating that the HTTP server is temporarily overloaded, and unable to handle the request. int SERVICE_SWITCHING_PROTOCOLSUNAVAILABLE Status code (101) indicating the server is switching protocols according to Upgrade header. int TEMPORARY_REDIRECT Status code (307) indicating that the requested resource resides temporarily under a different URI. int UNAUTHORIZED Status code (401) indicating that the request requires HTTP authentication. int UNSUPPORTED_MEDIA_TYPE Status code (415) indicating that the server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method. int USE_PROXY Status code (305) indicating that the requested resource MUST be accessed through the proxy given by the Location field. int"},{"location":"platform/sdk/http/rs/","title":"HTTP RESTful Services Framework","text":"<p>The HTTP RESTful Services Framework provides a robust and flexible platform for developing RESTful APIs within the scripting environment. Leveraging standard HTTP methods and principles of Representational State Transfer (REST), this framework empowers developers to create web services that are scalable, interoperable, and easily consumable by clients.</p> <p>Key features of the HTTP RESTful Services Framework include:</p> <ul> <li> <p><code>Resource-Oriented Design</code>: The framework adopts a resource-oriented design approach, where each endpoint represents a unique resource with its own URI. By adhering to REST principles, developers can create well-defined and self-descriptive APIs that promote simplicity, clarity, and discoverability.</p> </li> <li> <p><code>HTTP Method Mapping</code>: The framework maps HTTP methods (e.g., GET, POST, PUT, DELETE) to operations on resources, enabling developers to define the behavior of each endpoint based on the corresponding HTTP method. This allows for the implementation of CRUD (Create, Read, Update, Delete) operations and other custom actions on resources.</p> </li> <li> <p><code>Request Routing</code>: Incoming HTTP requests are routed to the appropriate endpoint handler based on the request URI and method. The framework provides mechanisms for defining routes and associating them with handler functions, allowing for the seamless dispatching of requests to the correct endpoint for processing.</p> </li> <li> <p><code>Content Negotiation</code>: The framework supports content negotiation, allowing clients to specify their preferred representation format (e.g., JSON, XML) using standard HTTP headers such as Accept and Content-Type. This enables the creation of APIs that can serve multiple content types based on client preferences.</p> </li> <li> <p><code>Middleware Support</code>: Middleware components can be integrated into the request-response cycle to provide cross-cutting concerns such as authentication, authorization, logging, and error handling. The framework offers middleware hooks for intercepting and modifying requests and responses at various stages of processing.</p> </li> <li> <p><code>Data Validation and Serialization</code>: The framework includes built-in support for data validation and serialization, ensuring that incoming request data is validated against predefined schemas and serialized/deserialized correctly. This helps maintain data integrity and consistency within the API.</p> </li> <li> <p><code>Error Handling</code>: Comprehensive error handling mechanisms are provided to handle exceptions and errors gracefully within the framework. Developers can define error handlers to capture and process errors, returning appropriate HTTP status codes and error messages to clients for effective error communication.</p> </li> </ul> <p>By offering a rich set of features for resource-oriented design, HTTP method mapping, request routing, content negotiation, middleware support, data validation, serialization, and error handling, the HTTP RESTful Services Framework simplifies the development of RESTful APIs within the scripting environment. It enables developers to create scalable, maintainable, and interoperable web services that adhere to REST principles and best practices.</p>"},{"location":"platform/sdk/http/rs/#example-usage","title":"Example Usage","text":"<pre><code>import { rs } from \"sdk/http\";\n\nrs.service()\n    .resource(\"\")\n    .get(function (_ctx, _request, response) {\n        response.println(\"Hello there!\");\n    })\n    .execute();\n</code></pre>"},{"location":"platform/sdk/http/rs/#functions","title":"Functions","text":"Function Description Returns service(mappings?) Creates an HttpController instance, optionally initialized with a JS configuration or ResourceMappings object HttpController"},{"location":"platform/sdk/http/rs/#objects","title":"Objects","text":""},{"location":"platform/sdk/http/rs/#httpcontroller","title":"HttpController","text":"Property Description Returns execute(request?, response?) processes HTTP requests, to match path, method and constraints to resource mappings and invoke callback handler functions accordingly and generate response. --- mappings() Returns the mappings configured for this controller instance. ResourceMapppngs"},{"location":"platform/sdk/http/rs/#resourcemappings","title":"ResourceMappings","text":"Property Description Returns resource(configuration?) Returns the resource configuration object optionally initialized with oConfiguration Resource configuration() Returns the configuration for this ResourceMappings object Object readonly() Disables all but GET requests to this API ResourceMappings disable(sPath, verb, arrConsumes, arrProduces) Disables the handling of requests sent to path path with HTTP method verb and with consumes media type arrConsumes and produces media type arrProduces media type constraints ResourceMappings find(path, verb, arrConsumes, arrProduces) Finds a request handler for requests sent to path path with HTTP method verb and with consumes media type arrConsumes and produces media type arrProduces media type constraints ResourceMethod execute(request?, response?) Executes the service ----"},{"location":"platform/sdk/http/rs/#resource","title":"Resource","text":"Property Description Returns get(serveCallback?) Returns the get method configuration object, optionally configured with serveCallback for serving requests ResourceMethod post(serveCallback?) Returns the post method configuration object, optionally configured with serveCallback for serving requests ResourceMethod put(serveCallback?) Returns the put method configuration object, optionally configured with serveCallback for serving requests ResourceMethod delete(serveCallback?) Returns the delete method configuration object, optionally configured with serveCallback for serving requests ResourceMethod remove(serveCallback?) Same as delete() ResourceMethod method(httpVerb, configuration?) Returns the a method configuration object for the sHttpVerb HTTP method name and optionally initialized with configuration object ResourceMethod configuration() Returns the configuration for this Resource object Object readonly() Disables all but GET requests to this resource ResourceMappings disable(verb, arrConsumes, arrProduces) Disables the handling of requests sent to this resource path with HTTP method sVerb and with consumes media type arrConsumes and produces media type arrProduces media type constraints ResourceMappings find(verb, arrConsumes, arrProduces) Finds a request handler for requests sent to this resource path with HTTP method sVerb and with consumes media type arrConsumes and produces media type arrProduces media type constraints ResourceMethod execute(request?, response?) Executes the service ----"},{"location":"platform/sdk/http/rs/#resourcemethod","title":"ResourceMethod","text":"Property Description Returns configuration() Returns the configuration for this ResourceMethod object Object consumes(arrMediaTypeStrings) Assigns a consumes constraint for this verb handler configuration. ResourceMethod produces(arrMediaTypeStrings) Assigns a produces constraint for this verb handler configuration. ResourceMethod before(function) Assign a before callback function for this verb handler configuration ResourceMethod serve(function) Assign a verb handler function for this verb handler configuration ResourceMethod catch(function) Assign a catch on error callback function for this verb handler configuration ResourceMethod finally(function) Assign a finally callback function for this verb handler configuration ResourceMethod execute(request?, response?) Executes the service ----"},{"location":"platform/sdk/http/session/","title":"HTTP Session","text":"<p>The HTTP Session object provided by the scripting services implementation serves as a mechanism for maintaining session state and storing session attributes across multiple client requests within the same session context. Sessions enable web applications to associate data with a specific client's interaction with the server over a period of time, facilitating stateful communication and personalized user experiences.</p> <p>Key features of the HTTP Session object include:</p> <ul> <li> <p><code>Stateful Communication</code>: The HTTP Session object allows web applications to maintain stateful communication with clients by associating session attributes with unique session identifiers. This enables the server to recognize and track clients across multiple requests, providing continuity and context throughout the client's interaction with the application.</p> </li> <li> <p><code>Attribute Storage</code>: Session attributes, represented as key-value pairs, can be stored within the HTTP Session object to preserve data relevant to the current session. These attributes can include user preferences, authentication tokens, shopping cart contents, and other session-specific information that needs to persist across multiple requests.</p> </li> <li> <p><code>Scalability</code>: The HTTP Session object supports scalable session management, allowing web applications to handle large numbers of concurrent sessions efficiently. Session data can be stored either in-memory, in external data stores (e.g., databases, caches), or using distributed session management techniques to ensure optimal performance and resource utilization.</p> </li> <li> <p><code>Session Lifecycle</code>: Sessions have a well-defined lifecycle consisting of creation, access, and termination phases. Session creation occurs when a client initiates a new session by interacting with the application for the first time. Subsequent requests from the same client are associated with the existing session, allowing access to previously stored session attributes. Sessions can be terminated either explicitly by the client or automatically after a period of inactivity, releasing associated resources and freeing up server memory.</p> </li> <li> <p><code>Session Management</code>: The HTTP Session object provides methods for managing session attributes, including retrieval, addition, modification, and removal of attributes. This allows developers to manipulate session data dynamically based on the requirements of the application and the actions performed by the client.</p> </li> <li> <p><code>Security</code>: Sessions support various security measures to prevent unauthorized access and tampering of session data. These include session ID generation strategies, encryption of session attributes, and integration with authentication and access control mechanisms to ensure the confidentiality and integrity of session information.</p> </li> </ul> <p>By offering a robust set of features for stateful communication, attribute storage, scalability, lifecycle management, session management, and security, the HTTP Session object facilitates the development of dynamic and interactive web applications that require session-based interactions with clients. It provides a flexible and reliable mechanism for preserving session state and delivering personalized user experiences in web-based environments.</p>"},{"location":"platform/sdk/http/session/#example-usage","title":"Example Usage","text":"<pre><code>import { session, response } from \"sdk/http\";\n\nsession.setAttribute(\"attr1\", \"value1\");\nlet attr = session.getAttribute(\"attr1\");\n\nresponse.println(\"[Attribute]: \" + attr);\nresponse.flush();\nresponse.close();\n</code></pre>"},{"location":"platform/sdk/http/session/#functions","title":"Functions","text":"Function Description Returns isValid() Returns true if the current execution context is in a HTTP call boolean getAttribute(name) Returns the HTTP session attribute by name string getAttributeNames() Returns all the HTTP session attributes names array of string getCreationTime() Returns the time when the HTTP session has been initialized Date getId() Returns the HTTP session ID string getLastAccessedTime() Returns the time when the HTTP session has been last accessed Date getMaxInactiveInterval() Returns the maximum inactive interval of this HTTP session int invalidate() Invalidates this HTTP session - isNew() Returns true, if the HTTP session is created during this HTTP call and false otherwise boolean setAttribute(name, value) Sets the HTTP session attribute by name and value string removeAttribute(name) Removes the HTTP session attribute by name string setMaxInactiveInterval(interval) Sets the maximum inactive interval of this HTTP session -"},{"location":"platform/sdk/http/upload/","title":"HTTP Upload","text":"<p>The HTTP Upload module facilitates the handling of file uploads within the scripting environment by consuming files posted as multipart requests. This module enables developers to receive, process, and store files uploaded by clients via HTTP requests.</p> <p>Key features of the HTTP Upload module include:</p> <ul> <li> <p><code>Multipart Request Parsing</code>: The module parses incoming HTTP requests encoded as multipart/form-data, extracting the uploaded files along with their associated metadata such as filename, content type, and form field name. This allows developers to access and manipulate the uploaded files within their scripting logic.</p> </li> <li> <p><code>File Storage</code>: Uploaded files can be stored temporarily or permanently based on the application's requirements. Developers can specify the destination directory or storage mechanism for saving the uploaded files, ensuring that they are securely stored and accessible for further processing.</p> </li> <li> <p><code>File Handling</code>: The module provides APIs for interacting with uploaded files, including methods for reading file contents, extracting metadata, and performing file operations such as renaming, copying, moving, or deleting. Developers have full control over the uploaded files and can implement custom logic to handle them according to their application's needs.</p> </li> <li> <p><code>Error Handling</code>: Comprehensive error handling mechanisms are integrated into the module to handle exceptions and errors related to file uploads. Developers can define error handlers to capture and process upload failures, ensuring robustness and reliability in file processing workflows.</p> </li> <li> <p><code>Security</code>: The module includes security features to mitigate common risks associated with file uploads, such as file size limitations, content type restrictions, and validation of uploaded file contents. By enforcing security measures, developers can prevent malicious uploads and safeguard their application's integrity.</p> </li> <li> <p><code>Asynchronous Processing</code>: File uploads can be processed asynchronously to avoid blocking the main thread and improve application responsiveness. Developers can leverage asynchronous programming techniques to handle large file uploads efficiently without impacting the performance of other requests.</p> </li> <li> <p><code>Integration with Frameworks</code>: The module seamlessly integrates with popular web frameworks and middleware components, allowing developers to incorporate file upload functionality into their existing applications with minimal effort. Whether building web applications, APIs, or microservices, the HTTP Upload module provides flexible integration options to suit diverse development scenarios.</p> </li> </ul> <p>By offering a range of features for multipart request parsing, file storage, handling, error management, security, asynchronous processing, and framework integration, the HTTP Upload module simplifies the handling of file uploads within the scripting environment. It empowers developers to build robust, scalable, and secure applications that support file upload functionality with ease.</p>"},{"location":"platform/sdk/http/upload/#example-usage","title":"Example Usage","text":"<pre><code>import { upload, request, response } from \"sdk/http\";\n\nif (request.getMethod() === \"POST\") {\n    if (upload.isMultipartContent()) {\n        const fileItems = upload.parseRequest();\n        for (let i = 0; i &lt; fileItems.size(); i++) {\n            const fileItem = fileItems.get(i);\n            const contentType = fileItem.getContentType();\n            console.log(`Content Type: ${contentType}`);\n            console.log(`Filename: ${fileItem.getOriginalFilename()}`);\n            // console.log(`Text: ${fileItem.getText()}`);\n\n            response.setContentType(contentType);\n            response.write(fileItem.getBytesNative());\n        }\n    } else {\n        response.println(\"The request's content must be 'multipart'\");\n    }\n} else if (request.getMethod() === \"GET\") {\n    response.println(\"Use POST request.\");\n}\n\nresponse.flush();\nresponse.close();\n</code></pre>"},{"location":"platform/sdk/http/upload/#sample-html-page","title":"Sample HTML Page","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;body&gt;\n        &lt;form action=\"/services/js/http-tests/upload/upload.js\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n            &lt;label for=\"file\"&gt;Filename:&lt;/label&gt;\n            &lt;input type=\"file\" name=\"file\" id=\"file\" multiple&gt;\n            &lt;br&gt;\n            &lt;input type=\"submit\" name=\"submit\" value=\"Submit\"&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"platform/sdk/http/upload/#functions","title":"Functions","text":"Function Description Returns isMultipartContent() Returns true if the HTTP request contains files content and false otherwise boolean parseRequest() Returns a HttpFileItems object by parsing the HTTP request HttpFileItems"},{"location":"platform/sdk/http/upload/#objects","title":"Objects","text":""},{"location":"platform/sdk/http/upload/#httpfileitems","title":"HttpFileItems","text":"Function Description Returns get(index) The HttpFileItem object by the index HttpFileItem size() The size of the list of HttpFileItem objects HttpFileItem"},{"location":"platform/sdk/http/upload/#httpfileitem","title":"HttpFileItem","text":"Function Description Returns getName() The HttpFileItem's name string getOriginalFilename() The original file name string getContentType() The HttpFileItem's data content type string isEmpty() Returns whether the file is empty boolean getSize() The HttpFileItem's size long getBytes() Return the HttpFileItem's content as byte array array of byte getBytesNative() Return the HttpFileItem's content as Java byte array array of Java byte getText() Return the HttpFileItem's content as string string getInputStream() Return the input stream of the HttpFileItem's content streams.InputStream"},{"location":"platform/sdk/indexing/","title":"Indexing Module","text":"<p>Welcome to the Indexing Module documentation. This module provides powerful tools for indexing and searching text content, facilitating efficient retrieval of information within your applications. Below are the main components of the Indexing Module:</p> <ol> <li>Indexing Writer: An object for storing text content with additional parameters for later high-performant free-text search. It is backed by the Apache Lucene.</li> <li>Indexing Searcher: An object used for free-text or exact phrase searches over the added documents with the Indexing Writer. It is backed by the Apache Lucene.</li> </ol>"},{"location":"platform/sdk/indexing/#indexing-writer","title":"Indexing Writer","text":"<p>The Indexing Writer is an object designed to store text content along with additional parameters, enabling high-performance free-text search operations in the future. Leveraging the power of Apache Lucene, the Indexing Writer ensures efficient indexing and retrieval of textual data.</p>"},{"location":"platform/sdk/indexing/#indexing-searcher","title":"Indexing Searcher","text":"<p>The Indexing Searcher serves as a robust tool for conducting free-text or exact phrase searches over documents indexed by the Indexing Writer. Built on Apache Lucene, the Indexing Searcher enables fast and accurate retrieval of indexed content, making it ideal for applications requiring sophisticated search functionality.</p>"},{"location":"platform/sdk/indexing/searcher/","title":"Indexing Searcher","text":"<p>The Indexing Searcher, a core component of the Indexing Module, serves as a powerful tool for conducting free-text or exact phrase searches over documents indexed by the Indexing Writer. Built on top of the robust Apache Lucene framework, the Indexing Searcher offers efficient and accurate retrieval of indexed content.</p> <p>With the Indexing Searcher, users can perform comprehensive searches across indexed documents, leveraging advanced text analysis and search algorithms provided by Apache Lucene. Whether searching for specific keywords, phrases, or exact terms, the Indexing Searcher delivers fast and relevant results, making it ideal for applications requiring sophisticated search functionality.</p> <p>By utilizing the Indexing Searcher, developers can empower their applications with high-performance search capabilities, enabling users to quickly locate relevant information within large datasets. Whether used in document management systems, knowledge bases, or search engines, the Indexing Searcher provides a reliable solution for retrieving indexed content with precision and speed.</p>"},{"location":"platform/sdk/indexing/searcher/#example-usage","title":"Example Usage","text":"<pre><code>import { writer, searcher } from \"sdk/indexing\";\n\nwriter.add(\"index2\", \"file1\", \"apache lucene\", new Date(123));\nwriter.add(\"index2\", \"file2\", \"lucene - the search engine\", new Date(234), { \"name2\": \"value2\" });\nwriter.add(\"index2\", \"file3\", \"search engine\", new Date(345), { \"name2\": \"value2\" });\n\nlet found = searcher.between(\"index2\", new Date(124), new Date(344));\n\nconsole.log(JSON.stringify(found))\n</code></pre>"},{"location":"platform/sdk/indexing/searcher/#functions","title":"Functions","text":"Function Description Returns search(index, term) Returns an array of document descriptors matching the term list of descriptors before(index, date) Returns an array of document descriptors where lastModified is before the date list of descriptors after(index, date) Returns an array of document descriptors where lastModified is after the date list of descriptors between(index, lower, upper) Returns an array of document descriptors where lastModified is between the lower and upper list of descriptors"},{"location":"platform/sdk/indexing/writer/","title":"Indexing Writer","text":"<p>The Indexing Writer is an object, designed to store text content along with additional parameters for efficient free-text search operations. Powered by the Apache Lucene framework, the Indexing Writer offers a robust solution for indexing and searching textual data. </p> <p>With the Indexing Writer, users can store text content along with metadata attributes, enabling fast and accurate retrieval of information based on search queries. This functionality is particularly useful in applications where efficient search capabilities are essential, such as document management systems, content repositories, or data analytics platforms.</p>"},{"location":"platform/sdk/indexing/writer/#example-usage","title":"Example Usage","text":"<pre><code>import { writer, searcher } from \"sdk/indexing\";\n\nwriter.add(\"index1\", \"file1\", \"apache lucene\", new Date(), { \"name1\": \"value1\" });\nwriter.add(\"index1\", \"file2\", \"lucene - the search engine\", new Date(), { \"name2\": \"value2\" });\n\nlet found = searcher.search(\"index1\", \"lucene\");\n\nconsole.log(JSON.stringify(found))\n</code></pre>"},{"location":"platform/sdk/indexing/writer/#functions","title":"Functions","text":"Function Description Returns add(index, location, contents, lastModified, parameters) Adds a document contents with the given location and parameters to an index -"},{"location":"platform/sdk/io/","title":"IO Module","text":"<p>The IO Module provides a range of functionalities for interacting with input/output operations, including handling bytes, files, FTP servers, streams, and zip archives. These utilities are designed to simplify common tasks related to data manipulation, file management, network communication, and archive creation.</p>"},{"location":"platform/sdk/io/#apis","title":"APIs","text":""},{"location":"platform/sdk/io/#bytes-api","title":"Bytes API","text":"<p>The Bytes API provides utility functions for working with bytes, including converting text to byte arrays and vice versa. It also provides methods for converting between native JavaScript byte arrays and Java byte arrays.</p>"},{"location":"platform/sdk/io/#files-api","title":"Files API","text":"<p>The Files API provides access to the underlying file system, allowing users to perform various operations such as listing files, checking file existence, reading and writing files, managing file permissions, and more.</p>"},{"location":"platform/sdk/io/#ftp-client-api","title":"FTP Client API","text":"<p>The FTP Client API offers utility functions for interacting with FTP servers. It enables users to perform operations such as connecting to FTP servers, uploading and downloading files, listing directories, deleting files, and creating directories.</p>"},{"location":"platform/sdk/io/#streams-api","title":"Streams API","text":"<p>The Streams API provides classes and utilities for working with streams, including input streams and output streams. It offers methods for creating streams from files, manipulating stream data, and performing stream operations.</p>"},{"location":"platform/sdk/io/#zip-api","title":"Zip API","text":"<p>The Zip API offers functionality for creating zip archives from files. It provides methods for creating, reading, and manipulating zip archives, including adding files to archives, extracting files from archives, and compressing and decompressing archive contents.</p>"},{"location":"platform/sdk/io/bytes/","title":"Bytes","text":"<p>The Bytes module provides utility functions for working with bytes, offering seamless conversion between text and byte arrays.</p>"},{"location":"platform/sdk/io/bytes/#overview","title":"Overview","text":""},{"location":"platform/sdk/io/bytes/#texttobytearraytext","title":"textToByteArray(text)","text":"<p>Converts a text string into a byte array.</p> <ul> <li>Parameters:</li> <li> <p><code>text</code>: The text string to be converted.</p> </li> <li> <p>Returns: An array of bytes representing the text.</p> </li> </ul>"},{"location":"platform/sdk/io/bytes/#bytearraytotextbytes","title":"byteArrayToText(bytes)","text":"<p>Converts a byte array into a text string.</p> <ul> <li>Parameters:</li> <li> <p><code>bytes</code>: The byte array to be converted.</p> </li> <li> <p>Returns: A string representing the byte array as text.</p> </li> </ul>"},{"location":"platform/sdk/io/bytes/#tojavabytesbytes","title":"toJavaBytes(bytes)","text":"<p>Converts a native JavaScript byte array to a Java byte array, suitable for internal use by the API layer.</p> <ul> <li>Parameters:</li> <li> <p><code>bytes</code>: The native JavaScript byte array to be converted.</p> </li> <li> <p>Returns: An array of Java bytes.</p> </li> </ul>"},{"location":"platform/sdk/io/bytes/#tojavascriptbytesbytes","title":"toJavaScriptBytes(bytes)","text":"<p>Converts a Java byte array to a native JavaScript byte array, suitable for internal use by the API layer.</p> <ul> <li>Parameters:</li> <li> <p><code>bytes</code>: The Java byte array to be converted.</p> </li> <li> <p>Returns: An array of JavaScript bytes.</p> </li> </ul>"},{"location":"platform/sdk/io/bytes/#example-usage","title":"Example Usage","text":"<pre><code>import { bytes } from \"sdk/io\"\n\nconsole.log(bytes.textToByteArray(\"Hello World\"));\nconsole.log(bytes.byteArrayToText([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]));\n</code></pre>"},{"location":"platform/sdk/io/bytes/#functions","title":"Functions","text":"Function Description Returns textToByteArray(text) Converts a text to a byte array array of bytes byteArrayToText(bytes) Converts a byte array to text string toJavaBytes(bytes) Convert the native JavaScript byte array to Java one, to be used internally by the API layer array of Java bytes toJavaScriptBytes(bytes) Convert the Java byte array to a native JavaScript one, to be used internally by the API layer array of JavaScript bytes"},{"location":"platform/sdk/io/files/","title":"Files","text":"<p>The Files module provides access to the underlying File System, offering a wide range of functions for managing files and directories.</p>"},{"location":"platform/sdk/io/files/#overview","title":"Overview","text":""},{"location":"platform/sdk/io/files/#listpath","title":"list(path)","text":"<p>Lists the files under the specified path.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the directory to list files from.</p> </li> <li> <p>Returns: An array of strings representing the files under the specified path.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#existspath","title":"exists(path)","text":"<p>Checks whether a file exists at the specified path.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file to check for existence.</p> </li> <li> <p>Returns: A boolean value indicating whether the file exists.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#isexecutablepath","title":"isExecutable(path)","text":"<p>Checks whether the file at the specified path is executable.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file to check.</p> </li> <li> <p>Returns: A boolean value indicating whether the file is executable.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#isreadablepath","title":"isReadable(path)","text":"<p>Checks whether the file at the specified path is readable.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file to check.</p> </li> <li> <p>Returns: A boolean value indicating whether the file is readable.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#iswritablepath","title":"isWritable(path)","text":"<p>Checks whether the file at the specified path is writable.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file to check.</p> </li> <li> <p>Returns: A boolean value indicating whether the file is writable.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#ishiddenpath","title":"isHidden(path)","text":"<p>Checks whether the file at the specified path is hidden.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file to check.</p> </li> <li> <p>Returns: A boolean value indicating whether the file is hidden.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#isdirectorypath","title":"isDirectory(path)","text":"<p>Checks whether the file at the specified path is a directory.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file to check.</p> </li> <li> <p>Returns: A boolean value indicating whether the file is a directory.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#isfilepath","title":"isFile(path)","text":"<p>Checks whether the file at the specified path is a regular file.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file to check.</p> </li> <li> <p>Returns: A boolean value indicating whether the file is a regular file.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#issamefilepath1-path2","title":"isSameFile(path1, path2)","text":"<p>Checks whether two paths point to the same file.</p> <ul> <li>Parameters:</li> <li><code>path1</code>: The first path to compare.</li> <li> <p><code>path2</code>: The second path to compare.</p> </li> <li> <p>Returns: A boolean value indicating whether the two paths point to the same file.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#getcanonicalpathpath","title":"getCanonicalPath(path)","text":"<p>Returns the canonical path of the file at the specified path.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file.</p> </li> <li> <p>Returns: A string representing the canonical path of the file.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#getnamepath","title":"getName(path)","text":"<p>Returns the name of the file or directory at the specified path.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file or directory.</p> </li> <li> <p>Returns: A string representing the name of the file or directory.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#getparentpathpath","title":"getParentPath(path)","text":"<p>Returns the parent directory's path of the file or directory at the specified path.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file or directory.</p> </li> <li> <p>Returns: A string representing the parent directory's path.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#readbytespath","title":"readBytes(path)","text":"<p>Returns the content of the file at the specified path as a byte array.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file.</p> </li> <li> <p>Returns: An array of bytes representing the content of the file.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#readbytesnativepath","title":"readBytesNative(path)","text":"<p>Returns the content of the file at the specified path as an array of Java bytes.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file.</p> </li> <li> <p>Returns: An array of Java bytes representing the content of the file.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#readtextpath","title":"readText(path)","text":"<p>Returns the content of the file at the specified path as a string.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file.</p> </li> <li> <p>Returns: A string representing the content of the file.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#writebytespath-bytes","title":"writeBytes(path, bytes)","text":"<p>Writes the given byte array content to the file at the specified path.</p> <ul> <li>Parameters:</li> <li><code>path</code>: The path of the file.</li> <li> <p><code>bytes</code>: The byte array content to write.</p> </li> <li> <p>Returns: None.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#writebytesnativepath-bytes","title":"writeBytesNative(path, bytes)","text":"<p>Writes the given array of Java bytes content to the file at the specified path.</p> <ul> <li>Parameters:</li> <li><code>path</code>: The path of the file.</li> <li> <p><code>bytes</code>: The array of Java bytes content to write.</p> </li> <li> <p>Returns: None.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#writetextpath-text","title":"writeText(path, text)","text":"<p>Writes the given text content to the file at the specified path.</p> <ul> <li>Parameters:</li> <li><code>path</code>: The path of the file.</li> <li> <p><code>text</code>: The text content to write.</p> </li> <li> <p>Returns: None.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#getlastmodifiedpath","title":"getLastModified(path)","text":"<p>Returns the last modification date of the file at the specified path.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file.</p> </li> <li> <p>Returns: A Date object representing the last modification date.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#setlastmodifiedpath-date","title":"setLastModified(path, date)","text":"<p>Sets the last modification date of the file at the specified path.</p> <ul> <li>Parameters:</li> <li><code>path</code>: The path of the file.</li> <li> <p><code>date</code>: The Date object representing the last modification date.</p> </li> <li> <p>Returns: None.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#getownerpath","title":"getOwner(path)","text":"<p>Returns the owner of the file at the specified path.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file.</p> </li> <li> <p>Returns: A string representing the owner of the file.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#setownerpath-owner","title":"setOwner(path, owner)","text":"<p>Sets the owner of the file at the specified path.</p> <ul> <li>Parameters:</li> <li><code>path</code>: The path of the file.</li> <li> <p><code>owner</code>: The owner to set for the file.</p> </li> <li> <p>Returns: None.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#getpermissionspath","title":"getPermissions(path)","text":"<p>Returns the POSIX permissions of the file at the specified path.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file.</p> </li> <li> <p>Returns: A string representing the POSIX permissions of the file.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#setpermissionspath-permissions","title":"setPermissions(path, permissions)","text":"<p>Sets the POSIX permissions of the file at the specified path.</p> <ul> <li>Parameters:</li> <li><code>path</code>: The path of the file.</li> <li> <p><code>permissions</code>: The permissions to set for the file.</p> </li> <li> <p>Returns: None.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#sizepath","title":"size(path)","text":"<p>Returns the size of the file at the specified path.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file.</p> </li> <li> <p>Returns: A long value representing the size of the file.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#createfilepath","title":"createFile(path)","text":"<p>Creates a new file at the specified path.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file to create.</p> </li> <li> <p>Returns: None.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#createdirectorypath","title":"createDirectory(path)","text":"<p>Creates a new directory at the specified path.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the directory to create.</p> </li> <li> <p>Returns: None.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#copysource-target","title":"copy(source, target)","text":"<p>Copies a file from the source path to the target path.</p> <ul> <li>Parameters:</li> <li><code>source</code>: The source path of the file to copy.</li> <li> <p><code>target</code>: The target path to copy the file to.</p> </li> <li> <p>Returns: None.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#movesource-target","title":"move(source, target)","text":"<p>Moves a file from the source path to the target path.</p> <ul> <li>Parameters:</li> <li><code>source</code>: The source path of the file to move.</li> <li> <p><code>target</code>: The target path to move the file to.</p> </li> <li> <p>Returns: None.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#deletefilepath","title":"deleteFile(path)","text":"<p>Deletes the file at the specified path.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file to delete.</p> </li> <li> <p>Returns: None.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#deletedirectorypath","title":"deleteDirectory(path)","text":"<p>Deletes the directory at the specified path.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the directory to delete.</p> </li> <li> <p>Returns: None.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#createtempfileprefix-suffix","title":"createTempFile(prefix, suffix)","text":"<p>Creates a new temporary file with the given prefix and suffix.</p> <ul> <li>Parameters:</li> <li><code>prefix</code>: The prefix for the temporary file name.</li> <li> <p><code>suffix</code>: The suffix for the temporary file name.</p> </li> <li> <p>Returns: None.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#createtempdirectoryprefix","title":"createTempDirectory(prefix)","text":"<p>Creates a new temporary directory with the given prefix.</p> <ul> <li>Parameters:</li> <li> <p><code>prefix</code>: The prefix for the temporary directory name.</p> </li> <li> <p>Returns: None.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#createinputstreampath","title":"createInputStream(path)","text":"<p>Creates an InputStream pointing to the file at the specified path.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file.</p> </li> <li> <p>Returns: A streams.InputStream object representing the InputStream.</p> </li> </ul>"},{"location":"platform/sdk/io/files/#createoutputstreampath","title":"createOutputStream(path)","text":"<p>Creates an OutputStream pointing to the file at the specified path.</p> <ul> <li>Parameters:</li> <li> <p><code>path</code>: The path of the file.</p> </li> <li> <p>Returns: A streams.OutputStream object representing the OutputStream.</p> </li> </ul> <p>Note</p> <pre><code>Note that the parameter `path` takes either an absolute path or relative path from your working instance\n</code></pre>"},{"location":"platform/sdk/io/files/#example-usage","title":"Example Usage","text":"<pre><code>import { files } from \"sdk/io\";\n\nlet tempFile = files.createTempFile(\"file\", \".txt\");\n\nconsole.log(\"Temp file: \" + tempFile);\n\nfiles.writeText(tempFile, \"Sample text here...\");\nfiles.deleteFile(tempFile);\n</code></pre>"},{"location":"platform/sdk/io/files/#constants","title":"Constants","text":"Constant Description Returns separator OS file separator string"},{"location":"platform/sdk/io/files/#functions","title":"Functions","text":"Function Description Returns list(path) List files under this path array of string exists(path) Whether a file by this path exists boolean isExecutable(path) Whether the file by this path is executable boolean isReadable(path) Whether the file by this path is readable boolean isWritable(path) Whether the file by this path is writable boolean isHidden(path) Whether the file by this path is hidden boolean isDirectory(path) Whether the file by this path is directory boolean isFile(path) Whether the file by this path is file boolean isSameFile(path1, path2) Whether the files by these path1 and path2 are pointing to the same file boolean getCanonicalPath(path) Returns the canonical path of the file by this path string getName(path) Returns the name of the file by this path string getParentPath(path) Returns the parent's path of the file by this path string readBytes(path) Returns the content of the given file as byte array array of bytes readBytesNative(path) Returns the content of the given file as array of Java bytes array of Java bytes readText(path) Returns the content of the given file as string string writeBytes(path, bytes) Writes the given byte array content to the file - writeBytesNative(path, bytes) Writes the given array of Java bytes content to the file - writeText(path, text) Writes the given text content to the file - getLastModified(path) Returns the last modification date of the file by this path Date setLastModified(path, date) Sets the last modification date of the file by this path - getOwner(path) Returns the owner of the file by this path string setOwner(path, owner) Sets the owner of the file by this path - getPermissions(path) Returns the POSIX permissions of the file by this path string setPermissions(path, owner) Sets the POSIX permissions of the file by this path - size(path) Returns the size of the file by this path long createFile(path) Creates a new file by the given path - createDirectory(path) Creates a new directory by the given path - copy(source, target) Copies a source file to a target - move(source, target) Moves a source file to a target - deleteFile(path) Deletes the file by the given path - deleteDirectory(path) Deletes the directory by the given path - createTempFile(prefix, suffix) Creates a new temporary file by the given prefix and suffix - createTempDirectory(prefix) Creates a new temporary directory by the given prefix - createInputStream(path) Creates an InputStream pointing to a file by the given path streams.InputStream createOutputStream(path) Creates an OutputStream pointing to a file by the given path streams.OutputStream"},{"location":"platform/sdk/io/ftp/","title":"FTP Client","text":"<p>The FTP Client API provides utility functions for interacting with FTP servers. This API enables users to perform various operations such as connecting to FTP servers, navigating directories, downloading and uploading files, deleting files and directories, creating directories, and renaming files. With the FTP Client API, developers can integrate FTP functionality into their applications, allowing seamless communication with FTP servers for data exchange and management.</p>"},{"location":"platform/sdk/io/ftp/#example-usage","title":"Example Usage","text":"<pre><code>import { ftp } from \"sdk/io\";\nimport { response } from \"sdk/http\";\n\nconst host = \"test.rebex.net\";\nconst port = 21;\nconst userName = \"demo\";\nconst password = \"password\";\n\nlet ftpClient = ftp.getClient(host, port, userName, password);\nlet file = ftpClient.getFileText(\"/\", \"readme.txt\");\n\nresponse.println(file);\n</code></pre>"},{"location":"platform/sdk/io/ftp/#functions","title":"Functions","text":"Function Description Returns getClient(host, port, userName, password) Returns a FTP Client instance FTPClient"},{"location":"platform/sdk/io/ftp/#objects","title":"Objects","text":""},{"location":"platform/sdk/io/ftp/#ftpclient","title":"FTPClient","text":"Function Description Returns getRootFolder() Gets the root folder FTPFolder getFile(path, fileName) Gets the file content as an input stream InputStream getFileBinary(path, fileName) Gets the file content as byte array byte array getFileText(path, fileName) Gets the file content as string string getFolder(path, folderName) Gets the folder FTPFolder createFile(path, fileName, inputStream) Creates file from InputStream and return true if the file was created successfully boolean createFileBinary(path, fileName, bytes) Creates file from byte array and return true if the file was created successfully boolean createFileText(path, fileName, text) Creates file from string and return true if the file was created successfully boolean appendFile(path, fileName, inputStream) Appends InputStream to file and return true if the file was created successfully boolean appendFileBinary(path, fileName, bytes) Appends byte array to file and return true if the file was created successfully boolean appendFileText(path, fileName, text) Appends string to file and return true if the file was created successfully boolean createFolder(path, folderName) Creates folder FTPFolder deleteFile(path, fileName) Deletes file boolean deleteFolder(path, folderName) Deletes folder boolean close() Closes the FPT client -"},{"location":"platform/sdk/io/ftp/#ftpfolder","title":"FTPFolder","text":"Function Description Returns getPath() Gets the folder path string getName() Gets the folder name string getFile(fileName) Gets FTPFile by fileName FTPFile getFolder(folderName) Gets FTPFolder by folderName FTPFolder list() Gets array of FTPObjects FTPObject array listFiles() Gets array of FTPFiles FTPFile array listFolders() Gets array of FTPFolder FTPFolder array createFile(fileName, inputStream) Creates file from InputStream and return true if the file was created successfully boolean createFileBinary(fileName, bytes) Creates file from byte array and return true if the file was created successfully boolean createFileText(fileName, text) Creates file from string and return true if the file was created successfully boolean createFolder(folder) Creates FTPFolder FTPFolder delete() Deletes the current folder boolean deleteFile(fileName) Deletes FTPFile boolean deleteFolder(folderName) Deletes FTPFolder boolean"},{"location":"platform/sdk/io/ftp/#ftpfile","title":"FTPFile","text":"Function Description Returns getPath() Gets the folder path string getName() Gets the folder name string getContent() Gets the file content InputStream getContentBinary() Gets the file content byte array getContentText() Gets the file content string setContent(inputStream) Sets the file content from an InputStream boolean setContentBinary(bytes) Sets the file content from byte array boolean setContentText(text) Sets the file content from string boolean appendContent(inputStream) Appends file content from an InputStream boolean appendContentBinary(bytes) Appends file content from an byte array boolean appendContentText(text) Appends file content from string boolean delete() Deletes the file boolean"},{"location":"platform/sdk/io/ftp/#ftpobject","title":"FTPObject","text":"Function Description Returns getPath() Gets the object path string getName() Gets the object name string isFile() Returns true if the object is file boolean isFolder() Returns true if the object is folder boolean getFile() Gets object as FTPFile FTPFile getFolder() Gets object as FTPFolder FTPFolder"},{"location":"platform/sdk/io/streams/","title":"Streams","text":"<p>The Streams API offers a set of classes and utilities tailored for working with streams in scripting environments. Streams are essential for handling data flow, enabling efficient reading from and writing to various sources and destinations. With the Streams API, developers gain access to functionality for managing input and output streams, performing operations such as reading, writing, buffering, and transforming data. This API facilitates seamless integration of stream-based operations into scripting workflows, enhancing data processing capabilities and enabling flexible handling of data streams.</p>"},{"location":"platform/sdk/io/streams/#basic-usage","title":"Basic Usage","text":"<pre><code>import { streams } from \"sdk/io\";\nimport { response } from \"sdk/http\";\n\nlet outputStream = streams.createByteArrayOutputStream();\n\noutputStream.writeText(\"Some text content\");\n\nlet bytes = outputStream.getBytes();\nresponse.println(\"[Stream Content as Bytes]: \" + bytes);\n\nlet text = String.fromCharCode.apply(String, bytes);\nresponse.println(\"[Stream Content as Text]: \" + text);\n\nlet inputStream = streams.createByteArrayInputStream(bytes);\nlet outputStreamCopy = streams.createByteArrayOutputStream();\nstreams.copy(inputStream, outputStreamCopy);\nlet copiedBytes = outputStreamCopy.getBytes();\nlet copiedText = String.fromCharCode.apply(String, copiedBytes);\nresponse.println(\"[Stream Copied Content as Text]: \" + copiedText);\n\nresponse.flush();\nresponse.close();\n</code></pre>"},{"location":"platform/sdk/io/streams/#functions","title":"Functions","text":"Function Description Returns copy(inputStream, outputStream) Copies an InputStream to an OutputStream - createByteArrayInputStream(bytes) Creates an ByteArrayInputStream from the array of bytes ByteArrayInputStream createByteArrayOutputStream() Creates an ByteArrayOutputStream ByteArrayOutputStream"},{"location":"platform/sdk/io/streams/#objects","title":"Objects","text":""},{"location":"platform/sdk/io/streams/#inputstream","title":"InputStream","text":"Function Description Returns readByte() Reads a single byte from this InputStream byte readBytes() Returns the array of bytes contained in this InputStream array of byte readText() Returns a string representation of the array of bytes contained in this InputStream string close() Closes this InputStream to release the resources -"},{"location":"platform/sdk/io/streams/#outputstream","title":"OutputStream","text":"Function Description Returns writeByte(byte) Writes a single byte to this OutputStream - writeBytes(bytes) Writes the array of bytes to this OutputStream array of byte readText() Returns a string representation of the array of bytes contained in this InputStream string close() Closes this OutputStream to release the resources -"},{"location":"platform/sdk/io/streams/#bytearrayinputstream","title":"ByteArrayInputStream","text":"<p>inherited from InputStream</p>"},{"location":"platform/sdk/io/streams/#bytearrayoutputstream","title":"ByteArrayOutputStream","text":"<p>inherited from OutputStream and:</p> Function Description Returns getBytes() Returns the array of bytes contained in this ByteArrayOutputStream array of byte getText() Returns a string representation of the array of bytes contained in this ByteArrayOutputStream string"},{"location":"platform/sdk/io/zip/","title":"ZIP","text":"<p>The Zip API provides essential functionality for creating zip archives from files in scripting environments. Zip archives are commonly used for compressing and packaging multiple files and directories into a single file, making it easier to distribute and transfer large amounts of data. With the Zip API, developers can efficiently create zip archives, add files and directories to them, and customize compression settings as needed. This API offers convenient methods for managing zip archives, enabling seamless integration of zip functionality into scripting workflows. Whether it's for bundling files for distribution or archiving data for storage, the Zip API equips developers with the tools needed to handle zip compression tasks effectively.</p>"},{"location":"platform/sdk/io/zip/#example-usage","title":"Example Usage","text":"<p>To test the API first create a zip file using the following snippet:</p> <pre><code>import { zip, files } from \"sdk/io\";\n\nlet outputStream = files.createOutputStream(\"test.zip\");\nlet zipOutputStream = zip.createZipOutputStream(outputStream);\n\nif (outputStream.isValid()) {\n    try {\n        zipOutputStream.createZipEntry(\"test1.txt\");\n        zipOutputStream.writeText(\"some text\");\n        zipOutputStream.createZipEntry(\"test2.bin\");\n        zipOutputStream.write([60, 61, 62, 63]);\n    } finally {\n        zipOutputStream.close();\n    }\n}\n</code></pre> <p>Then you can read the contents of the zip file:</p> <pre><code>import { zip, files } from \"sdk/io\";\n\nlet inputStream = files.createInputStream(\"test.zip\");\nlet zipInputStream = zip.createZipInputStream(inputStream);\n\nif (inputStream.isValid()) {\n    try {\n        let zipEntry = zipInputStream.getNextEntry();\n        while (zipEntry.isValid()) {\n            console.log(zipEntry.getName());\n            console.log(zipInputStream.read());\n            zipEntry = zipInputStream.getNextEntry();\n        }\n    }\n    finally {\n        zipInputStream.close();\n    }\n} else {\n    console.log('No such file');\n}\n</code></pre>"},{"location":"platform/sdk/io/zip/#functions","title":"Functions","text":"Function Description Returns createZipInputStream(inputStream) Returns the Zip archive reader object ZipInputStream createZipOutputStream(outputStream) Returns the Zip archive writer object ZipOutputStream"},{"location":"platform/sdk/io/zip/#objects","title":"Objects","text":""},{"location":"platform/sdk/io/zip/#zipinputstream","title":"ZipInputStream","text":"Function Description Returns getNextEntry() Returns the next entry from the archive or null if no more entries found ZipEntry read() Reads from the zip input stream at the current entry point and returns the result as array of bytes array of bytes readNative() Reads from the zip input stream at the current entry point and returns the result as array of Java bytes array of Java bytes readText() Reads from the zip input stream at the current entry point and returns the result as text string close() Closes the zip input stream -"},{"location":"platform/sdk/io/zip/#zipoutputstream","title":"ZipOutputStream","text":"Function Description Returns createZipEntry() Returns a new entry for the archive ZipEntry write(bytes) Writes an array of bytes to the zip output stream at the current entry point - writeNative(bytes) Writes an array of Java bytes to the zip output stream at the current entry point - writeText(text) Writes a text to the zip output stream at the current entry point - closeEntry() Closes the current entry (optional) - close() Finishes, flushes and closes the zip output stream -"},{"location":"platform/sdk/io/zip/#zipentry","title":"ZipEntry","text":"Function Description Returns getName() Returns the name of the entry string getSize() Returns the size of the entry integer getCompressedSize() Returns the compressed size of the entry integer getTime() Returns the time stamp of the entry integer getCrc() Returns the CRC sum of the entry integer getComment() Returns the comment text of the entry integer isDirectory() Returns true if the entry represents a directory and false otherwise integer isValid() Returns true if the entry is a valid one and false otherwise (after last) boolean"},{"location":"platform/sdk/job/","title":"Job Module","text":"<p>Welcome to the Job Module documentation. This module provides functionality for managing scheduled jobs, automating tasks, and handling background processes within the system. Below are the APIs available in this module:</p> <ol> <li>Job Scheduler API</li> </ol> <p>Let's explore each API in detail:</p>"},{"location":"platform/sdk/job/#job-scheduler-api","title":"Job Scheduler API","text":"<p>The Job Scheduler API allows developers to manage scheduled jobs, trigger job executions, and control job behavior. It provides functions for listing all registered user jobs, retrieving specific job details, enabling or disabling job execution, triggering job executions with custom parameters, and logging job-related messages.</p>"},{"location":"platform/sdk/job/scheduler/","title":"Job Scheduler","text":"<p>The Job Scheduler API provides developers with a set of utility functions to manage and interact with scheduled jobs within the system. This API is particularly useful for automating repetitive tasks, scheduling background processes, and triggering job executions based on predefined conditions or events.</p>"},{"location":"platform/sdk/job/scheduler/#key-features","title":"Key Features","text":"<ul> <li> <p><code>Job Management</code>: Developers can list all registered user jobs, retrieve specific job details by name, enable or disable job execution, and trigger job executions with custom parameters.</p> </li> <li> <p><code>Logging</code>: The API includes functionality to log messages with normal severity, allowing developers to track job executions, monitor system behavior, and debug issues effectively.</p> </li> <li> <p><code>Flexibility</code>: Jobs can be configured and managed dynamically, providing flexibility in scheduling, execution, and parameterization to suit various application requirements.</p> </li> </ul>"},{"location":"platform/sdk/job/scheduler/#usage-scenarios","title":"Usage Scenarios","text":"<ul> <li> <p><code>Scheduled Tasks</code>: Developers can schedule recurring tasks, such as data backups, report generation, or system maintenance activities, using the Job Scheduler API.</p> </li> <li> <p><code>Background Processing</code>: Long-running or resource-intensive tasks, such as data processing, file uploads, or batch operations, can be offloaded to background jobs managed by the API, ensuring optimal system performance and responsiveness.</p> </li> <li> <p><code>Event-Driven Automation</code>: Jobs can be triggered based on predefined events, such as user actions, system events, or external triggers, enabling event-driven automation and orchestration of business processes.</p> </li> </ul>"},{"location":"platform/sdk/job/scheduler/#compatibility","title":"Compatibility","text":"<p>The Job Scheduler API is designed to seamlessly integrate with existing scripting services and applications within the system. It is platform-agnostic and can be used across various environments and deployment scenarios.</p>"},{"location":"platform/sdk/job/scheduler/#extensibility","title":"Extensibility","text":"<p>Developers can extend the functionality of the Job Scheduler API by implementing custom jobs, event listeners, or scheduling strategies tailored to specific use cases or business requirements.</p>"},{"location":"platform/sdk/job/scheduler/#security-considerations","title":"Security Considerations","text":"<p>When using the Job Scheduler API, developers should ensure proper authentication, authorization, and access controls to prevent unauthorized access to sensitive job configurations or execution capabilities. Additionally, logging sensitive information should be handled securely to protect against data breaches or privacy violations.</p>"},{"location":"platform/sdk/job/scheduler/#best-practices","title":"Best Practices","text":"<ul> <li> <p><code>Job Naming</code>: Use descriptive and meaningful names for jobs to facilitate easy identification and management.</p> </li> <li> <p><code>Error Handling</code>: Implement robust error handling and recovery mechanisms to handle job failures gracefully and minimize system downtime.</p> </li> <li> <p><code>Parameterization</code>: Parameterize job configurations and execution parameters to make jobs more flexible, reusable, and adaptable to different scenarios.</p> </li> <li> <p><code>Monitoring and Logging</code>: Monitor job execution metrics, track job status changes, and log relevant information to facilitate troubleshooting, auditing, and performance optimization.</p> </li> </ul>"},{"location":"platform/sdk/job/scheduler/#example-usage","title":"Example Usage","text":"<pre><code>import { scheduler } from \"sdk/job\";\n\nlet job = scheduler.getJob(\"/sample-job/myjob.job\");\nlet param = job.getParameter(\"myParam\");\n\nconsole.log('Param is: ' + param);\n</code></pre>"},{"location":"platform/sdk/job/scheduler/#functions","title":"Functions","text":"Function Description Returns getJobs() Returns the list of all the registered user jobs Job array getJob(name) Gets a Job object by its name Job enable(name) Enables the Job regular execution - disable(name) Disables the Job regular execution - trigger(name, parameters) Triggers the Job regular execution with parameters - log(name, message) Logs a message with normal severity - error(name, message) Logs a message with error severity - warn(name, message) Logs a message with warn severity - info(name, message) Logs a message with info severity -"},{"location":"platform/sdk/job/scheduler/#objects","title":"Objects","text":""},{"location":"platform/sdk/job/scheduler/#job","title":"Job","text":"Function Description Returns getName() Returns the name of the Job string getGroup() Returns the group of the Job string getClazz() Returns the clazz of the Job string getDescription() Returns the description of the Job string getExpression() Returns the expression of the Job string getHandler() Returns the handler of the Job string getEngine() Returns the engine of the Job string getSingleton() Returns the singleton flag of the Job string getEnabled() Returns the enabled state of the Job string getCreatedBy() Returns the created by user of the Job string getCreatedAt() Returns the created at timestamp of the Job string getParameters() Returns the parameters object of the Job JobParameters getParameter(name) Returns the value of the parameter of the Job string enable() Enables the Job - disable() Disables the Job - trigger() Triggers the Job - log(message) Logs a message with normal severity - error(message) Logs a message with error severity - warn(message) Logs a message with warn severity - info(message) Logs a message with info severity -"},{"location":"platform/sdk/job/scheduler/#jobparameters","title":"JobParameters","text":"Function Description Returns get(i) Returns the parameter by the index JobParameter count() Returns the number of the parameters number"},{"location":"platform/sdk/job/scheduler/#jobparameter","title":"JobParameter","text":"Function Description Returns getName() Returns the name of the Parameter string getDescription() Returns the description of the Parameter string getType() Returns the type of the Parameter string getDefaultValue() Returns the default value of the Parameter string getChoices() Returns the choices of the Parameter string"},{"location":"platform/sdk/log/","title":"Log Module","text":"<p>Welcome to the Log Module documentation! This module provides essential functionality for logging messages, errors, and events in your applications. Logging is crucial for monitoring application behavior, diagnosing issues, and maintaining a record of critical events.</p>"},{"location":"platform/sdk/log/#apis","title":"APIs","text":"<ul> <li>Logging API: Provides functions for logging messages at different severity levels and managing log configuration.</li> </ul>"},{"location":"platform/sdk/log/#logging-api","title":"Logging API","text":"<p>The Logging API enables developers to log messages with varying levels of severity, from informational to error messages. It also supports dynamic configuration of log levels and provides functionality for logging errors with stack traces.</p>"},{"location":"platform/sdk/log/logging/","title":"Logging","text":"<p>The Logging API serves as a fundamental tool for developers to track and record the execution of their applications. Logging involves capturing various events, messages, and errors that occur during the execution of the software. These logs are invaluable for debugging, monitoring, and auditing purposes, providing insights into the application's behavior and performance.</p>"},{"location":"platform/sdk/log/logging/#importance-of-logging","title":"Importance of Logging","text":"<p>Logging plays a crucial role in software development for several reasons:</p> <ol> <li> <p>Debugging: Logs help developers identify and diagnose issues within their code. By logging relevant information at strategic points in the application, developers can trace the flow of execution and pinpoint the root causes of bugs or unexpected behavior.</p> </li> <li> <p>Monitoring and Alerting: Logs are essential for monitoring the health and performance of applications in real-time. Monitoring systems can analyze log data to detect anomalies, errors, or performance bottlenecks, triggering alerts or notifications for immediate attention.</p> </li> <li> <p>Auditing and Compliance: Logging facilitates compliance with regulatory requirements and industry standards by maintaining a record of critical events and transactions. Detailed logs provide an audit trail for tracking user actions, system changes, and security incidents.</p> </li> <li> <p>Performance Analysis: Logs capture valuable metrics and statistics related to the application's performance, such as response times, resource utilization, and throughput. Analyzing these metrics over time helps identify areas for optimization and improvement.</p> </li> </ol>"},{"location":"platform/sdk/log/logging/#logging-levels","title":"Logging Levels","text":"<p>The Logging API supports different log levels to categorize messages based on their severity or importance. Each log level serves a specific purpose and provides valuable insights into the application's behavior:</p> <ul> <li>INFO: Informational messages that highlight the normal operation of the application.</li> <li>WARN: Warning messages indicating potential issues or unexpected conditions that do not necessarily cause immediate problems.</li> <li>ERROR: Error messages indicating critical issues or failures that require attention.</li> <li>DEBUG: Debugging messages providing detailed information for troubleshooting and diagnosing problems during development.</li> <li>TRACE: Trace messages offering the most detailed level of logging, typically used for tracing the execution flow or capturing fine-grained details.</li> </ul>"},{"location":"platform/sdk/log/logging/#logging-best-practices","title":"Logging Best Practices","text":"<p>To leverage the Logging API effectively, developers should adhere to the following best practices:</p> <ul> <li>Use Descriptive Messages: Ensure that log messages are clear, concise, and descriptive, providing sufficient context to understand the event or condition being logged.</li> <li>Choose Appropriate Log Levels: Select the appropriate log level for each message based on its significance and impact on the application's behavior.</li> <li>Log Relevant Information: Include relevant details in log messages, such as timestamps, error codes, stack traces, and contextual data, to facilitate troubleshooting and analysis.</li> <li>Avoid Excessive Logging: Be mindful of logging too much information, as it can overwhelm log files and obscure critical messages. Focus on logging essential events and errors.</li> <li>Configure Log Levels Dynamically: Implement mechanisms to adjust log levels dynamically based on deployment environments or runtime conditions, allowing for flexible logging configurations.</li> <li>Secure Log Data: Protect sensitive information in log messages, such as user credentials or personal data, to prevent unauthorized access or disclosure.</li> </ul> <p>By following these best practices and leveraging the capabilities of the Logging API, developers can effectively manage and analyze log data to improve the reliability, performance, and security of their applications.</p>"},{"location":"platform/sdk/log/logging/#example-usage","title":"Example Usage","text":"<pre><code>import { logging } from \"sdk/log\";\n\nlet logger = logging.getLogger(\"com.codbex.mylogger\");\n\nlogger.debug(\"Hello from {} {}!\", \"MyLogger\");\nlogger.error(\"Oops\", new Error(\"Something wrong happened\"));\n</code></pre>"},{"location":"platform/sdk/log/logging/#functions","title":"Functions","text":"Function Description Returns getLogger(name) Returns the Logger object by this name Logger"},{"location":"platform/sdk/log/logging/#objects","title":"Objects","text":""},{"location":"platform/sdk/log/logging/#logger","title":"Logger","text":"Function Description Returns info(message, args?) Logs the message with the INFO log level - warn(message, args?) Logs the message with the WARN log level - error(message, args?) Logs the message with the ERROR log level - debug(message, args?) Logs the message with the DEBUG log level - trace(message, args?) Logs the message with the TRACE log level - log(message, level, args?) Logs the message with the provided log level and optional message parameters - infoError(message, error) Logs the error with the stack trace with the INFO log level - warnError(message, error) Logs the error with the stack trace with the WARN log level - errorError(message, error) Logs the error with the stack trace with the ERROR log level - debugError(message, error) Logs the error with the stack trace with the DEBUG log level - traceError(message, error) Logs the error with the stack trace with the TRACE log level - setLevel(level) Sets the log level ('INFO', 'WARN', 'ERROR', 'DEBUG', 'TRACE') -"},{"location":"platform/sdk/mail/","title":"Mail Module","text":"<p>Welcome to the Mail Module documentation. This module provides functionality for sending emails via various protocols, facilitating communication in your applications. Below is the list of APIs available in this module:</p> <ul> <li>Mail API</li> </ul>"},{"location":"platform/sdk/mail/#mail-api","title":"Mail API","text":"<p>The Mail API enables developers to send emails programmatically using SMTP and other protocols. It simplifies the process of composing and sending email messages, providing flexibility and customization options.</p> <p>For detailed information about the Mail API, including features, usage guidelines, and examples, please refer to the Mail API documentation page.</p>"},{"location":"platform/sdk/mail/client/","title":"Mail API","text":"<p>The Mail API provides functionality for sending emails via various protocols, including SMTP (Simple Mail Transfer Protocol), allowing developers to integrate email sending capabilities into their applications.</p>"},{"location":"platform/sdk/mail/client/#overview","title":"Overview","text":"<p>The Mail API simplifies the process of sending emails programmatically, enabling applications to send notifications, alerts, reports, and other types of messages to users or administrators via email.</p>"},{"location":"platform/sdk/mail/client/#features","title":"Features","text":"<ul> <li>SMTP Support: Send emails using SMTP servers, which are commonly provided by email service providers or organizations.</li> <li>Multiple Protocols: Besides SMTP, the Mail API may support other email protocols for sending messages, such as IMAP (Internet Message Access Protocol) or POP3 (Post Office Protocol version 3).</li> <li>Configuration: Configure SMTP server settings, including host, port, authentication credentials (username/password), encryption (SSL/TLS), and other relevant parameters.</li> <li>Message Composition: Compose email messages with customizable content, including sender, recipient(s), subject, body, attachments, and headers.</li> <li>HTML Support: Send emails with HTML content to enable rich formatting and styling for enhanced visual appeal.</li> <li>Attachment Support: Attach files (e.g., documents, images) to email messages for sharing additional information or resources.</li> <li>Error Handling: Handle errors and exceptions gracefully, providing feedback to the application about the success or failure of email delivery.</li> </ul>"},{"location":"platform/sdk/mail/client/#usage","title":"Usage","text":"<p>To send an email using the Mail API, developers typically follow these steps:</p> <ol> <li>Configure SMTP Settings: Specify the SMTP server details, including the host, port, authentication credentials, and encryption settings.</li> <li>Compose Email Message: Create an email message object with the desired sender, recipient(s), subject, body, attachments, and any additional headers.</li> <li>Send Email: Use the Mail API functions to send the email message via the configured SMTP server.</li> <li>Handle Errors: Implement error handling mechanisms to deal with any issues that may arise during the email sending process.</li> </ol>"},{"location":"platform/sdk/mail/client/#basic-usage","title":"Basic Usage","text":"<pre><code>import { client } from \"sdk/mail\";\nimport { response } from \"sdk/http\";\n\nconst sender = \"developer@codbex.com\";\nconst to = \"example@gmail.com\";\nconst subject = \"Subject\";\nconst content = \"&lt;h1&gt;Content&lt;h1&gt;\";\nconst subType = \"html\";\n\nclient.send(sender, to, subject, content, subType);\n\nresponse.println(\"Mail sent\");\n</code></pre>"},{"location":"platform/sdk/mail/client/#advance-usage","title":"Advance Usage","text":"<pre><code>import { client } from \"sdk/mail\";\nimport { response } from \"sdk/http\";\n\nlet mailConfig = {\n    \"mail.user\": \"&lt;your-user&gt;\",\n    \"mail.password\": \"&lt;your-password&gt;\",\n    \"mail.transport.protocol\": \"smtps\",\n    \"mail.smtps.host\": \"smtp.gmail.com\",\n    \"mail.smtps.port\": \"465\",\n    \"mail.smtps.auth\": \"true\"\n};\n\nlet mailClient = client.getClient(mailConfig);\n\nlet sender = \"developer@codbex.com\";\nlet recipients = {\n    to: \"example@gmail.com\",\n    cc: [\"example1@gmail.com\", \"example2@sap.com\"],\n    bcc: \"example3@sap.com\"\n};\nlet subject = \"Subject\";\nlet content = \"&lt;h1&gt;Content&lt;/h1&gt;\";\nlet subType = \"html\";\n\nmailClient.send(sender, recipients, subject, content, subType);\n\nresponse.println(\"Mail sent\");\n</code></pre>"},{"location":"platform/sdk/mail/client/#functions","title":"Functions","text":"Function Description Returns getClient(options) Get mail client with the provided MailClientOptions, if no options are provided, the default mail client configuration will be used MailClient send(from, recipients, subject, text, subType) Send mail using the default mail client configuration to MailRecipients -"},{"location":"platform/sdk/mail/client/#objects","title":"Objects","text":""},{"location":"platform/sdk/mail/client/#mailclient","title":"MailClient","text":"Property Description Type send(from, recipients, subject, text, subType) Send mail to MailRecipients MailClient function"},{"location":"platform/sdk/mail/client/#mailclientoptions","title":"MailClientOptions","text":"Property Description Type mail.user The mailbox user string mail.password The mailbox password string mail.transport.protocol (optional) The mail transport protocol, default is smtps string mail.smtps.host The mail SMPTPS host string mail.smtps.port The mail SMPTPS port number as string mail.smtps.auth Enable/Disable mail SMPTPS authentication boolean as string mail.smtp.host The mail SMPTP host string mail.smtp.port The mail SMPTP port number as string mail.smtp.auth Enable/Disable mail SMPTP authentication boolean as string <p>Addition mail client options can be found here:</p> <ul> <li>SMTP/SMTPS</li> <li>IMAP</li> <li>POP3</li> </ul>"},{"location":"platform/sdk/mail/client/#mailrecipients","title":"MailRecipients","text":"Property Description Type to The to recipient(s) string or Array of strings cc The cc recipient(s) string or Array of strings bcc The bcc recipient(s) string or Array of strings"},{"location":"platform/sdk/messaging/","title":"Messaging Module","text":"<p>Welcome to the Messaging Module documentation. This module provides functionality for asynchronous messaging and integration with messaging systems.</p>"},{"location":"platform/sdk/messaging/#apis","title":"APIs","text":"<ol> <li> <p>Message Producer: An object for sending text messages to Queue or Topic destinations in the built-in Message Broker.</p> </li> <li> <p>Message Consumer: An object for receiving and processing text messages from Queue or Topic destinations in the Message Broker.</p> </li> </ol>"},{"location":"platform/sdk/messaging/#overview","title":"Overview","text":"<p>The Messaging Module offers developers tools to facilitate asynchronous communication between different components of an application or between distributed systems. By leveraging message queues and topics, developers can design scalable and loosely coupled architectures that improve reliability, scalability, and maintainability.</p>"},{"location":"platform/sdk/messaging/#key-features","title":"Key Features","text":"<ul> <li> <p>Asynchronous Communication: Enable communication between different components or services without blocking the main application flow.</p> </li> <li> <p>Reliable Messaging: Ensure message delivery and processing even under unreliable network conditions or high message volumes.</p> </li> <li> <p>Scalability: Build applications that can scale horizontally by distributing workloads across multiple instances or nodes.</p> </li> <li> <p>Integration: Seamlessly integrate with message brokers and other messaging systems to enable interoperability between different applications or services.</p> </li> </ul>"},{"location":"platform/sdk/messaging/#usage","title":"Usage","text":"<p>To get started with the Messaging Module, refer to the documentation for each API, which includes usage instructions, examples, and best practices for integrating messaging capabilities into your applications.</p>"},{"location":"platform/sdk/messaging/consumer/","title":"Message Consumer","text":"<p>The Message Consumer is a fundamental component provided by the system, offering the capability to receive and process text messages from Queue or Topic destinations within the integrated Message Broker. Powered by Apache ActiveMQ, the Message Consumer enables seamless integration with messaging systems for reliable message consumption.</p>"},{"location":"platform/sdk/messaging/consumer/#overview","title":"Overview","text":"<p>The Message Consumer plays a crucial role in distributed systems by facilitating the consumption of text messages sent to designated destinations. With support for both Queues and Topics, developers can build robust applications that leverage asynchronous communication and event-driven architectures.</p>"},{"location":"platform/sdk/messaging/consumer/#features","title":"Features","text":"<ul> <li> <p>Destination Flexibility: Receive messages from both Queues and Topics to adapt to diverse messaging patterns.</p> </li> <li> <p>Text Message Handling: Process text-based messages efficiently, providing a versatile solution for message consumption.</p> </li> <li> <p>Reliable Messaging: Relies on Apache ActiveMQ to ensure reliable message delivery and consumption under various conditions.</p> </li> </ul>"},{"location":"platform/sdk/messaging/consumer/#usage","title":"Usage","text":"<p>Utilizing the Message Consumer is straightforward and involves the following steps:</p> <ol> <li> <p>Initialization: Obtain an instance of the Message Consumer from the system.</p> </li> <li> <p>Destination Setup: Specify the destination (Queue or Topic) from which messages should be consumed.</p> </li> <li> <p>Message Handling: Implement message handling logic to process received messages according to application requirements.</p> </li> <li> <p>Message Consumption: Use the Message Consumer's API to start consuming messages from the specified destination.</p> </li> </ol>"},{"location":"platform/sdk/messaging/consumer/#example-usage","title":"Example Usage","text":"<pre><code>import { consumer } from \"sdk/messaging\";\n\nlet message = consumer.queue(\"queue1\").receive(1000);\n\nconsole.log(message)\n</code></pre>"},{"location":"platform/sdk/messaging/consumer/#functions","title":"Functions","text":"Function Description Returns queue() Returns an object representing a Message Queue Queue topic() Returns an object representing a Message Topic Topic"},{"location":"platform/sdk/messaging/consumer/#objects","title":"Objects","text":""},{"location":"platform/sdk/messaging/consumer/#queue","title":"Queue","text":"Function Description Returns receive(timeout) Receives a message from this Message Queue if any or null with the given timeout in milliseconds string"},{"location":"platform/sdk/messaging/consumer/#topic","title":"Topic","text":"Function Description Returns receive(timeout) Receives a message from this Message Topic if any or null with the given timeout in milliseconds string"},{"location":"platform/sdk/messaging/producer/","title":"Message Producer","text":"<p>The Message Producer is an object provided by the system, designed to facilitate the sending of text messages to a Queue or Topic destination within the built-in Message Broker. This component is backed by the robust messaging broker Apache ActiveMQ, offering reliable and scalable message delivery.</p>"},{"location":"platform/sdk/messaging/producer/#overview","title":"Overview","text":"<p>The Message Producer serves as a bridge between applications and the messaging infrastructure, allowing developers to seamlessly send text messages to designated destinations. Whether it's for asynchronous communication, event-driven architectures, or distributed systems, the Message Producer offers a convenient interface for sending messages with ease.</p>"},{"location":"platform/sdk/messaging/producer/#features","title":"Features","text":"<ul> <li> <p>Destination Flexibility: Send messages to both Queues and Topics based on your application's requirements.</p> </li> <li> <p>Text Message Support: Send text-based messages, providing a versatile solution for various use cases.</p> </li> <li> <p>Reliable Messaging: Utilizes Apache ActiveMQ under the hood, ensuring reliable and efficient message delivery.</p> </li> </ul>"},{"location":"platform/sdk/messaging/producer/#usage","title":"Usage","text":"<p>To use the Message Producer, developers can follow these simple steps:</p> <ol> <li> <p>Initialization: Obtain an instance of the Message Producer from the system.</p> </li> <li> <p>Destination Setup: Specify the destination (Queue or Topic) to which the message should be sent.</p> </li> <li> <p>Message Composition: Compose the text message that needs to be sent.</p> </li> <li> <p>Message Sending: Use the Message Producer's API to send the message to the specified destination.</p> </li> </ol>"},{"location":"platform/sdk/messaging/producer/#example-usage","title":"Example Usage","text":"<pre><code>import { producer } from \"sdk/messaging\"\n\nproducer.queue(\"queue1\").send(\"Text Message\");\n</code></pre>"},{"location":"platform/sdk/messaging/producer/#functions","title":"Functions","text":"Function Description Returns queue() Returns an object representing a Message Queue Queue topic() Returns an object representing a Message Topic Topic"},{"location":"platform/sdk/messaging/producer/#objects","title":"Objects","text":""},{"location":"platform/sdk/messaging/producer/#queue","title":"Queue","text":"Function Description Returns send(message) Send a message to this Message Queue -"},{"location":"platform/sdk/messaging/producer/#topic","title":"Topic","text":"Function Description Returns send(message) Send a message to this Message Topic -"},{"location":"platform/sdk/net/","title":"Net Module","text":"<p>The Net Module provides various APIs for network-related tasks, including communication protocols such as SOAP and WebSocket. These APIs facilitate communication over the network, enabling interaction with remote servers, services, and clients.</p>"},{"location":"platform/sdk/net/#apis","title":"APIs","text":"<ol> <li>SOAP API: Exposes a web services framework for manipulating SOAP messages, making calls to external end-points, and creating web services.</li> <li>WebSocket API: Provides access to the Session object for the management of bi-directional communication based on the WebSocket specification.</li> </ol>"},{"location":"platform/sdk/net/#soap-api","title":"SOAP API","text":"<p>The SOAP API enables developers to work with SOAP messages, interact with web services, and make remote procedure calls using the SOAP protocol.</p>"},{"location":"platform/sdk/net/#websocket-api","title":"WebSocket API","text":"<p>The WebSocket API offers functionalities for managing WebSocket sessions, sending and receiving messages in real-time, and handling WebSocket events for bi-directional communication.</p>"},{"location":"platform/sdk/net/soap/","title":"SOAP","text":"<p>The SOAP (Simple Object Access Protocol) API provides a comprehensive web services framework for manipulating SOAP messages, making calls to external end-points, and creating web services. SOAP is a protocol for exchanging structured information in the implementation of web services. It relies on XML as its message format and typically operates over HTTP.</p>"},{"location":"platform/sdk/net/soap/#overview","title":"Overview","text":"<p>SOAP is a widely adopted protocol for communication between distributed applications. It allows programs running on different operating systems and platforms to communicate by exchanging XML-based messages. The SOAP API enables developers to interact with SOAP-based web services seamlessly.</p>"},{"location":"platform/sdk/net/soap/#key-features","title":"Key Features","text":"<ul> <li>SOAP Message Handling: The API offers functionalities for creating, parsing, and manipulating SOAP messages, including headers, bodies, and attachments.</li> <li>Service Invocation: Developers can make calls to external SOAP-based services, invoking remote methods and exchanging data using SOAP messages.</li> <li>Web Service Creation: The SOAP API facilitates the creation of SOAP-based web services, allowing developers to expose their functionalities as SOAP endpoints.</li> <li>Protocol Support: The API supports various protocols for message transport, including HTTP, HTTPS, SMTP, and more, providing flexibility in communication.</li> </ul>"},{"location":"platform/sdk/net/soap/#example-usage","title":"Example Usage","text":"<pre><code>import { soap } from \"sdk/net\";\nimport { response } from \"sdk/http\";\n\nresponse.setContentType(\"text/plain; charset=UTF-8\");\n\nlet requestMessage = soap.createMessage();\nlet part = requestMessage.getPart();\nlet envelope = part.getEnvelope();\nenvelope.addNamespaceDeclaration(\"ws\", \"http://ws.cdyne.com/\");\nlet body = envelope.getBody();\nlet resolveIPElement = body.addChildElement(\"ResolveIP\", \"ws\");\nlet ipAddressElement = resolveIPElement.addChildElement(\"ipAddress\", \"ws\");\nipAddressElement.addTextNode(\"213.239.203.158\");\nlet licenseKeyElement = resolveIPElement.addChildElement(\"licenseKey\", \"ws\");\nlicenseKeyElement.addTextNode(\"\");\n\nlet mimeHeaders = requestMessage.getMimeHeaders();\nmimeHeaders.addHeader(\"SOAPAction\", \"http://ws.cdyne.com/ResolveIP\");\n\nrequestMessage.save();\nresponse.println(\"Request: \" + requestMessage.getText());\n\nlet responseMessage = soap.call(requestMessage, \"http://ws.cdyne.com/ip2geo/ip2geo.asmx\");\n\nresponse.println(\"Response: \" + responseMessage.getText());\n</code></pre>"},{"location":"platform/sdk/net/soap/#functions","title":"Functions","text":"Function Description Returns createMessage() Creates an empty SOAP Message Message parseMessage(mimeHeaders, inputStream) Creates a message by a given MIME Headers and by parsing of the provided input stream Message parseRequest() Creates a message by parsing the standard Request input and empty headers Message createMimeHeaders() Creates an empty MimeHeaders MimeHeaders call(request, url) Calls an end-point of a SOAP Web Service with a request Message and returns the response Message Message"},{"location":"platform/sdk/net/soap/#objects","title":"Objects","text":""},{"location":"platform/sdk/net/soap/#message","title":"Message","text":"Function Description Returns getMimeHeaders() Returns the MimeHeaders object of this Message MimeHeaders getPart() Returns the Part object of this Message Part save() Save the changes made on the Message and its components - getText() Returns a text representation of the Message string"},{"location":"platform/sdk/net/soap/#mimeheaders","title":"MimeHeaders","text":"Function Description Returns addHeader(name, value) Creates and add a new MIME header -"},{"location":"platform/sdk/net/soap/#part","title":"Part","text":"Function Description Returns getEnvelope() Returns the Envelope object of this Part Envelope"},{"location":"platform/sdk/net/soap/#envelope","title":"Envelope","text":"Function Description Returns getBody() Returns the Body object of this Envelope Body getHeader() Returns the Header object of this Envelope Header addNamespaceDeclaration(prefix, uri) Creates and add a namespace attribute - createName(localName, prefix, uri) Creates a Name object to be used further Name"},{"location":"platform/sdk/net/soap/#body","title":"Body","text":"Function Description Returns getChildElements() Returns an array of the child Elements [Element] addChildElement(localName, prefix) Creates and add a child Element Element"},{"location":"platform/sdk/net/soap/#header","title":"Header","text":"Function Description Returns addHeaderElement(name) Creates and add a Header Element with a Name Element"},{"location":"platform/sdk/net/soap/#name","title":"Name","text":"Function Description Returns getLocalName() Returns the Local Name of the Name object string getPrefix() Returns the Prefix of the Name object string getQualifiedName() Returns the Qualified Name of the Name object string getURI() Returns the URI of the Name object string"},{"location":"platform/sdk/net/soap/#element","title":"Element","text":"Function Description Returns getChildElements() Returns an array of the child Elements [Element] getElementName() Returns the name of the Element Name getValue() Returns the value of the Element if any string addChildElement(localName, prefix) Creates and add a child Element Element addTextNode(text) Creates and add a text node Element addAttribute(name, value) Creates and add an attribute Element isSOAPElement() Returns true if the Element is SOAP Element and false otherwise (e.g. CDATA, PDATA, etc.) string"},{"location":"platform/sdk/net/websocket/","title":"WebSocket","text":"<p>The WebSocket API provides access to the Session object for the management of bi-directional communication based on the WebSocket specification. WebSockets enable real-time, full-duplex communication between a client (such as a web browser) and a server over a single, long-lived connection.</p>"},{"location":"platform/sdk/net/websocket/#overview","title":"Overview","text":"<p>WebSocket is a communication protocol that provides a full-duplex, persistent connection between a client and a server, allowing them to exchange messages in real-time. The WebSocket API offers developers a way to interact with WebSocket sessions, handle events, and send/receive messages efficiently.</p>"},{"location":"platform/sdk/net/websocket/#key-features","title":"Key Features","text":"<ul> <li>WebSocket Session Management: The API provides functionalities to manage WebSocket sessions, including opening, closing, and handling events.</li> <li>Message Exchange: Developers can send and receive messages over WebSocket connections, enabling real-time communication between clients and servers.</li> <li>Event Handling: The API supports event-driven programming, allowing developers to define callback functions to handle WebSocket events such as connection open, close, error, and message reception.</li> <li>Protocol Support: WebSocket API adheres to the WebSocket protocol specification, ensuring compatibility with WebSocket servers and clients.</li> </ul>"},{"location":"platform/sdk/net/websocket/#example-usage","title":"Example Usage","text":""},{"location":"platform/sdk/net/websocket/#client","title":"Client","text":"<pre><code>import { websockets } from \"sdk/net\"\n\nconst uri = \"ws://echo.websocket.org:80/\";\nconst handler = \"my-project/ws-handler\"\n\nfunction initialize() {\n    console.log(\"Connect to: \" + uri);\n    let websocket = websockets.createWebsocket(uri, handler);\n    websocket.send(\"hello\");\n}\n\ninitialize();\n\nwebsockets.getClientByHandler(handler).close();\n</code></pre>"},{"location":"platform/sdk/net/websocket/#server","title":"Server","text":"<p>For example: <code>my-endpoint.websocket</code> is using the same handler from above</p> <pre><code>{\n  \"handler\": \"my-project/ws-handler\",\n  \"endpoint\":\"my-endpoint\",\n  \"description\":\"My Websocket\"\n}\n</code></pre> <p>then you can call from a browser:</p> <pre><code>let ws = new WebSocket(\"ws://localhost:8080/websockets/v4/service/my-endpoint\");\nws.send('hello');\n</code></pre>"},{"location":"platform/sdk/net/websocket/#functions","title":"Functions","text":"Function Description Returns createWebsocket(uri, handler, engine) Creates a WebsocketClient by URI, handler and engine type WebsocketClient getClients() Returns the list of the created WebsocketClients list of WebsocketClient metadata getClient(id) Returns the client by its id, if exists or null otherwise WebsocketClient getClientByHandler(handler) Returns the client by its handler, if exists or null otherwise WebsocketClient getMessage() Returns the message in context of OnMessage handler string getError() Returns the error in context of OnError handler string getMethod() Returns the method type in context of the handler onopen, onmessage, onerror, onclose isOnOpen() Returns true in context of OnOpen handler boolean isOnMessage() Returns true in context of OnMessage handler boolean isOnError() Returns true in context of OnError handler boolean isOnClose() Returns true in context of OnClose handler boolean"},{"location":"platform/sdk/net/websocket/#objects","title":"Objects","text":""},{"location":"platform/sdk/net/websocket/#websocketclient","title":"WebsocketClient","text":"Function Description Returns send(message) Sends a text message via the Websocket connection - close() Closes the Websocket connection -"},{"location":"platform/sdk/platform/","title":"Platform Module","text":"<p>The Platform Module provides various APIs for managing and interacting with the platform resources.</p>"},{"location":"platform/sdk/platform/#apis","title":"APIs","text":"<ol> <li>Workspace API: Provides access to the user's workspaces for creating artifacts programmatically.</li> <li>Repository API: Gives access to the repository for creating and managing resources and collections.</li> <li>Registry API: Provides access to the content in the repository section for published artifacts and pre-delivered content.</li> <li>Lifecycle API: Utility functions for managing the lifecycle of projects, including publishing and unpublishing.</li> <li>Command API: Used to execute shell commands.</li> </ol>"},{"location":"platform/sdk/platform/command/","title":"Command","text":"<p>The Command API is used to execute shell commands.</p>"},{"location":"platform/sdk/platform/command/#basic-usage","title":"Basic Usage","text":"<pre><code>import { command } from \"sdk/platform\";\nimport { response } from \"sdk/http\";\n\nlet result = command.execute(\"echo 'hello world!'\");\n\nresponse.println(\"[Result]: \" + result);\n</code></pre>"},{"location":"platform/sdk/platform/command/#functions","title":"Functions","text":"Function Description Returns execute(command, add, remove) Executes the command string and returns the result from the execution or exception message. Passing an object as add parameter sets the corresponding variables. remove parameter is used to unset the variables string"},{"location":"platform/sdk/platform/lifecycle/","title":"Lifecycle","text":"<p>The Lifecycle API provides utility functions for managing the lifecycle of the projects in the system, such as publishing and unpublishing.</p>"},{"location":"platform/sdk/platform/lifecycle/#basic-usage","title":"Basic Usage","text":"<pre><code>import { bytes } from \"sdk/io\";\nimport { user } from \"sdk/security\";\nimport { workspace, lifecycle } from \"sdk/platform\";\nimport { response } from \"sdk/http\";\n\nconst currentUser = user.getName();\nconst workspaceName = \"workspace\";\nconst projectName = \"project\";\n\nlet myWorkspace = workspace.createWorkspace(workspaceName);\nlet myProject = myWorkspace.createProject(projectName);\nlet myFile = myProject.createFile(\"file.js\");\nmyFile.setContent(bytes.textToByteArray(\"console.log('Hello World!');\"));\n\nlet publishResult = lifecycle.publish(currentUser, workspaceName, projectName);\n\nresponse.println(\"publishResult: \" + publishResult)\n</code></pre>"},{"location":"platform/sdk/platform/lifecycle/#functions","title":"Functions","text":"Function Description Returns publish(user, workspace, project) Publish project from the workspace, the project parameter is optional boolean unpublish(user, workspace, project) Unpublish project from the workspace, the project parameter is optional boolean"},{"location":"platform/sdk/platform/registry/","title":"Registry","text":"<p>The Registry API provides access to the content in the repository section for the published artifacts and also the pre-delivered content. It facilitates retrieving content from the repository in various formats.</p>"},{"location":"platform/sdk/platform/registry/#example-usage","title":"Example Usage","text":"<pre><code>import { registry } from \"sdk/platform\";\nimport { response } from \"sdk/http\";\n\nlet text = registry.getText(\"platform/registry.js\");\n\nresponse.println(text);\n</code></pre>"},{"location":"platform/sdk/platform/registry/#functions","title":"Functions","text":"Function Description Returns getContent(path) Gets the content of resource by path, as byte array array of bytes getContentNative(path) Gets the content of resource by path, as array of Java bytes array of Java bytes getText(path) Gets the content of resource by path, as text string find(path, pattern) Find resources under certain path (e.g. /) by pattern (e.g. *.js) array of strings"},{"location":"platform/sdk/platform/repository/","title":"Repository","text":"<p>The Repository API provides access to the repository, allowing developers to interact with resources and collections within the repository. It offers functionalities for creating, updating, and deleting resources and collections programmatically.</p>"},{"location":"platform/sdk/platform/repository/#basic-usage","title":"Basic Usage","text":"<pre><code>import { repository } from \"sdk/platform\";\nimport { response } from \"sdk/http\";\n\nlet resource = repository.getResource(\"/registry/public/platform/repository.js\");\n\nresponse.println(\"Exists: \" + resource.exists());\n</code></pre>"},{"location":"platform/sdk/platform/repository/#functions","title":"Functions","text":"Function Description Returns getResource(path) Get Resource by path Resource createResource(path, content, contentType) Creates Resource programmatically Resource createResourceNative(path, content, contentType) Creates Resource programmatically, with array of Java bytes Resource updateResource(path, content) Updates Resource content Resource updateResourceNative(path, content) Updates Resource content, with array of Java bytes Resource deleteResource(path) Delete Resource by path - getCollection(path) Get Collection by path Collection createCollection(path) Creates Collection programmatically Collection deleteCollection(path) Delete Collection by path - find(path, pattern) Find resources under certain path (e.g. /) by pattern (e.g. *.js) array of strings"},{"location":"platform/sdk/platform/repository/#objects","title":"Objects","text":""},{"location":"platform/sdk/platform/repository/#resource","title":"Resource","text":"Function Description Returns getName() Gets the Resource name string getPath() Gets the Resource path string getParent() Gets the Resource parent Collection Collection getInformation() Get the Resource information EntityInformation create() Create new Resource - delete() Delete the Resource - renameTo(name) Rename the Resource - moveTo(path) Moves the Resource to a new location - copyTo(path) Copy the Resource to a new location - exists() Returns true if the Resource exists boolean isEmpty() Returns true if the Resource is empty boolean getText() Returns the content of the Resource as text string getContent() Returns the content of the Resource byte array getContentNative() Returns the content of the Resource array of Java bytes setText(text) Sets the Resource content as text - setContent(content) Sets the Resource content - setContentNative(content) Sets the Resource content as array of Java bytes - isBinary() Returns true if the Resource content is binary boolean getContentType() Returns the content type of the Resource string"},{"location":"platform/sdk/platform/repository/#collection","title":"Collection","text":"Function Description Returns getName() Gets the Collection name string getPath() Gets the Collection path string getParent() Gets the Collection parent Collection Collection getInformation() Get the Collection information EntityInformation create() Create new Collection - delete() Delete the Collection - renameTo(name) Rename the Collection - moveTo(path) Moves the Collection to a new location - copyTo(path) Copy the Collection to a new location - exists() Returns true if the Collection exists boolean isEmpty() Returns true if the Collection is empty boolean getCollectionsNames() Gets the names of the Collections in this Collection array of strings createCollection(name) Create new Collection Collection getCollection(name) Get Collection by name Collection removeCollection(name) Remove Collection by name - getResourcesNames() Gets the names of the Resources in this Collection array of strings getResource(name) Get Resource by name Resource removeResource(name) Remove Resource by name - createResource(name, content) Create new Resource Resource"},{"location":"platform/sdk/platform/repository/#entityinformation","title":"EntityInformation","text":"Function Description Returns getName() Gets the entity name string getPath() Gets the entity path string getPermissions() Gets the entity permissions string getSize() Gets the entity size string getCreatedBy() Gets the entity createdBy string getCreatedAt() Gets the entity createdAt string getModifiedBy() Gets the entity modifiedBy string getModifiedAt() Gets the entity modifiedAt string"},{"location":"platform/sdk/platform/workspace/","title":"Workspace","text":"<p>The Workspace API provides access to the user's workspaces and allows for the creation of various artifacts programmatically, such as services and web pages.</p>"},{"location":"platform/sdk/platform/workspace/#workspace-object","title":"Workspace Object","text":"<p>The Workspace object represents a user's workspace within the platform. It serves as a gateway for interacting with workspace-specific resources and functionalities.</p>"},{"location":"platform/sdk/platform/workspace/#example-usage","title":"Example Usage","text":"<p>The service which list the available workspaces:</p> <pre><code>import { workspace } from \"sdk/platform\";\nimport { response } from \"sdk/http\";\n\nlet workspacesNames = workspace.getWorkspacesNames();\n\nresponse.println(\"Workspaces: \" + workspacesNames);\n</code></pre>"},{"location":"platform/sdk/platform/workspace/#functions","title":"Functions","text":"Function Description Returns createWorkspace(name) Creates a new Workspace programmatically Workspace getWorkspace(name) Gets the Workspace by name programmatically Workspace getWorkspacesNames() List the names of the available workspaces programmatically array of string deleteWorkspace(name) Deletes the Workspace by name programmatically -"},{"location":"platform/sdk/platform/workspace/#objects","title":"Objects","text":""},{"location":"platform/sdk/platform/workspace/#workspace_1","title":"Workspace","text":"Function Description Returns getProjects() List the names of the available workspaces programmatically Projects createProject(name) Creates a new Project programmatically Project getProject(name) Gets the Project by name programmatically Project deleteProject(name) Deletes the Project by name programmatically - exists() Check whether this Workspace object does exist programmatically boolean existsFolder(path) Check whether a Folder by given path exists in this Workspace programmatically boolean existsFile(path) Check whether a File by given path exists in this Workspace programmatically boolean copyProject(source, target) Copies a given Project programmatically - moveProject(source, target) Copies a given Project programmatically -"},{"location":"platform/sdk/platform/workspace/#projects","title":"Projects","text":"Function Description Returns size() Returns the size of this Projects list programmatically integer get(index) Gets a Project by index programmatically Project"},{"location":"platform/sdk/platform/workspace/#project","title":"Project","text":"Function Description Returns getName() Returns the name of the Project programmatically string getPath() Returns the path of the Project programmatically string exists() Check whether this Project object does exist programmatically boolean createFolder(path) Creates a new Folder by name programmatically Folder existsFolder(path) Check whether a Folder by given path exists in this Project programmatically boolean getFolder(path) Gets a Folder by path programmatically Folder getFolders(path) Gets all the Folders under the path programmatically Folders deletesFolder(path) Deletes a Folder by path programmatically - createFile(path) Creates a new File by name programmatically File existsFile(path) Check whether a File by given path exists in this Project programmatically boolean getFile(path) Gets a File by path programmatically File getFiles(path) Gets all the Files under the path programmatically Files deletesFile(path) Deletes a File by path programmatically -"},{"location":"platform/sdk/platform/workspace/#folders","title":"Folders","text":"Function Description Returns size() Returns the size of this Folders list programmatically integer get(index) Gets a Folder by index programmatically Folder"},{"location":"platform/sdk/platform/workspace/#files","title":"Files","text":"Function Description Returns size() Returns the size of this Files list programmatically integer get(index) Gets a File by index programmatically File"},{"location":"platform/sdk/platform/workspace/#folder","title":"Folder","text":"Function Description Returns getName() Returns the name of the Folder programmatically string getPath() Returns the path of the Folder programmatically string exists() Check whether this Folder object does exist programmatically boolean createFolder(path) Creates a new Folder by name programmatically Folder existsFolder(path) Check whether a Folder by given path exists in this Folder programmatically boolean getFolder(path) Gets a Folder by path programmatically Folder getFolders(path) Gets all the Folders under the path programmatically Folders deletesFolder(path) Deletes a Folder by path programmatically - createFile(path) Creates a new File by name programmatically File existsFile(path) Check whether a File by given path exists in this Folder programmatically boolean getFile(path) Gets a File by path programmatically File getFiles(path) Gets all the Files under the path programmatically Files deletesFile(path) Deletes a File by path programmatically -"},{"location":"platform/sdk/platform/workspace/#file","title":"File","text":"Function Description Returns getName() Returns the name of the File programmatically string getPath() Returns the path of the File programmatically string exists() Check whether this File object does exist programmatically boolean getContentType() Returns the Content Type of the File programmatically string isBinary() Returns the Binary flag of the File programmatically boolean getContent() Returns the Content of the File programmatically bytes setContent(input) Sets the Content of the File programmatically by the given bytes input - getText() Returns the Content of the File programmatically string setText(input) Sets the Content of the File programmatically by the given string input -"},{"location":"platform/sdk/security/","title":"Security Module","text":"<p>The Security Module provides functionalities related to user authentication, authorization, and access control.</p>"},{"location":"platform/sdk/security/#apis","title":"APIs","text":"<ol> <li>User API - Provides information about the currently logged-in user, if any.</li> </ol>"},{"location":"platform/sdk/security/user/","title":"User","text":"<p>The User API, part of the Security Module, provides access to information about the currently logged-in user, if any.</p>"},{"location":"platform/sdk/security/user/#example-usage","title":"Example Usage","text":"<pre><code>import { user } from \"sdk/security\";\nimport { response } from \"sdk/http\";\n\nresponse.println(\"[UserName]: \" + user.getName());\nresponse.println(\"[Is in Role]: \" + user.isInRole(\"Developer\"));\n</code></pre>"},{"location":"platform/sdk/security/user/#functions","title":"Functions","text":"Function Description Returns getName() Returns the name of the currently logged in user, if any or null string isInRole(role) Returns true if the user has a given role and false otherwise boolean"},{"location":"platform/sdk/template/","title":"Template Module","text":"<p>The Template Module provides functionality for working with various template engines, allowing for dynamic content generation.</p> <ul> <li>Template Engines</li> </ul>"},{"location":"platform/sdk/template/engines/","title":"Template Engines","text":"<p>The Template Engines group provides functionality for working with various template engines such as Velocity, Mustache, and JavaScript template engines.</p>"},{"location":"platform/sdk/template/engines/#velocity-template-engine","title":"Velocity Template Engine","text":"<p>The Velocity Template Engine allows for the dynamic generation of content using Velocity Template Language (VTL).</p>"},{"location":"platform/sdk/template/engines/#functions","title":"Functions","text":"<ul> <li>generate(template, parameters): Renders the given Velocity template with the provided context.</li> </ul>"},{"location":"platform/sdk/template/engines/#mustache-template-engine","title":"Mustache Template Engine","text":"<p>The Mustache Template Engine provides support for rendering Mustache templates.</p>"},{"location":"platform/sdk/template/engines/#functions_1","title":"Functions","text":"<ul> <li>generate(template, parameters): Renders the given Mustache template with the provided context.</li> </ul>"},{"location":"platform/sdk/template/engines/#javascript-template-engine","title":"JavaScript Template Engine","text":"<p>The JavaScript Template Engine enables the rendering of templates using JavaScript functions.</p>"},{"location":"platform/sdk/template/engines/#functions_2","title":"Functions","text":"<ul> <li>generate(template, parameters): Renders the given JavaScript template with the provided context.</li> </ul>"},{"location":"platform/sdk/template/engines/#example-usage","title":"Example Usage","text":"<pre><code>import { engines } from \"sdk/template\"\nimport { response } from \"sdk/http\";\n\nlet mustache = engines.getMustacheEngine();\nlet generated = mustache.generate('Hello {{name}}', [['name', 'John Smith']]);\n\nresponse.println(generated);\n\nresponse.flush();\nresponse.close();\n</code></pre>"},{"location":"platform/sdk/template/engines/#functions_3","title":"Functions","text":"Function Description Returns getDefaultEngine() Creates a default template engine (Velocity) TemplateEngine getVelocityEngine() Creates the Velocity template engine TemplateEngine getMustacheEngine() Creates the Mustache template engine TemplateEngine getJavascriptEngine() Creates the Javascript template engine TemplateEngine generate(template, parameters) Generate content using the provided <code>template</code> and the default engine and <code>parameters</code> provided string generateFromFile(location, parameters) Generate content using the template from <code>location</code> and the default engine and <code>parameters</code> provided string"},{"location":"platform/sdk/template/engines/#objects","title":"Objects","text":""},{"location":"platform/sdk/template/engines/#templateengine","title":"TemplateEngine","text":"Function Description Returns generate(template, parameters) Generate content using the provided <code>template</code> with <code>parameters</code> string setSm(sm) Set start markup for parameters - setEm(em) Set end markup for parameters -"},{"location":"platform/sdk/test/","title":"Test Module","text":"<p>The Test Module provides APIs and utilities for writing and executing unit tests in your applications. It includes the following APIs:</p> <ul> <li>QUnit API: Used for defining and running QUnit tests.</li> <li>Assert API: Provides utility functions for making assertions in tests.</li> <li>Runner API: Used for executing test suites and displaying test results.</li> </ul>"},{"location":"platform/sdk/test/#qunit-api","title":"QUnit API","text":"<p>The QUnit API is used for defining and running QUnit tests. It allows you to organize your tests into modules and write individual test cases.</p> <ul> <li>Documentation</li> <li>Example</li> </ul>"},{"location":"platform/sdk/test/#assert-api","title":"Assert API","text":"<p>The Assert API provides utility functions for making assertions in unit tests. It includes functions for checking conditions and comparing values.</p> <ul> <li>Documentation</li> <li>Example</li> </ul>"},{"location":"platform/sdk/test/#runner-api","title":"Runner API","text":"<p>The Runner API is used for executing test suites and displaying test results. It provides functionality for running QUnit tests and reporting the results.</p> <ul> <li>Documentation</li> </ul>"},{"location":"platform/sdk/test/assert/","title":"Assert","text":"<p>The Assert API provides utility functions for writing unit tests. These functions are used to make assertions about the behavior of the code under test.</p>"},{"location":"platform/sdk/test/assert/#functions","title":"Functions","text":""},{"location":"platform/sdk/test/assert/#asserttruecondition-message","title":"assertTrue(condition, message)","text":"<p>Asserts that the given condition is true.</p> <ul> <li><code>condition</code>: The condition to be checked.</li> <li><code>message</code>: An optional message to be displayed if the assertion fails.</li> </ul>"},{"location":"platform/sdk/test/assert/#assertfalsecondition-message","title":"assertFalse(condition, message)","text":"<p>Asserts that the given condition is false.</p> <ul> <li><code>condition</code>: The condition to be checked.</li> <li><code>message</code>: An optional message to be displayed if the assertion fails.</li> </ul>"},{"location":"platform/sdk/test/assert/#assertnullobject-message","title":"assertNull(object, message)","text":"<p>Asserts that the given object is null.</p> <ul> <li><code>object</code>: The object to be checked.</li> <li><code>message</code>: An optional message to be displayed if the assertion fails.</li> </ul>"},{"location":"platform/sdk/test/assert/#assertnotnullobject-message","title":"assertNotNull(object, message)","text":"<p>Asserts that the given object is not null.</p> <ul> <li><code>object</code>: The object to be checked.</li> <li><code>message</code>: An optional message to be displayed if the assertion fails.</li> </ul>"},{"location":"platform/sdk/test/assert/#assertequalsactual-expected-message","title":"assertEquals(actual, expected, message)","text":"<p>Asserts that the actual object is equal to the expected object.</p> <ul> <li><code>actual</code>: The actual object.</li> <li><code>expected</code>: The expected object.</li> <li><code>message</code>: An optional message to be displayed if the assertion fails.</li> </ul>"},{"location":"platform/sdk/test/assert/#example","title":"Example","text":"<pre><code>import { assert } from \"sdk/assert\";\n\n// Example usage of assert functions\nassert.assertTrue(true, \"This assertion should pass\");\nassert.assertFalse(false, \"This assertion should pass\");\nassert.assertNull(null, \"This assertion should pass\");\nassert.assertNotNull({}, \"This assertion should pass\");\nassert.assertEquals(42, 42, \"This assertion should pass\");\n</code></pre>"},{"location":"platform/sdk/test/assert/#functions_1","title":"Functions","text":"Function Description Returns assertTrue(condition, message) Assert as <code>true</code> - assertFalse(condition, message) Assert as <code>false</code> - assertNull(object, message) Assert if object is <code>null</code> - assertNotNull(object, message) Assert if object is <code>not null</code> - assertEquals(actual, expected, message) Assert if <code>actual</code> object is the same as the <code>expected</code> one -"},{"location":"platform/sdk/test/qunit/","title":"QUnit API","text":"<p>The QUnit API is used for writing and running unit tests in JavaScript. It provides a simple and effective way to test code, ensuring its correctness and reliability.</p>"},{"location":"platform/sdk/test/qunit/#basic-usage","title":"Basic Usage","text":"<pre><code>import { qunit, runner } from \"sdk/qunit\";\n\nqunit.module('Module 1:');\n\nqunit.test(\"Test 1\", function (assert) {\n    assert.ok(true, 'Passing assertion');\n    assert.ok(false, 'Failing assertion');\n});\n\nrunner.run();\n</code></pre> <p>In the provided example, a test module named \"Module 1\" is defined, and within it, a test named \"Test 1\" is defined. The test function contains two assertions, one passing and one failing. Finally, the <code>runner.run()</code> function is called to execute the tests.</p> <p>This will output the test results, indicating which tests passed and which ones failed.</p>"},{"location":"platform/sdk/test/qunit/#functions","title":"Functions","text":"Function Description Returns module(name) Register a module by <code>name</code> string test(title, group) Register a group of tests string"},{"location":"platform/sdk/test/runner/","title":"Test Runner","text":"<p>Runner object is used execute a tests suite and generate report.</p>"},{"location":"platform/sdk/test/runner/#usage","title":"Usage","text":"<p>Used as shown here: QUnit</p>"},{"location":"platform/sdk/test/runner/#functions","title":"Functions","text":"Function Description Returns run(settings) Run a tests suite string"},{"location":"platform/sdk/utils/","title":"Utils Module","text":"<p>The Utils Module provides various utility functions for common tasks such as encoding, decoding, escaping, and generating random identifiers.</p> <ul> <li>Alphanumeric: Used to check whether a given string is alpha-numeric and to generate random strings.</li> <li>Base64: Used to encode/decode in base64.</li> <li>Digest: Used to encrypt binary/text with algorithms like md5, sha256, and sha512.</li> <li>Escape: Used to escape/unescape text in CSV, HTML3, HTML4, JavaScript, Java, JSON, and XML format.</li> <li>Hex: Used to encode/decode text/binary in hexadecimal format.</li> <li>JSONPath: JSONPath utility for querying JSON data.</li> <li>QRCode: Generates a JavaScript byte array based on an input string.</li> <li>Url: Used to encode/decode text in the <code>application/x-www-form-urlencoded</code> MIME format.</li> <li>UTF8: Used to encode/decode strings in UTF8.</li> <li>UUID: Generates random universally unique identifiers.</li> <li>XML: Transforms from JSON to XML and vice versa.</li> </ul>"},{"location":"platform/sdk/utils/alphanumeric/","title":"Alphanumeric","text":"<p>Alphanumeric object is used to check whether a given string is alpha-numeric and to generate random strings.</p>"},{"location":"platform/sdk/utils/alphanumeric/#example-usage","title":"Example Usage","text":"<pre><code>import { alphanumeric } from \"sdk/utils\";\nimport { response } from \"sdk/http\";\n\nresponse.println(alphanumeric.toAlphanumeric(\"@mystring123!#=\"));\n</code></pre>"},{"location":"platform/sdk/utils/alphanumeric/#functions","title":"Functions","text":"Function Description Returns toAlphanumeric(input) Remove non-alpha-numeric letters string randomString(length, charset) Generates alpha-numeric string in a given charset and with given length string alphanumeric(length, lowercase) Generates alpha-numeric string string alpha(length, lowercase) Generates alpha string string numeric(length) Generates alpha-numeric string string isNumeric(input) Checks is the input is a numeric string string isAlphanumeric(input) Checks is the input is a alpha-numeric string string"},{"location":"platform/sdk/utils/base64/","title":"Base64","text":"<p>Base64 object is used to encode/decode in base64.</p>"},{"location":"platform/sdk/utils/base64/#example-usage","title":"Example Usage","text":"<pre><code>import { base64 } from \"sdk/utils\";\nimport { response } from \"sdk/http\";\n\nresponse.println(base64.encode(\"admin:admin\"));\nresponse.println(base64.decode(\"YWRtaW46YWRtaW4=\"));\n</code></pre>"},{"location":"platform/sdk/utils/base64/#functions","title":"Functions","text":"Function Description Returns encode(input) Encode an input string to Base64 string decode(input) Decode an input string from Base64 string"},{"location":"platform/sdk/utils/digest/","title":"Digest","text":"<p>Digest object is used to encript binary/text with algorithms like md5, sha256 and sha512.</p>"},{"location":"platform/sdk/utils/digest/#example-usage","title":"Example Usage","text":"<pre><code>import { digest } from \"sdk/utils\";\nimport { response } from \"sdk/http\";\n\nresponse.println(\"\" + digest.sha256(\"admin:admin\"));\nresponse.println(\"\" + digest.sha512(\"YWRtaW46YWRtaW4=\"));\n</code></pre>"},{"location":"platform/sdk/utils/digest/#functions","title":"Functions","text":"Function Description Returns md5(input) Calculates the MD5 digest and returns the value as a 16 element byte array array of byte md5Hex(input) Calculates the MD5 digest and returns the value as a 32 character hex string string sha1(input) Returns an SHA-1 digest array of byte sha256(input) Returns an SHA-256 digest array of byte sha384(input) Returns an SHA-384 digest array of byte sha512(input) Returns an SHA-512 digest array of byte sha1Hex(input) Calculates the SHA-1 digest and returns the value as a hex string string"},{"location":"platform/sdk/utils/escape/","title":"Escape","text":"<p>Escape object is used to escape/unescape text in CSV, HTML3, HTML4, Javascript, Java, JSON and XML format.</p>"},{"location":"platform/sdk/utils/escape/#example-usage","title":"Example Usage","text":"<pre><code>import { escape } from \"sdk/utils\";\nimport { response } from \"sdk/http\";\n\nconst input = \"&lt;script type='text/javascript'&gt;alert('evil script')&lt;/script&gt;\";\nconst result = escape.escapeJavascript(input);\n\nresponse.println(result);\n</code></pre>"},{"location":"platform/sdk/utils/escape/#functions","title":"Functions","text":"Function Description Returns escapeCsv(input) Escapes an input CSV string string escapeJavascript(input) Escapes an input Javascript string string escapeHtml3(input) Escapes an input HTML3 string string escapeHtml4(input) Escapes an input HTML4 string string escapeJava(input) Escapes an input Java string string escapeJson(input) Escapes an input JSON string string escapeXml(input) Escapes an input XML string string unescapeCsv(input) Unescapes an input CSV string string unescapeJavascript(input) Unescapes an input Javascript string string unescapeHtml3(input) Unescapes an input HTML3 string string unescapeHtml4(input) Unescapes an input HTML4 string string unescapeJava(input) Unescapes an input Java string string unescapeJson(input) Unescapes an input JSON string string unescapeXml(input) Unescapes an input XML string string"},{"location":"platform/sdk/utils/hex/","title":"Hex","text":"<p>Hex object is used to encode/decode text/binary in hexadecimal format.</p>"},{"location":"platform/sdk/utils/hex/#example-usage","title":"Example Usage","text":"<pre><code>import { hex } from \"sdk/utils\";\nimport { response } from \"sdk/http\";\n\nresponse.println(hex.encode(\"Hex Encoded\"));\nresponse.println(hex.decode(\"48657820456e636f646564\"));\n</code></pre>"},{"location":"platform/sdk/utils/hex/#functions","title":"Functions","text":"Function Description Returns decode(input) Decode an input string from HEX string encode(input) Encode an input string to HEX string"},{"location":"platform/sdk/utils/jsonpath/","title":"JSONPath","text":"<p>JSONPath utility.</p>"},{"location":"platform/sdk/utils/jsonpath/#example-usage","title":"Example Usage","text":"<pre><code>import { jsonpath } from \"sdk/utils\";\n\nconst json = {\n    \"store\": {\n        \"book\": [\n            {\n                \"category\": \"reference\",\n                \"author\": \"Nigel Rees\",\n                \"title\": \"Sayings of the Century\",\n                \"price\": 8.95\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"Evelyn Waugh\",\n                \"title\": \"Sword of Honour\",\n                \"price\": 12.99\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"Herman Melville\",\n                \"title\": \"Moby Dick\",\n                \"isbn\": \"0-553-21311-3\",\n                \"price\": 8.99\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"J. R. R. Tolkien\",\n                \"title\": \"The Lord of the Rings\",\n                \"isbn\": \"0-395-19395-8\",\n                \"price\": 22.99\n            }\n        ],\n        \"bicycle\": {\n            \"color\": \"red\",\n            \"price\": 19.95\n        }\n    },\n    \"expensive\": 10\n}\n\nconst actual = jsonpath({\n    \"path\": \"$.store..price\",\n    \"json\": json\n});\n\nconsole.log(actual)\n</code></pre>"},{"location":"platform/sdk/utils/jsonpath/#functions","title":"Functions","text":"Function Description Returns jsonpath(object) Evaluate JSONPath from given expression and json object string"},{"location":"platform/sdk/utils/qrcode/","title":"QRCode","text":"<p>===</p> <p>QRCode object is used to generate a JavaScript byte array based on an input string.</p>"},{"location":"platform/sdk/utils/qrcode/#example-usage","title":"Example Usage","text":"<pre><code>import { qrcode } from \"sdk/utils\";\nimport { response } from \"sdk/http\";\n\nlet qrCodeBytes = qrcode.generateQRCode(\"https://www.codbex.com\");\n\nconsole.log(\"QR Code Bytes: \" + qrCodeBytes);\n\nresponse.write(qrCodeBytes);\n</code></pre>"},{"location":"platform/sdk/utils/qrcode/#functions","title":"Functions","text":"Function Description Returns generateQRCode(input) Generate a byte array from the input string byte array"},{"location":"platform/sdk/utils/url/","title":"Url","text":"<p>Url object is used to encode/decode text in the <code>application/x-www-form-urlencoded</code> MIME format.</p>"},{"location":"platform/sdk/utils/url/#example-usage","title":"Example Usage","text":"<pre><code>import { url } from \"sdk/utils\";\nimport { response } from \"sdk/http\";\n\nresponse.println(url.encode('&lt;![CDATA[&lt;meta http-equiv=\"refresh\" content=\"0;url=javascript:document.vulnerable=true;\"&gt;]]&gt;', 'UTF8'));\nresponse.println(url.decode('%3C%21%5BCDATA%5B%3Cmeta+http-equiv%3D%22refresh%22+content%3D%220%3Burl%3Djavascript%3Adocument.vulnerable%3Dtrue%3B%22%3E%5D%5D%3E', 'UTF8'));\n</code></pre>"},{"location":"platform/sdk/utils/url/#functions","title":"Functions","text":"Function Description Returns encode(input) Encode an input string to application/x-www-form-urlencoded format string decode(input) Decode an input string from application/x-www-form-urlencoded format string escape(input) Escape an input string to comply to URI RFC 3986 string"},{"location":"platform/sdk/utils/utf8/","title":"UTF8","text":"<p>UTF8 object is used to encode/decode strings in UTF8.</p>"},{"location":"platform/sdk/utils/utf8/#basic-usage","title":"Basic Usage","text":"<pre><code>import { utf8 } from \"sdk/utils\";\nimport { response } from \"sdk/http\";\n\nresponse.println(JSON.stringify(utf8.encode(\"mystring\")));\n\nresponse.flush();\nresponse.close();\n</code></pre>"},{"location":"platform/sdk/utils/utf8/#functions","title":"Functions","text":"Function Description Returns encode(input, charset) Encode an input string to UTF8 string decode(input) Decode an input string as UTF8 string bytesToString(bytes, offset, length) Translate bytes to string in UTF8 string"},{"location":"platform/sdk/utils/uuid/","title":"UUID","text":"<p>UUID object is used to generate random universally unique identifiers.</p>"},{"location":"platform/sdk/utils/uuid/#basic-usage","title":"Basic Usage","text":"<pre><code>import { uuid } from \"sdk/utils\";\nimport { response } from \"sdk/http\";\n\nresponse.println(uuid.random());\nresponse.println(JSON.stringify(uuid.validate(\"14a3ddce-f86d-4f51-a2e0-6e497b94bbe5\")));\n\nresponse.flush();\nresponse.close();\n</code></pre>"},{"location":"platform/sdk/utils/uuid/#functions","title":"Functions","text":"Function Description Returns random() Returns a random UUID string string validate(input) Validates whether the provided input is a valid UUID string boolean"},{"location":"platform/sdk/utils/xml/","title":"XML","text":"<p>XML object is used to transfrom from JSON to XML and vice versa.</p>"},{"location":"platform/sdk/utils/xml/#example-usage","title":"Example Usage","text":"<pre><code>import { xml } from \"sdk/utils\";\nimport { response } from \"sdk/http\";\n\nconst jsonInput = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    bio: {\n        age: 24,\n        sex: \"male\"\n    }\n};\n\nconst xmlInput =\n    \"&lt;person&gt;\" +\n    \"&lt;firstName&gt;John&lt;/firstName&gt;\" +\n    \"&lt;lastName&gt;Doe&lt;/lastName&gt;\" +\n    \"&lt;bio&gt;\" +\n    \"&lt;age&gt;24&lt;/age&gt;\" +\n    \"&lt;sex&gt;male&lt;/sex&gt;\" +\n    \"&lt;/bio&gt;\" +\n    \"&lt;/person&gt;\";\n\nresponse.println(xml.fromJson(JSON.stringify(jsonInput)));\nresponse.println(xml.toJson(xmlInput));\n\nresponse.flush();\nresponse.close();\n</code></pre>"},{"location":"platform/sdk/utils/xml/#functions","title":"Functions","text":"Function Description Returns fromJson(json) Converts a JSON to a XML string string toJson(xml) Converts a XML to JSON string string"},{"location":"platform/services/","title":"REST Services","text":""},{"location":"platform/templates/","title":"Templates","text":""},{"location":"platform/widgets/","title":"Widgets","text":""},{"location":"tooling/","title":"Tooling Documentation","text":"<p>Welcome to the Tooling Documentation for codbex! This section provides comprehensive information about the various perspectives, concepts, and features available in our tooling environment. Whether you're a novice user or an experienced developer, this documentation will help you navigate through the tooling interface and utilize its functionalities effectively.</p>"},{"location":"tooling/#perspectives","title":"Perspectives","text":"<p>Explore the different perspectives available in our tooling environment:</p> <ul> <li>Workbench Basics</li> <li>Git Perspective</li> <li>Databases Perspective</li> <li>Debugger Perspective</li> <li>Documents Perspective</li> <li>Processes Workspace Perspective</li> <li>Integration Flows Editor</li> <li>Terminal Perspective</li> </ul>"},{"location":"tooling/#concepts","title":"Concepts","text":"<p>Learn about key concepts and methodologies used in our tooling environment:</p> <ul> <li>Model-Driven Architecture (MDA)</li> <li>Entity Data Modeler (EDM)</li> <li>Extensibility - Extension Points and Extensions</li> </ul>"},{"location":"tooling/#perspectives-details","title":"Perspectives Details","text":""},{"location":"tooling/#workbench-basics","title":"Workbench Basics","text":"<p>Discover the fundamental components of the workbench perspective:</p> <ul> <li>Workbench</li> <li>Import Area</li> <li>Search Area</li> <li>Properties Area</li> <li>Console View</li> <li>Code Editor (Monaco)</li> <li>Problems View</li> <li>Preview View</li> <li>Logs View</li> <li>Loggers View</li> </ul>"},{"location":"tooling/#git-perspective","title":"Git Perspective","text":"<p>Explore the Git-related functionalities within our tooling environment:</p> <ul> <li>Git Projects View</li> <li>Local Branches View</li> <li>Remote Branches View</li> <li>History View</li> <li>Git History View</li> <li>Git Staging View</li> <li>Diff Editor</li> </ul>"},{"location":"tooling/#databases-perspective","title":"Databases Perspective","text":"<p>Learn how to interact with databases through our tooling environment:</p> <ul> <li>Database Explorer</li> <li>NoSQL Datasources Support</li> <li>SQL Console</li> <li>Result View</li> <li>Databases View</li> <li>Transfer View</li> <li>Data Export and Import</li> </ul>"},{"location":"tooling/#debugger-perspective","title":"Debugger Perspective","text":"<p>Understand the debugging capabilities offered by our tooling environment:</p> <ul> <li>Debugger Basics</li> <li>Debugging Tools</li> <li>Breakpoints View</li> <li>Call Stack View</li> <li>Variables View</li> <li>Watch Expressions View</li> </ul>"},{"location":"tooling/#documents-perspective","title":"Documents Perspective","text":"<p>Explore document management features within our tooling environment:</p> <ul> <li>Documents Explorer</li> <li>Document Preview</li> <li>File Upload and Management</li> </ul>"},{"location":"tooling/#processes-workspace-perspective","title":"Processes Workspace Perspective","text":"<p>Discover tools for managing business processes within our tooling environment:</p> <ul> <li>Process Definitions View</li> <li>Process Instances View</li> <li>Process Context View</li> <li>Process Viewer</li> <li>Process Inbox</li> <li>Dead-Letter Jobs View</li> <li>BPMN Modeler</li> </ul>"},{"location":"tooling/#integration-flows-editor","title":"Integration Flows Editor","text":"<p>Learn about creating and managing integration flows:</p> <ul> <li>Integrations Basics</li> <li>Key Features</li> <li>Benefits</li> </ul>"},{"location":"tooling/#terminal-perspective","title":"Terminal Perspective","text":"<p>Explore the terminal interface and its capabilities:</p> <ul> <li>Terminal Basics</li> <li>Commands and Shortcuts</li> </ul>"},{"location":"tooling/#model-driven-architecture-mda","title":"Model-Driven Architecture (MDA)","text":"<p>Understand the principles and benefits of Model-Driven Architecture (MDA):</p> <ul> <li>General Overview</li> <li>Entity Data Modeler (EDM)</li> </ul>"},{"location":"tooling/#extensibility-in-the-platform-based-on-extension-points-and-extensions","title":"Extensibility in the Platform based on Extension Points and Extensions","text":"<p>Learn how our platform supports extensibility through extension points and extensions:</p> <ul> <li>Overview</li> <li>Extension Points</li> <li>Extensions</li> <li>Workflow</li> <li>Benefits</li> </ul>"},{"location":"tooling/#compatibility-with-sap-hana-xs-classic","title":"Compatibility with SAP HANA XS Classic","text":"<p>Explore the compatibility features for SAP HANA XS Classic:</p> <ul> <li>Key Features for Compatibility</li> <li>Developer Workflows</li> <li>Benefits</li> <li>Migrating</li> </ul>"},{"location":"tooling/compatibility/","title":"Compatibility with SAP HANA XS Classic","text":""},{"location":"tooling/compatibility/#overview","title":"Overview","text":"<p>The platform is designed with compatibility in mind, particularly concerning SAP HANA XS Classic (a.k.a. Project XSK). This compatibility ensures a seamless integration and support for features that align with the characteristics and requirements of SAP HANA XS Classic development.</p>"},{"location":"tooling/compatibility/#key-features-for-compatibility","title":"Key Features for Compatibility","text":""},{"location":"tooling/compatibility/#1-xs-classic-development-support","title":"1. XS Classic Development Support","text":"<ul> <li>The platform provides extensive support for SAP HANA XS Classic development paradigms. Developers familiar with XS Classic can leverage their existing skills and knowledge within the platform.</li> </ul>"},{"location":"tooling/compatibility/#2-xsk-project-integration","title":"2. XSK Project Integration","text":"<ul> <li>The platform seamlessly integrates with SAP HANA XS Classic (XSK Project), allowing developers to work with XSK-specific artifacts and structures.</li> </ul>"},{"location":"tooling/compatibility/#3-sqlscript-compatibility","title":"3. SQLScript Compatibility","text":"<ul> <li>The platform supports SQLScript, the scripting language used in SAP HANA XS Classic development. This ensures compatibility with existing SQLScript codebases, making it easier to migrate or extend XS Classic projects.</li> </ul>"},{"location":"tooling/compatibility/#4-hdb-module-support","title":"4. HDB Module Support","text":"<ul> <li>The platform supports the creation and management of HDB (HANA Database) modules, providing a familiar structure for developers accustomed to SAP HANA XS Classic development.</li> </ul>"},{"location":"tooling/compatibility/#5-xsodata-service-compatibility","title":"5. XSODATA Service Compatibility","text":"<ul> <li>Compatibility extends to XSODATA services, enabling the platform to expose OData services in a manner consistent with SAP HANA XS Classic.</li> </ul>"},{"location":"tooling/compatibility/#6-security-integration","title":"6. Security Integration","text":"<ul> <li>The platform integrates security features that align with SAP HANA XS Classic standards, ensuring a secure development and runtime environment.</li> </ul>"},{"location":"tooling/compatibility/#7-build-and-deployment-integration","title":"7. Build and Deployment Integration","text":"<ul> <li>Build and deployment processes within the platform are designed to align with SAP HANA XS Classic methodologies, facilitating the migration of projects and minimizing disruptions.</li> </ul>"},{"location":"tooling/compatibility/#workflow-for-sap-hana-xs-classic-developers","title":"Workflow for SAP HANA XS Classic Developers","text":"<ol> <li>Project Creation:</li> <li> <p>Developers can create projects with an XS Classic structure, including HDB modules, SQLScript files, and other XS Classic artifacts.</p> </li> <li> <p>Code Migration:</p> </li> <li> <p>Existing SAP HANA XS Classic code can be migrated to the platform with minimal modifications, leveraging the platform's compatibility features.</p> </li> <li> <p>Development Environment:</p> </li> <li> <p>XS Classic developers can use the familiar development environment provided by the platform, enhancing productivity and collaboration.</p> </li> <li> <p>Testing and Deployment:</p> </li> <li>The platform supports testing and deployment processes in alignment with SAP HANA XS Classic, ensuring a smooth transition from development to production.</li> </ol>"},{"location":"tooling/compatibility/#benefits-of-compatibility","title":"Benefits of Compatibility","text":"<ul> <li>Skill Transition:</li> <li> <p>XS Classic developers can transition smoothly to the platform, leveraging their existing skills and knowledge.</p> </li> <li> <p>Code Reusability:</p> </li> <li> <p>Existing XS Classic codebases can be reused or migrated with minimal modifications, saving time and effort during the transition.</p> </li> <li> <p>Consistent Development Environment:</p> </li> <li> <p>The platform provides a consistent and feature-rich development environment, enhancing the overall development experience for XS Classic developers.</p> </li> <li> <p>Future-Proofing:</p> </li> <li>Compatibility features are designed to accommodate future updates and changes, ensuring ongoing support for SAP HANA XS Classic paradigms.</li> </ul>"},{"location":"tooling/compatibility/#migrating-from-sap-hana-xs-classic","title":"Migrating from SAP HANA XS Classic","text":""},{"location":"tooling/compatibility/#1-enhanced-development-environment","title":"1. Enhanced Development Environment","text":"<ul> <li>The platform provides a modern and feature-rich development environment that enhances developer productivity. Advanced code editors, debugging tools, and collaboration features contribute to an improved development experience.</li> </ul>"},{"location":"tooling/compatibility/#2-extended-language-support","title":"2. Extended Language Support","text":"<ul> <li>While SAP HANA XS Classic primarily uses SQLScript and XS variant of JavaScript, the platform offers broader language support, including JavaScript, TypeScript, Python, and other scripting languages as well as Java for the server-side extensions. This expanded support enables developers to choose the most suitable language for specific tasks.</li> </ul>"},{"location":"tooling/compatibility/#3-compatibility-with-latest-technologies","title":"3. Compatibility with Latest Technologies","text":"<ul> <li>Migrating to the platform ensures compatibility with the latest technologies and industry standards. The platform is designed to integrate seamlessly with contemporary tools and frameworks, allowing for future-proof development.</li> </ul>"},{"location":"tooling/compatibility/#4-rich-ecosystem-of-extensions","title":"4. Rich Ecosystem of Extensions","text":"<ul> <li>The platform features a rich ecosystem of extensions, offering pre-built modules, libraries, and integrations. This ecosystem accelerates development by providing ready-to-use components and reducing the need to build everything from scratch.</li> </ul>"},{"location":"tooling/compatibility/#5-integrated-version-control-git","title":"5. Integrated Version Control (Git)","text":"<ul> <li>The platform seamlessly integrates with Git for version control, streamlining collaboration and enabling efficient code management. Developers can leverage Git features directly within the platform's interface.</li> </ul>"},{"location":"tooling/compatibility/#6-flexible-deployment-options","title":"6. Flexible Deployment Options","text":"<ul> <li>Unlike SAP HANA XS Classic, the platform supports flexible deployment options, including cloud deployment and containerization. This flexibility allows for scalable and efficient application deployment based on project requirements.</li> </ul>"},{"location":"tooling/compatibility/#7-extensibility-through-plugins","title":"7. Extensibility through Plugins","text":"<ul> <li>The platform supports extensibility through plugins, allowing developers to tailor their development environment with additional features and integrations. This extensibility contributes to a customizable and adaptable experience.</li> </ul>"},{"location":"tooling/compatibility/#8-centralized-project-management","title":"8. Centralized Project Management","text":"<ul> <li>Project management is centralized within the platform, providing a unified interface for tasks such as code editing, debugging, testing, and deployment. This centralized approach enhances project organization and collaboration.</li> </ul>"},{"location":"tooling/compatibility/#9-built-in-security-features","title":"9. Built-in Security Features","text":"<ul> <li>The platform incorporates built-in security features, ensuring a secure development and runtime environment. Security measures are integrated into the development lifecycle, reducing the risk of vulnerabilities.</li> </ul>"},{"location":"tooling/compatibility/#10-comprehensive-documentation-and-community-support","title":"10. Comprehensive Documentation and Community Support","text":"<ul> <li>The platform offers comprehensive documentation and benefits from an active community. Developers migrating from SAP HANA XS Classic can access resources, tutorials, and community forums for assistance and knowledge sharing.</li> </ul>"},{"location":"tooling/compatibility/#11-adaptability-to-diverse-project-requirements","title":"11. Adaptability to Diverse Project Requirements","text":"<ul> <li>The platform's adaptability to diverse project requirements, whether they involve web development, data modeling, or business processes, makes it suitable for a wide range of use cases. This adaptability promotes flexibility and versatility in project development.</li> </ul> <p>Migrating to the platform from SAP HANA XS Classic offers numerous benefits, ranging from an enhanced development environment to compatibility with the latest technologies. Developers can leverage the platform's features to streamline development workflows, embrace a broader set of languages, and stay aligned with industry best practices.</p> <p>In conclusion, the compatibility features in the platform ensure a seamless integration with SAP HANA XS Classic, allowing developers to leverage their existing expertise and facilitating a smooth transition to the platform.</p>"},{"location":"tooling/extensibility/","title":"Extensibility","text":""},{"location":"tooling/extensibility/#overview","title":"Overview","text":"<p>Extensibility is a key feature in the platform, allowing developers to enhance and customize the functionality of the system. This is achieved through the use of Extension Points and Extensions. Extension Points serve as predefined hooks or areas within the platform where custom functionality can be injected, and Extensions are the modules or components that provide the actual implementation for these Extension Points.</p>"},{"location":"tooling/extensibility/#extension-points","title":"Extension Points","text":""},{"location":"tooling/extensibility/#definition","title":"Definition","text":"<p>Extension Points are specific locations or hooks within the platform where developers can inject custom functionality. These points are predefined by the platform and represent areas where extensions can contribute additional features or modify existing behavior.</p>"},{"location":"tooling/extensibility/#usage","title":"Usage","text":"<ol> <li>Identification:</li> <li> <p>Developers identify Extension Points based on the platform's documentation, which provides a list of available points for customization.</p> </li> <li> <p>Declaration:</p> </li> <li> <p>Extensions Points are declared in a standardized manner using a JSON format, defining their characteristics and potential contributions.</p> </li> <li> <p>Platform Integration:</p> </li> <li>The platform integrates with these Extension Points during runtime, allowing for dynamic loading and execution of custom functionality.</li> </ol>"},{"location":"tooling/extensibility/#extensions","title":"Extensions","text":""},{"location":"tooling/extensibility/#definition_1","title":"Definition","text":"<p>Extensions are the concrete implementations provided by developers to extend the functionality of the platform. Each Extension is associated with a specific Extension Point and contributes additional behavior or modifications to the platform.</p>"},{"location":"tooling/extensibility/#usage_1","title":"Usage","text":"<ol> <li>Creation:</li> <li> <p>Developers create Extensions to fulfill specific requirements or add new features to the platform.</p> </li> <li> <p>Configuration:</p> </li> <li> <p>Configuration files associated with Extensions define parameters, dependencies, and other settings necessary for proper integration with the platform.</p> </li> <li> <p>Registration:</p> </li> <li> <p>Extensions are registered with the platform, indicating which Extension Points they contribute to and the functionality they provide.</p> </li> <li> <p>Lifecycle Management:</p> </li> <li>Extensions have a defined lifecycle, including initialization, execution, and possible cleanup phases. The platform manages the loading and unloading of Extensions dynamically.</li> </ol>"},{"location":"tooling/extensibility/#workflow","title":"Workflow","text":"<ol> <li>Identification of Requirements:</li> <li> <p>Developers identify specific requirements or customizations they want to introduce to the platform.</p> </li> <li> <p>Extension Points Exploration:</p> </li> <li> <p>Explore the available Extension Points in the platform's documentation to determine where custom functionality can be injected.</p> </li> <li> <p>Extension Creation:</p> </li> <li> <p>Develop Extensions that fulfill the identified requirements. Each Extension contributes to a specific Extension Point.</p> </li> <li> <p>Configuration:</p> </li> <li> <p>Configure Extensions by defining parameters, dependencies, and any other necessary settings.</p> </li> <li> <p>Registration:</p> </li> <li> <p>Register Extensions with the platform, specifying the Extension Points they contribute to.</p> </li> <li> <p>Dynamic Integration:</p> </li> <li>The platform dynamically integrates Extensions at runtime, enhancing its overall functionality based on the provided customizations.</li> </ol>"},{"location":"tooling/extensibility/#benefits","title":"Benefits","text":"<ul> <li>Flexibility:</li> <li> <p>Extensibility allows for a high degree of flexibility in adapting the platform to diverse requirements without modifying its core codebase.</p> </li> <li> <p>Modularity:</p> </li> <li> <p>The modular nature of Extensions promotes code organization and maintainability, as each custom feature is encapsulated within its own module.</p> </li> <li> <p>Customization:</p> </li> <li> <p>Developers can tailor the platform to specific use cases, adding or altering functionality as needed.</p> </li> <li> <p>Dynamic Updates:</p> </li> <li>Extensions can be added, updated, or removed dynamically without requiring a full system restart, enabling seamless updates and modifications.</li> </ul> <p>In conclusion, the extensibility model in the platform, facilitated by Extension Points and Extensions, empowers developers to tailor the system to specific requirements, fostering a highly adaptable and customizable environment.</p>"},{"location":"tooling/modeling/","title":"Modeling","text":""},{"location":"tooling/modeling/#model-driven-architecture-mda-and-model-driven-development-mdd","title":"Model-Driven Architecture (MDA) and Model-Driven Development (MDD)","text":""},{"location":"tooling/modeling/#definition","title":"Definition","text":"<p>Model-Driven Architecture (MDA) is a software design and development approach that focuses on creating and utilizing models to represent different aspects of a system. It is an initiative by the Object Management Group (OMG) to promote a standardized way of developing software systems using models as primary artifacts.</p>"},{"location":"tooling/modeling/#key-features","title":"Key Features","text":"<ul> <li> <p>Entity Data Modeler: codbex provides a powerful Entity Data Modeler tool that allows users to visually design data models for their applications. Users can define entities, attributes, relationships, and constraints using an intuitive graphical interface. The Entity Data Modeler simplifies the process of designing and managing complex data structures, enabling developers to focus on higher-level application logic.</p> </li> <li> <p>Generation and Application Templates: codbex offers built-in generation capabilities and a library of application templates to accelerate development. Users can generate application code, including database schema, backend logic, and frontend components, based on predefined templates and configurations. This reduces the time and effort required to build new applications, ensuring consistency and quality across projects.</p> </li> <li> <p>Predefined Reference and Master Data Modules: The codbex platform includes a repository of predefined reference and master data modules that cover common business domains and industries. These modules contain standard data structures, rules, and workflows that can be easily integrated into applications. By leveraging these predefined modules, developers can expedite development and ensure compliance with industry standards and best practices.</p> </li> <li> <p>Application Building Blocks Modules: codbex provides a library of reusable application building blocks, such as authentication, authorization, user management, and reporting modules. These building blocks encapsulate common functionality and business logic, allowing developers to quickly assemble custom applications from pre-existing components. This modular approach promotes code reuse, simplifies maintenance, and accelerates time-to-market for new applications.</p> </li> </ul> <p></p>"},{"location":"tooling/modeling/#key-concepts","title":"Key Concepts","text":"<ol> <li>Platform-Independent Model (PIM):</li> <li> <p>A PIM represents the system's functionality independently of any specific technology or platform. It is a high-level abstraction that captures the essential aspects of the system.</p> </li> <li> <p>Platform-Specific Model (PSM):</p> </li> <li> <p>A PSM represents the system's functionality in terms of a specific technology or platform. It serves as a bridge between the high-level abstraction of the PIM and the concrete implementation details.</p> </li> <li> <p>Transformation:</p> </li> <li> <p>Transformation processes are used to convert models from a higher abstraction level (PIM) to a lower one (PSM). This process involves applying rules and templates to generate code or artifacts for a particular platform.</p> </li> <li> <p>Code Generation:</p> </li> <li> <p>Automated code generation is a key aspect of MDA. It involves transforming models into executable code for a specific technology stack. This can significantly reduce the manual coding effort and improve consistency.</p> </li> <li> <p>Reusability:</p> </li> <li>MDA encourages the reuse of models and transformations across projects, promoting consistency and efficiency in software development.</li> </ol>"},{"location":"tooling/modeling/#entity-data-modeler-edm","title":"Entity Data Modeler (EDM)","text":""},{"location":"tooling/modeling/#overview","title":"Overview","text":"<p>The Entity Data Modeler (EDM) is a component within the MDA framework that focuses on designing the data model of an application. It allows developers to graphically create, visualize, and modify domain objects (entities) and their relationships.</p>"},{"location":"tooling/modeling/#key-features_1","title":"Key Features","text":"<ol> <li>Graphical Modeling:</li> <li> <p>EDM provides a visual environment for creating domain objects and defining their attributes. Developers can design the data model by dragging and dropping entities, specifying properties, and establishing relationships.</p> </li> <li> <p>Properties for Various Aspects:</p> </li> <li> <p>Developers can assign properties to entities for different purposes, such as defining database-related settings (e.g., table names, constraints), user interface attributes, security configurations, and other relevant metadata.</p> </li> <li> <p>Relationships and Dependencies:</p> </li> <li> <p>EDM allows users to model relationships between entities, specifying associations, cardinalities, and dependencies. This ensures a clear representation of how different parts of the system are connected.</p> </li> <li> <p>Code Generation Templates:</p> </li> <li> <p>Predefined templates and rules for code generation are associated with the EDM. These templates guide the transformation process, automatically generating code based on the graphical models created by developers.</p> </li> <li> <p>Consistency and Maintainability:</p> </li> <li> <p>By centralizing the data model in a visual environment, EDM promotes consistency and maintainability. Changes made to the model are reflected in the generated code, reducing the chances of inconsistencies.</p> </li> <li> <p>Template Customization:</p> </li> <li>Advanced users can customize code generation templates to tailor the generated code to specific project requirements. This flexibility allows developers to adapt the generated artifacts to the unique needs of their applications.</li> </ol>"},{"location":"tooling/modeling/#workflow","title":"Workflow","text":"<ol> <li>Modeling:</li> <li> <p>Use the graphical interface to create entities, define attributes, and establish relationships.</p> </li> <li> <p>Property Assignment:</p> </li> <li> <p>Assign properties to entities for database, user interface, security, and other configurations.</p> </li> <li> <p>Validation:</p> </li> <li> <p>Validate the model to ensure it adheres to predefined rules and constraints.</p> </li> <li> <p>Code Generation:</p> </li> <li> <p>Trigger the code generation process, transforming the graphical model into executable code.</p> </li> <li> <p>Application Development:</p> </li> <li>Build and extend the generated code to implement business logic and additional functionalities.</li> </ol>"},{"location":"tooling/modeling/#benefits","title":"Benefits","text":"<ul> <li>Efficiency:</li> <li> <p>EDM accelerates the development process by providing a visual and centralized way to design the data model.</p> </li> <li> <p>Consistency:</p> </li> <li> <p>Models and generated code remain consistent, reducing the likelihood of errors caused by manual changes.</p> </li> <li> <p>Adaptability:</p> </li> <li> <p>Developers can adapt the generated code to meet specific project requirements while leveraging predefined templates.</p> </li> <li> <p>Collaboration:</p> </li> <li>Teams can collaborate more effectively by working with a common visual representation of the data model.</li> </ul> <p>In conclusion, the Entity Data Modeler within the Model-Driven Architecture framework empowers developers to design robust data models visually and efficiently generate code based on those models. This approach enhances consistency, maintainability, and collaboration in software development projects.</p>"},{"location":"tooling/multitenancy/","title":"Multitenancy","text":"<p>The codbex platform provides robust multitenancy support, allowing organizations to efficiently manage and isolate resources for multiple tenants within a single instance of the platform. This documentation page outlines the key aspects of multitenancy support in various areas of the codbex platform.</p>"},{"location":"tooling/multitenancy/#datasources","title":"DataSources","text":"<p>The platform supports multitenancy in DataSources, enabling tenants to have their own dedicated databases or data sources. Each tenant can configure their DataSources independently, ensuring data isolation and security.</p>"},{"location":"tooling/multitenancy/#csv-importexport","title":"CSV Import/Export","text":"<p>Multitenancy extends to CSV Import/Export functionality, allowing tenants to import and export data from their own segregated datasets. Tenants can perform bulk data operations without affecting other tenants' data.</p>"},{"location":"tooling/multitenancy/#odata","title":"OData","text":"<p>OData endpoints in codbex are multitenant-aware, providing tenants with their own OData APIs to access and manipulate their data securely. Tenants can leverage OData features while ensuring data isolation and compliance.</p>"},{"location":"tooling/multitenancy/#documents","title":"Documents","text":"<p>Multitenancy in the platform Documents ensures that each tenant has its own dedicated storage for managing documents. Tenants can upload, download, and manage documents independently, with strict access control policies enforced for data security.</p>"},{"location":"tooling/multitenancy/#jobs","title":"Jobs","text":"<p>Job scheduling system supports multitenancy, allowing the background jobs to be executed for all the tenants. Each tenant receives the processing of the executed jobs tailored to their specific requirements without interference from other tenants.</p>"},{"location":"tooling/multitenancy/#listeners","title":"Listeners","text":"<p>Listeners are multitenant-aware, enabling tenants to define and configure their own event listeners to react to system events or custom triggers. Tenants can implement custom business logic or integrations specific to their needs.</p>"},{"location":"tooling/multitenancy/#exclusions","title":"Exclusions","text":"<p>While multitenancy is a core aspect of the codbex platform, certain features and functionalities are excluded from multitenant support. These include:</p> <ul> <li>Processes: Process instances and workflows are not multitenant-aware and operate at the system level.</li> <li>Integrations: Integration flows and endpoints are managed at the system level and are not tenant-isolated.</li> <li>Extensions: Extensions and customizations applied to the platform are shared across all tenants.</li> <li>Git: Version control and repository management functionalities are not isolated per tenant.</li> <li>Dev Scenarios: Development scenarios and environments are shared among all tenants and not segregated.</li> </ul>"},{"location":"tooling/multitenancy/#conclusion","title":"Conclusion","text":"<p>Multitenancy support provides a robust framework for organizations to host multiple tenants securely and efficiently within a single instance of the platform. By offering tenant isolation in key areas such as DataSources, CSV Import/Export, OData, Documents, Jobs, and Listeners, the codbex platform ensures data integrity, privacy, and compliance for each tenant's operations.</p>"},{"location":"tooling/databases/","title":"Databases","text":"<p>Welcome to the \"Database\" perspective in the codbex platform! This perspective is tailored for developers and database administrators, offering a suite of tools to interact with both relational and NoSQL databases seamlessly. Explore the various features and tools available to streamline your database-related tasks.</p> <p></p>"},{"location":"tooling/databases/#1-databases-explorer","title":"1. Databases Explorer:","text":"<p>Inspect the datasources, schemes, tables, views, procedures, sequences and other database artefacts.</p> <p></p>"},{"location":"tooling/databases/#2-sql-console","title":"2. SQL Console:","text":"<p>Execute SQL queries, interact with the database, and perform data anonymization directly from the console.</p> <p></p>"},{"location":"tooling/databases/#3-result-view","title":"3. Result View:","text":"<p>View and analyze the results of SQL queries, perform data anonymization, and export data seamlessly.</p> <p></p>"},{"location":"tooling/databases/#4-databases-view","title":"4. Databases View:","text":"<p>Manage datasources, configure connections, and perform essential actions related to database connectivity.</p> <p></p>"},{"location":"tooling/databases/#5-transfer-view","title":"5. Transfer View:","text":"<p>Facilitate on-line synchronous data transfer between two datasource schemas, providing instant logs for progress tracking.</p> <p></p>"},{"location":"tooling/databases/#6-data-export-and-import","title":"6. Data Export and Import:","text":"<p>Transfer data between relational databases and NoSQL datasources using CSV and JSON formats, with support for streaming large files.</p> <p></p> <p></p>"},{"location":"tooling/databases/#7-data-anonymization","title":"7. Data Anonymization:","text":"<p>Data Anonymization is a critical practice for organizations looking to protect sensitive information, comply with privacy regulations, and foster trust with their customers and stakeholders.</p> <p></p> <p>The Database perspective in the platform empowers developers and database administrators to efficiently manage, query, and transfer data across various datasources. Dive into the specific tools and features to enhance your database-related workflows.</p>"},{"location":"tooling/databases/data-anonymization/","title":"Anonymization","text":""},{"location":"tooling/databases/data-anonymization/#data-anonymization","title":"Data Anonymization","text":"<p>Data Anonymization is a process used to protect sensitive information by converting or removing personally identifiable information (PII) from datasets. The primary goal of anonymization is to prevent individuals from being identified while still maintaining the utility and integrity of the data for analysis and research purposes.</p> <p></p>"},{"location":"tooling/databases/data-anonymization/#key-components","title":"Key Components:","text":"<ol> <li> <p>Personal Data Removal: Anonymization techniques involve removing direct identifiers such as names, social security numbers, addresses, and other personal information from the dataset.</p> </li> <li> <p>Pseudonymization: In cases where removing data entirely is not feasible, pseudonymization replaces direct identifiers with artificial identifiers or pseudonyms. This technique helps to obscure the identity of individuals while still allowing for analysis.</p> </li> <li> <p>Generalization: Generalization involves replacing specific values with more general or less precise values. For example, replacing exact ages with age ranges (e.g., 20-30 years old) or replacing precise geographic locations with broader regions (e.g., city-level data replaced with country-level data).</p> </li> <li> <p>Data Masking: Data masking involves replacing sensitive data with fictional or anonymized data while preserving the format and structure of the original data. This technique ensures that the data remains useful for testing or development purposes without exposing sensitive information.</p> </li> </ol>"},{"location":"tooling/databases/data-anonymization/#benefits","title":"Benefits:","text":"<ul> <li> <p>Privacy Protection: Data anonymization helps organizations comply with privacy regulations such as GDPR, CCPA, and HIPAA by safeguarding individuals' privacy rights and preventing unauthorized access to personal data.</p> </li> <li> <p>Data Sharing: Anonymized datasets can be shared more freely for research, collaboration, and analysis purposes, as they minimize the risk of exposing sensitive information.</p> </li> <li> <p>Risk Reduction: By anonymizing data, organizations mitigate the risk of data breaches, identity theft, and other security incidents associated with the exposure of personal information.</p> </li> <li> <p>Ethical Considerations: Anonymization promotes ethical data handling practices by prioritizing the privacy and confidentiality of individuals' information.</p> </li> </ul>"},{"location":"tooling/databases/data-anonymization/#challenges","title":"Challenges:","text":"<ul> <li> <p>Data Utility: Anonymization techniques must balance the need for privacy with the preservation of data utility. Over-anonymization can lead to data sets that are less useful for analysis and research purposes.</p> </li> <li> <p>Re-identification Risk: Despite anonymization efforts, there is always a risk of re-identification, especially when combining anonymized datasets or using advanced data analysis techniques.</p> </li> <li> <p>Complexity: Anonymizing data effectively requires expertise in data privacy, security, and regulatory compliance. Implementing robust anonymization processes can be complex and resource-intensive.</p> </li> </ul>"},{"location":"tooling/databases/data-anonymization/#conclusion","title":"Conclusion:","text":"<p>Data Anonymization is a critical practice for organizations looking to protect sensitive information, comply with privacy regulations, and foster trust with their customers and stakeholders. By adopting effective anonymization techniques, organizations can strike a balance between privacy protection and data utility, ensuring that data remains valuable for analysis while minimizing privacy risks.</p>"},{"location":"tooling/databases/databases/","title":"Databases","text":"<p>The \"Databases\" view in the codbex platform is a central hub for managing and configuring datasources for your projects. This section provides an overview of the key features and actions available in the \"Databases\" view.</p> <p></p>"},{"location":"tooling/databases/databases/#adding-a-new-datasource","title":"Adding a New Datasource","text":"<ol> <li>Open the Databases View:</li> <li> <p>Navigate to the Databases perspective and select \"Databases\" view from the toolbar or menu.</p> </li> <li> <p>Add a New Datasource:</p> </li> <li> <p>Click \"Add Datasource\" to initiate the process of adding a new datasource.</p> </li> <li> <p>Configure Datasource Details:</p> </li> <li> <p>Enter essential details for the datasource, including:</p> <ul> <li>Driver: Choose the appropriate database driver from the available options.</li> <li>URL: Specify the connection URL for the database.</li> <li>Username: Provide the username for accessing the database.</li> <li>Password: Enter the password associated with the provided username.</li> <li>Additional Connection Parameters: Include any additional parameters required for the database connection.</li> </ul> </li> <li> <p>Test the Connection:</p> </li> <li> <p>Before saving the datasource configuration, use the \"Test Connection\" button to ensure that the connection details are accurate.</p> </li> <li> <p>Save the Datasource:</p> </li> <li>Click the \"Save\" button to save the configured datasource.</li> </ol>"},{"location":"tooling/databases/databases/#managing-existing-datasources","title":"Managing Existing Datasources","text":"<ol> <li>View Existing Datasources:</li> <li> <p>The Databases View displays a list of existing datasources. Expand the nodes to view configured datasources and their details.</p> </li> <li> <p>Edit Datasource Details:</p> </li> <li> <p>Select a datasource and choose \"Edit\" to modify the configuration details. Update the necessary fields and save the changes.</p> </li> <li> <p>Remove a Datasource:</p> </li> <li>To remove a datasource, select it and choose \"Remove.\" Confirm the action, and the datasource will be deleted from the configuration.</li> </ol>"},{"location":"tooling/databases/databases/#datasource-actions","title":"Datasource Actions","text":""},{"location":"tooling/databases/databases/#1-refresh-datasources","title":"1. Refresh Datasources:","text":"<ul> <li>Use the \"Refresh\" button or right-click and choose \"Refresh\" to update the list of datasources in the view.</li> </ul>"},{"location":"tooling/databases/databases/#2-view-connection-status","title":"2. View Connection Status:","text":"<ul> <li>Quickly check the connection status of a datasource by examining its icon. A green icon indicates an active connection, while a red icon indicates a disconnected state.</li> </ul>"},{"location":"tooling/databases/databases/#3-adjust-databases-view-preferences","title":"3. Adjust Databases View Preferences:","text":"<ul> <li>Customize the appearance and behavior of the Databases View by adjusting preferences, such as the display format and connection status indicators.</li> </ul>"},{"location":"tooling/databases/databases/#conclusion","title":"Conclusion","text":"<p>The \"Databases View\" in the platform serves as a central point for managing datasources, allowing you to configure, edit, and remove connections effortlessly. Leverage its features to streamline database interactions and enhance your development workflow.</p>"},{"location":"tooling/databases/explorer/","title":"Database Explorer","text":"<p>The \"Database Explorer\" in the Databases perspective is a powerful tool for managing and interacting with databases. This section provides an overview of the key features and actions available in the \"Database Explorer.\"</p> <p></p>"},{"location":"tooling/databases/explorer/#connecting-to-a-database","title":"Connecting to a Database","text":"<ol> <li>Open the Database Explorer:</li> <li> <p>Navigate to the Databases perspective and select \"Database Explorer\" tab.</p> </li> <li> <p>Explore Connected Databases:</p> </li> <li>Once connected, the Database Explorer displays a list of connected databases. Expand the nodes to view tables, views, procedures, and other database objects.</li> </ol>"},{"location":"tooling/databases/explorer/#interacting-with-relational-database-objects","title":"Interacting with Relational Database Objects","text":"<ol> <li>View Table Data:</li> <li> <p>Double-click on a table to view its data. Use the grid to edit, filter, and sort records.</p> </li> <li> <p>Execute SQL Queries:</p> </li> <li> <p>Execute custom SQL queries by right-clicking on the database, selecting \"Execute SQL,\" and entering your query.</p> </li> <li> <p>Explore Schema Objects:</p> </li> <li> <p>Navigate through the database schema to explore tables, views, indexes, procedures, and other objects.</p> </li> <li> <p>Manage Indexes and Constraints:</p> </li> <li>Right-click on a table to manage indexes and constraints. Create, edit, or drop indexes and constraints as needed.</li> </ol>"},{"location":"tooling/databases/explorer/#interacting-with-nosql-datasources","title":"Interacting with NoSQL Datasources","text":"<ol> <li>Explore NoSQL Collections or Tables:</li> <li> <p>Once connected to a NoSQL datasource, explore collections or tables to view and interact with NoSQL data.</p> </li> <li> <p>Execute NoSQL Queries:</p> </li> <li>Perform queries on NoSQL data using the respective query language or tools provided by the NoSQL datasource.</li> </ol>"},{"location":"tooling/databases/explorer/#anonymizing-data","title":"Anonymizing Data","text":"<ol> <li>Select Columns for Anonymization:</li> <li> <p>Right-click on a table and choose \"Anonymize Data\" to select specific columns for anonymization.</p> </li> <li> <p>Choose Anonymization Type:</p> </li> <li> <p>Select the type of anonymization or masking for the chosen columns. Options may include randomization, data scrambling, or setting values to null.</p> </li> <li> <p>Execute Anonymization:</p> </li> <li>Execute the anonymization process to apply the chosen anonymization type to the selected columns.</li> </ol>"},{"location":"tooling/databases/explorer/#actions-in-the-database-explorer","title":"Actions in the Database Explorer","text":""},{"location":"tooling/databases/explorer/#1-refresh-database-connection","title":"1. Refresh Database Connection:","text":"<ul> <li>Use the \"Refresh\" button or right-click on a connection to refresh the list of objects and their statuses.</li> </ul>"},{"location":"tooling/databases/explorer/#2-show-contents","title":"2. Show Contents:","text":"<ul> <li>Use the \"Show Contents\" menu to execute a query to select all the records.</li> </ul>"},{"location":"tooling/databases/explorer/#3-generate-query-scripts","title":"3. Generate query scripts:","text":"<ul> <li>Use the \"Select\", \"Insert\", \"Update\", \"Delete\" menu items (once the \"Columns\" node is expanded) to generate the corresponding query in the SQL Console.</li> </ul>"},{"location":"tooling/databases/explorer/#4-import-and-export-data","title":"4. Import and Export Data:","text":"<ul> <li>Import and export data to and from tables using the \"Import Data\" and \"Export Data\" options.</li> </ul>"},{"location":"tooling/databases/explorer/#5-export-metadata","title":"5. Export Metadata:","text":"<ul> <li>Export metadadata from schema using the \"Export Metadata\" option.</li> </ul>"},{"location":"tooling/databases/explorer/#conclusion","title":"Conclusion","text":"<p>The \"Database Explorer\" in the Databases perspective of the codbex platform provides a comprehensive and user-friendly interface for managing and interacting with databases. Explore its features to streamline database-related tasks and enhance your development workflow.</p>"},{"location":"tooling/databases/export-import/","title":"Data Export &amp; Import","text":"<p>The \"Data Export and Import\" functionality in the codbex platform provides a versatile solution for transferring data between different datasources. This section covers the key features and actions related to data export and import, supporting both relational databases and NoSQL datasources.</p>"},{"location":"tooling/databases/export-import/#exporting-data","title":"Exporting Data","text":""},{"location":"tooling/databases/export-import/#relational-databases","title":"Relational Databases","text":"<ol> <li>CSV Format:</li> <li> <p>When exporting data from relational databases, the default file format is CSV (Comma-Separated Values). This format ensures compatibility and ease of use across various platforms.</p> </li> <li> <p>Streamed Transfer:</p> </li> <li>The underlying layer of the export functionality employs streaming, allowing the transfer of large datasets efficiently. This ensures optimal performance and reduced resource consumption.</li> </ol>"},{"location":"tooling/databases/export-import/#nosql-datasources","title":"NoSQL Datasources","text":"<ol> <li>JSON Format:</li> <li> <p>For NoSQL datasources like MongoDB, the default file format for data export is JSON (JavaScript Object Notation). JSON provides a flexible and widely supported structure for representing document-based data.</p> </li> <li> <p>Streaming Support:</p> </li> <li>Similar to relational databases, NoSQL data export benefits from the streaming underlying layer, enabling the transfer of large JSON files efficiently.</li> </ol>"},{"location":"tooling/databases/export-import/#importing-data","title":"Importing Data","text":""},{"location":"tooling/databases/export-import/#relational-databases_1","title":"Relational Databases","text":"<ol> <li>CSV File Import:</li> <li> <p>Import data into relational databases using CSV files. The import wizard guides you through the process, allowing mapping of CSV columns to database fields.</p> </li> <li> <p>Streaming Mechanism:</p> </li> <li>Leverage the streaming mechanism for importing large CSV files seamlessly. This ensures optimal resource utilization during the import operation.</li> </ol>"},{"location":"tooling/databases/export-import/#nosql-datasources_1","title":"NoSQL Datasources","text":"<ol> <li>JSON File Import:</li> <li> <p>Import data into NoSQL datasources by uploading JSON files. The import wizard facilitates mapping JSON attributes to the corresponding document fields in the datasource.</p> </li> <li> <p>Efficient Streaming:</p> </li> <li>The underlying streaming mechanism supports the efficient import of large JSON files, ensuring a smooth and resource-efficient process.</li> </ol>"},{"location":"tooling/databases/export-import/#conclusion","title":"Conclusion","text":"<p>The \"Data Export and Import\" functionality in the platform provides a robust solution for transferring data seamlessly between different datasources. Whether dealing with relational databases or NoSQL datasources, the support for CSV and JSON formats, coupled with the efficient streaming mechanism, ensures optimal performance and flexibility.</p>"},{"location":"tooling/databases/nosql/","title":"NoSQL Queries in SQL Console","text":"<p>How to use NoSQL queries in the SQL Console, including specifying collections, counting collections, creating and dropping collections, inserting, finding, updating, and deleting documents.</p> <p></p>"},{"location":"tooling/databases/nosql/#specify-a-collection-to-query","title":"Specify a collection to query","text":"<p>To specify a collection to query, use the following syntax:</p> <pre><code>{find:\"myCollection\"}\n</code></pre>"},{"location":"tooling/databases/nosql/#specify-a-count-of-a-collection","title":"Specify a count of a collection","text":"<p>To specify the count of a collection, use the following syntax:</p> <pre><code>{count:\"myCollection\"}\n</code></pre>"},{"location":"tooling/databases/nosql/#specify-creating-a-collection","title":"Specify creating a collection","text":"<p>To create a collection, use the following syntax:</p> <pre><code>{create:\"myCollection\"}\n</code></pre>"},{"location":"tooling/databases/nosql/#specify-dropping-a-collection","title":"Specify dropping a collection","text":"<p>To drop a collection, use the following syntax:</p> <pre><code>{drop:\"myCollection\"}\n</code></pre>"},{"location":"tooling/databases/nosql/#insert-documents","title":"Insert documents","text":"<p>To insert documents into a collection, use the following syntax:</p> <pre><code>{\n    \"insert\": \"myCollection\",\n    \"documents\": [\n        {\"name\":\"foo\", \"age\": 1},\n        {\"name\":\"bar\", \"age\": 2},\n        {\"name\":\"mix\", \"age\": 3}\n    ]\n}\n</code></pre>"},{"location":"tooling/databases/nosql/#find-documents","title":"Find document(s)","text":"<p>To find document(s) in a collection, use the following syntax:</p> <pre><code>{\n    \"find\": \"myCollection\",\n    \"filter\": {\"name\": {\"$eq\": \"foo\"}}\n}\n</code></pre>"},{"location":"tooling/databases/nosql/#update-documents","title":"Update document(s)","text":"<p>To update document(s) in a collection, use the following syntax:</p> <pre><code>{\n    \"update\": \"myCollection\",\n    \"updates\": [\n        {\n            \"q\": {\"name\": \"foo\"},\n            \"u\": {\"$set\": {\"name\": \"foo2\"}}\n        }\n    ]\n}\n</code></pre>"},{"location":"tooling/databases/nosql/#delete-documents","title":"Delete document(s)","text":"<p>To delete document(s) from a collection, use the following syntax:</p> <pre><code>{\n    \"delete\": \"myCollection\",\n    \"deletes\": [\n        {\n            \"q\": {\"name\": \"foo2\"},\n            \"limit\": 0\n        }\n    ]\n}\n</code></pre>"},{"location":"tooling/databases/nosql/#references","title":"References","text":""},{"location":"tooling/databases/nosql/#list-of-commands","title":"List of Commands","text":"<ul> <li>General</li> <li>Find</li> <li>Update</li> <li>Operators</li> </ul>"},{"location":"tooling/databases/result/","title":"Result View","text":"<p>The \"Result View\" in the Databases perspective is a crucial component that provides a detailed presentation of the output generated by SQL queries executed in the SQL Console. This section provides an overview of the key features and actions available in the \"Result View.\"</p> <p></p>"},{"location":"tooling/databases/result/#viewing-sql-query-results","title":"Viewing SQL Query Results","text":"<ol> <li>Access Result View:</li> <li> <p>Execute SQL queries in the SQL Console, and the results are automatically displayed in the Result View.</p> </li> <li> <p>View Result Set:</p> </li> <li> <p>The Result View presents the result set of your SQL query in a tabular format. Columns and rows provide a structured representation of the data.</p> </li> <li> <p>Interactive Grid:</p> </li> <li> <p>Interact with the result set grid to sort, filter, and navigate through the data. Click on column headers to sort, use the filter option to narrow down results, and scroll through rows.</p> </li> <li> <p>Data Export Options:</p> </li> <li>Export the result set to various formats, including CSV and Excel, using the export options available in the Result View.</li> </ol>"},{"location":"tooling/databases/result/#result-view-actions","title":"Result View Actions","text":""},{"location":"tooling/databases/result/#1-refresh-result-set","title":"1. Refresh Result Set:","text":"<ul> <li>Use the \"Refresh\" button to re-run the last executed query and update the Result View with the latest data.</li> </ul>"},{"location":"tooling/databases/result/#2-copy-data-to-clipboard","title":"2. Copy Data to Clipboard:","text":"<ul> <li>Copy selected cells, rows, or columns to the clipboard for easy data transfer.</li> </ul>"},{"location":"tooling/databases/result/#3-export-data","title":"3. Export Data:","text":"<ul> <li>Export the entire result set or selected data to various file formats, facilitating data sharing and analysis.</li> </ul>"},{"location":"tooling/databases/result/#4-adjust-result-view-preferences","title":"4. Adjust Result View Preferences:","text":"<ul> <li>Configure Result View preferences, such as the number of rows to display, to tailor the display according to your preferences.</li> </ul>"},{"location":"tooling/databases/result/#conclusion","title":"Conclusion","text":"<p>The \"Result View\" in the Databases perspective provides a rich and interactive environment for viewing and manipulating SQL query results. Leverage its features to analyze data, perform data anonymization, and export data for further analysis.</p>"},{"location":"tooling/databases/sql/","title":"SQL Console","text":"<p>The \"SQL Console\" in the Databases perspective provides a versatile environment for executing SQL queries and interacting with your relational and NoSQL databases. This section provides an overview of the key features and actions available in the \"SQL Console.\"</p> <p></p>"},{"location":"tooling/databases/sql/#executing-sql-queries","title":"Executing SQL Queries","text":"<ol> <li>Open the SQL Console:</li> <li> <p>Navigate to the Databases perspective and select \"SQL Console\" view.</p> </li> <li> <p>Execute SQL Queries:</p> </li> <li> <p>Enter your SQL queries in the console editor and execute them by clicking the \"Run\" button or using the keyboard shortcut <code>Ctrl+X</code>. View the results in the \"Result\" output.</p> </li> <li> <p>Explore Query History:</p> </li> <li>The SQL Console maintains a history of executed queries. Access the query history to review and re-run previous queries.</li> </ol>"},{"location":"tooling/databases/sql/#conclusion","title":"Conclusion","text":"<p>The \"SQL Console\" in the Databases perspective provides a flexible and efficient way to execute SQL queries and explore query history. Utilize its features to streamline database interactions and enhance your SQL development workflow.</p>"},{"location":"tooling/databases/transfer/","title":"Data Transfer","text":"<p>The \"Transfer View\" in the codbex platform is a powerful tool that enables online synchronous data transfer between two datasource schemas. This section provides an overview of the key features and actions available in the \"Transfer View.\"</p> <p></p>"},{"location":"tooling/databases/transfer/#initiating-data-transfer","title":"Initiating Data Transfer","text":"<ol> <li>Open the Transfer View:</li> <li> <p>Navigate to the Databases perspective and select \"Transfer\" view.</p> </li> <li> <p>Select Source and Target Datasources:</p> </li> <li> <p>Choose the source and target datasources for the transfer. Specify the schema details for both the source and target databases.</p> </li> <li> <p>Preview Data Transfer:</p> </li> <li> <p>Before executing the transfer, use the preview option to see a sample of the data that will be transferred.</p> </li> <li> <p>Initiate Transfer:</p> </li> <li>Click the \"Transfer\" button to start the online synchronous data transfer process.</li> </ol>"},{"location":"tooling/databases/transfer/#monitoring-transfer-progress","title":"Monitoring Transfer Progress","text":"<ol> <li>Real-time Logs:</li> <li> <p>The Transfer View provides real-time logs that display the progress of the data transfer. Monitor the logs to track the status of each record transferred.</p> </li> <li> <p>Detailed Transfer Report:</p> </li> <li> <p>After the transfer is complete, view a detailed report summarizing the success or failure of the data transfer, including any error messages.</p> </li> <li> <p>Pause and Resume Transfer:</p> </li> <li>Pause and resume the transfer process if needed. This allows you to manage large data transfers efficiently.</li> </ol>"},{"location":"tooling/databases/transfer/#conclusion","title":"Conclusion","text":"<p>The \"Transfer View\" in the platform streamlines the process of online synchronous data transfer between two datasource schemas. Utilize its features to configure, monitor, and manage data transfers efficiently, with real-time logs providing insights into the transfer progress.</p>"},{"location":"tooling/debugger/","title":"Debugger","text":"<p>The \"Debugger\" perspective in the codbex provides a seamless integration with the Chrome DevTools, enabling developers to debug and analyze JavaScript and TypeScript applications running on the codbex runtime. This section covers key features and actions available in the Debugger Perspective.</p> <p></p>"},{"location":"tooling/debugger/#getting-started","title":"Getting Started","text":"<ol> <li>Open the Debugger Perspective:</li> <li> <p>Navigate to the Debugger perspective. This perspective is designed to facilitate efficient debugging and analysis of server-side JavaScript and TypeScript code.</p> </li> <li> <p>Connect to the Runtime:</p> </li> <li>Connect the debugger to the runtime by selecting a server-side JavaScript or TypeScript file in the Projects view.</li> </ol>"},{"location":"tooling/debugger/#features","title":"Features","text":""},{"location":"tooling/debugger/#1-source-code-inspection","title":"1. Source Code Inspection:","text":"<ul> <li>Explore and inspect the source code of your JavaScript and TypeScript applications. View the hierarchy of files and navigate through the codebase effortlessly.</li> </ul>"},{"location":"tooling/debugger/#2-breakpoints","title":"2. Breakpoints:","text":"<ul> <li>Set breakpoints in your code to pause execution at specific lines. This allows you to inspect variables, step through code, and identify issues in your application logic.</li> </ul>"},{"location":"tooling/debugger/#3-step-through-code","title":"3. Step Through Code:","text":"<ul> <li>Use the step-through functionality to execute code line by line. This is invaluable for understanding the flow of your application and identifying the cause of issues.</li> </ul>"},{"location":"tooling/debugger/#4-variable-inspection","title":"4. Variable Inspection:","text":"<ul> <li>Inspect the values of variables at different points in your code. The Debugger Perspective provides a comprehensive view of variable values, making it easier to troubleshoot.</li> </ul>"},{"location":"tooling/debugger/#5-console-integration","title":"5. Console Integration:","text":"<ul> <li>The integrated console allows you to execute JavaScript code directly in the context of your application. This can be useful for quick testing and exploration.</li> </ul>"},{"location":"tooling/debugger/#6-memory-profiling","title":"6. Memory Profiling:","text":"<ul> <li>Utilize memory profiling tools to identify memory leaks and optimize memory usage in your applications. This feature is crucial for improving the overall performance of your code.</li> </ul>"},{"location":"tooling/debugger/#advanced-debugging","title":"Advanced Debugging","text":"<ol> <li>Remote Debugging:</li> <li> <p>Extend the debugging capabilities to remote instances of the codbex runtime. This is particularly useful for debugging applications deployed on different servers.</p> </li> <li> <p>Breakpoint Conditions:</p> </li> <li> <p>Set conditions for breakpoints to control when the debugger should pause execution. This allows for more fine-grained control over the debugging process.</p> </li> <li> <p>Async Function Debugging:</p> </li> <li>Debug asynchronous functions and promises efficiently. The Debugger Perspective supports advanced debugging features for applications that heavily rely on asynchronous programming.</li> </ol>"},{"location":"tooling/debugger/#conclusion","title":"Conclusion","text":"<p>The \"Debugger\" perspective in the codbex platform, based on Chrome DevTools integration, provides a robust environment for debugging and analyzing server-side JavaScript and TypeScript applications. Leverage its features to identify and resolve issues in your code, ensuring the reliability and performance of your applications.</p>"},{"location":"tooling/documents/","title":"Documents","text":"<p>The \"Documents\" perspective in the codbex platform is a dedicated workspace for managing and organizing various types of files and documents related to your projects. This section provides an overview of key features and actions available in the Documents perspective, including support for the CMIS specification for CMS document repositories.</p> <p></p>"},{"location":"tooling/documents/#overview","title":"Overview","text":"<ol> <li>Accessing Documents Perspective:</li> <li> <p>Navigate to the Documents perspective. This perspective serves as a central hub for managing documents, templates, and other project-related assets.</p> </li> <li> <p>Navigation:</p> </li> <li>The Documents perspective provides an organized view of your documents structure. Navigate through folders, and files effortlessly.</li> </ol>"},{"location":"tooling/documents/#1-documents-explorer","title":"1. Documents Explorer:","text":"<p>Explore the hierarchical arrangement of content within the connected CMS repository.</p> <p></p>"},{"location":"tooling/documents/#2-document-preview","title":"2. Document Preview:","text":"<p>Displays a preview of the content of the selected document.</p> <p></p>"},{"location":"tooling/documents/#features","title":"Features","text":""},{"location":"tooling/documents/#1-file-management","title":"1. File Management:","text":"<ul> <li>Create, edit, and organize files within your project. The Documents perspective supports various file types, including templates, and text documents.</li> </ul>"},{"location":"tooling/documents/#2-documents-explorer","title":"2. Documents Explorer:","text":"<ul> <li>Explore the structure of your project using the Documents Explorer. View and manage files and folders conveniently.</li> </ul>"},{"location":"tooling/documents/#4-templates","title":"4. Templates:","text":"<ul> <li>Access and manage project templates. This feature enhances code reusability and accelerates development.</li> </ul>"},{"location":"tooling/documents/#7-search-and-filtering","title":"7. Search and Filtering:","text":"<ul> <li>Utilize search and filtering options to quickly locate specific files or content within your repository.</li> </ul>"},{"location":"tooling/documents/#advanced-document-management","title":"Advanced Document Management","text":"<ol> <li>Document Collaboration:</li> <li> <p>Collaborate with team members by sharing and managing project documents. Support for concurrent editing enhances team productivity.</p> </li> <li> <p>Project Templates:</p> </li> <li> <p>Define and utilize project templates to enforce consistent project structures and configurations.</p> </li> <li> <p>Document Properties:</p> </li> <li>Access and manage properties associated with documents. Set metadata, such as authorship, creation date, and modification history.</li> </ol>"},{"location":"tooling/documents/#cmis-specification-support-for-cms-document-repositories","title":"CMIS Specification Support for CMS Document Repositories","text":"<ol> <li>CMIS Integration:</li> <li> <p>The platform supports the CMIS (Content Management Interoperability Services) specification for seamless integration with CMS document repositories.</p> </li> <li> <p>Connect to CMIS Repositories:</p> </li> <li> <p>Establish connections to CMS document repositories using the CMIS protocol. This enables direct access to and management of documents stored in compatible content management systems.</p> </li> <li> <p>Retrieve and Manipulate Documents:</p> </li> <li> <p>Retrieve documents from CMIS repositories, view metadata, and perform actions such as create, update, and delete directly from the Documents Perspective.</p> </li> <li> <p>Versioning and Collaboration:</p> </li> <li>Leverage CMIS versioning capabilities for document management. Collaborate with team members using standard CMIS features for enhanced content collaboration.</li> </ol>"},{"location":"tooling/documents/#file-upload-and-unpacking","title":"File Upload and Unpacking","text":"<ol> <li>Upload Single Files:</li> <li>Easily upload individual files directly to your project in the Documents perspective. Use the intuitive interface to select files and initiate the upload process.</li> </ol> <ol> <li>Upload ZIP Files:</li> <li> <p>For convenience, upload ZIP files containing multiple documents or an entire project structure. The ZIP upload feature simplifies the process of transferring multiple files at once.</p> </li> <li> <p>Unpack ZIP Files:</p> </li> <li>Opt to unpack ZIP files upon upload. This feature automatically extracts the contents of the ZIP file, maintaining the folder structure within your project.</li> </ol> <p></p> <ol> <li>Efficient Organization:</li> <li>Streamline your document organization workflow by utilizing the upload and unpack features. This is particularly beneficial when transferring entire projects or when dealing with complex folder structures.</li> </ol>"},{"location":"tooling/documents/#conclusion","title":"Conclusion","text":"<p>The \"Documents\" perspective in the codbex platform provides a comprehensive environment for managing project documents, and templates. Navigate through your repository, edit files, and streamline collaboration with team members. With support for the CMIS specification, the platform extends its capabilities to seamlessly integrate with CMS document repositories.</p>"},{"location":"tooling/documents/explorer/","title":"Documents Explorer","text":"<p>The \"Documents\" hierarchical repository structure view provides a visual representation of the hierarchical structure of content within a Content Management System (CMS) repository. This view is designed to facilitate efficient navigation, exploration, and organization of content stored in the CMS.</p>"},{"location":"tooling/documents/explorer/#accessing-the-documents-explorer","title":"Accessing the Documents Explorer","text":"<ol> <li>Navigate to the Documents Perspective:</li> <li> <p>Access the Documents perspective in the platform.</p> </li> <li> <p>Open the Documents Explorer:</p> </li> <li>Within the Documents perspective, locate the \"Documents Explorer\" repository structure view on the left side. This view displays the hierarchical arrangement of content within the connected CMS repository.</li> </ol> <p></p>"},{"location":"tooling/documents/explorer/#features","title":"Features","text":""},{"location":"tooling/documents/explorer/#1-hierarchical-representation","title":"1. Hierarchical Representation:","text":"<ul> <li>The Documents repository structure view presents a hierarchical view of the content stored in the connected CMS repository. This structure reflects the organization of folders, subfolders, and documents.</li> </ul>"},{"location":"tooling/documents/explorer/#2-navigation-and-exploration","title":"2. Navigation and Exploration:","text":"<ul> <li>Navigate through the CMS repository structure effortlessly. Explore folders and subfolders to quickly locate and access specific content.</li> </ul>"},{"location":"tooling/documents/explorer/#3-visual-clarity","title":"3. Visual Clarity:","text":"<ul> <li>Enjoy a visually clear representation of the repository structure, making it easy to understand the relationships between different folders and documents.</li> </ul>"},{"location":"tooling/documents/explorer/#4-contextual-actions","title":"4. Contextual Actions:","text":"<ul> <li>Perform contextual actions directly from the CMS repository structure view. Access options such as opening, editing, deleting, and moving content within the hierarchy.</li> </ul>"},{"location":"tooling/documents/explorer/#5-drag-and-drop-interaction","title":"5. Drag-and-Drop Interaction:","text":"<ul> <li>Organize content intuitively by leveraging drag-and-drop functionality. Rearrange folders and documents within the hierarchy with ease.</li> </ul>"},{"location":"tooling/documents/explorer/#6-expand-and-collapse-nodes","title":"6. Expand and Collapse Nodes:","text":"<ul> <li>Expand or collapse nodes within the hierarchical structure to focus on specific areas of interest. This feature enhances navigation efficiency, especially in repositories with complex structures.</li> </ul>"},{"location":"tooling/documents/explorer/#advanced-functionality","title":"Advanced Functionality","text":"<ol> <li>CMS-Specific Features:</li> <li> <p>Depending on the CMS integration in use (e.g., CMIS-compliant repositories), access CMS-specific features directly from the CMS Repository Structure View. This may include versioning, metadata editing, and more.</p> </li> <li> <p>Search and Filtering:</p> </li> <li>Utilize search and filtering options within the Documents Explorer to quickly locate specific content based on criteria such as file names, document types, or metadata.</li> </ol>"},{"location":"tooling/documents/explorer/#conclusion","title":"Conclusion","text":"<p>The \"Documents Explorer\" hierarchical repository structure view in the codbex platform enhances your content management experience by providing a clear and intuitive representation of the hierarchical structure of a CMS repository. Navigate through folders, explore documents, and perform actions directly from this view to streamline your content management workflows.</p>"},{"location":"tooling/documents/preview/","title":"Document Preview","text":"<p>The \"Document Preview\" view in the platform provides a convenient way to preview the content of documents directly within the integrated development environment. This view enhances your document management experience by allowing you to quickly inspect the contents of various file types without opening external applications.</p>"},{"location":"tooling/documents/preview/#accessing-the-document-preview-view","title":"Accessing the Document Preview View","text":"<ol> <li>Navigate to the Documents Perspective:</li> <li> <p>Access the Documents perspective in the codbex platform.</p> </li> <li> <p>Open the Document Preview View:</p> </li> <li>Within the Documents perspective, locate the \"Document Preview\" view on the right side. This view displays a preview of the content of the selected document.</li> </ol> <p></p>"},{"location":"tooling/documents/preview/#features","title":"Features","text":""},{"location":"tooling/documents/preview/#1-content-preview","title":"1. Content Preview:","text":"<ul> <li>The Document Preview view offers a preview of the content within the selected document. This is particularly useful for quickly reviewing the contents of text-based files, such as source code, scripts, or markdown documents.</li> </ul>"},{"location":"tooling/documents/preview/#2-rich-text-and-markup-support","title":"2. Rich Text and Markup Support:","text":"<ul> <li>Enjoy support for rich text and markup languages. The Document Preview View renders formatted text, allowing you to view the document's structure and styling.</li> </ul>"},{"location":"tooling/documents/preview/#3-multi-format-support","title":"3. Multi-Format Support:","text":"<ul> <li>Preview various file formats, including but not limited to text files, source code files, markdown documents, and other text-based formats. The view dynamically adjusts to the content type.</li> </ul>"},{"location":"tooling/documents/preview/#4-interactive-preview","title":"4. Interactive Preview:","text":"<ul> <li>Interact with the previewed content by scrolling, zooming, and navigating through the document. This provides a comprehensive view of the entire document.</li> </ul>"},{"location":"tooling/documents/preview/#5-code-syntax-highlighting","title":"5. Code Syntax Highlighting:","text":"<ul> <li>For source code files, benefit from syntax highlighting in the preview. This enhances code readability and makes it easier to identify language-specific elements.</li> </ul>"},{"location":"tooling/documents/preview/#advanced-functionality","title":"Advanced Functionality","text":"<ol> <li>Document Metadata Display:</li> <li> <p>Access metadata information associated with the document directly from the Document Preview view. This may include details such as authorship, creation date, and modification history.</p> </li> <li> <p>Integration with CMS Features:</p> </li> <li> <p>Depending on the CMS integration in use (e.g., CMIS-compliant repositories), the Document Preview view may offer integration with CMS-specific features. This could include versioning, metadata editing, and more.</p> </li> <li> <p>Quick Navigation to Editor:</p> </li> <li>Conveniently transition from the Document Preview view to the document's editor for advanced editing and modification. This seamless integration streamlines your workflow.</li> </ol>"},{"location":"tooling/documents/preview/#conclusion","title":"Conclusion","text":"<p>The \"Document Preview\" view the codbex platform enhances your document management experience by providing a quick and interactive preview of document content. Whether reviewing source code, reading text documents, or inspecting markdown files, this view offers a convenient way to explore document contents directly within the IDE.</p>"},{"location":"tooling/git/","title":"Git","text":"<p>Welcome to the Git perspective in the codbex platform, your dedicated workspace for efficient version control and collaboration. This index provides an overview of key views and functionalities available in the Git perspective.</p> <p></p>"},{"location":"tooling/git/#1-git-projects","title":"1. Git Projects","text":"<p>The \"Git Projects\" view is your gateway to managing Git repositories. Clone, create, and explore repositories, view branches, tags, and remotes, and perform various Git operations.</p>"},{"location":"tooling/git/#2-local-branches","title":"2. Local Branches","text":"<p>The \"Local Branches\" view allows you to manage and interact with local branches in your Git projects. Create, switch, rename, and delete local branches, and compare changes between branches.</p> <p></p>"},{"location":"tooling/git/#3-remote-branches","title":"3. Remote Branches","text":"<p>The \"Remote Branches\" view centralizes the management of remote branches in your Git projects. Fetch updates from remotes, create local branches based on remotes, and compare changes with remote branches.</p>"},{"location":"tooling/git/#4-history","title":"4. History","text":"<p>The \"History\" view provides a chronological list of commits made in your Git repository. Analyze commit details, compare changes, and navigate through the evolution of your codebase.</p> <p></p>"},{"location":"tooling/git/#6-staging","title":"6. Staging","text":"<p>The \"Staging\" view streamlines the process of staging and committing changes. Stage, unstage, and discard changes, view diffs, and commit changes with ease.</p> <p></p>"},{"location":"tooling/git/#7-diff-editor","title":"7. Diff Editor","text":"<p>The \"Diff Editor\" in the Git perspective provides a comprehensive and user-friendly way to visualize and analyze changes in your codebase. </p> <p>Explore these views and functionalities to enhance your Git workflow in the platform.</p> <p></p>"},{"location":"tooling/git/diff-editor/","title":"Diff Editor","text":"<p>The \"Diff Editor\" in the Git perspective provides a powerful and intuitive interface for visualizing and comparing changes between different versions of your files. This section provides an overview of the key features and actions available in the \"Diff Editor\".</p> <p></p>"},{"location":"tooling/git/diff-editor/#navigating-the-diff-editor","title":"Navigating the Diff Editor","text":"<ol> <li>Open the Diff Editor:</li> <li> <p>To open the Diff Editor, navigate to the Git perspective, select a file in the \"Staging\" views, and choose \"Show Differences\".</p> </li> <li> <p>Visualize Changes:</p> </li> <li> <p>The Diff Editor displays a side-by-side or inline comparison of the selected file, highlighting added, modified, and deleted lines.</p> </li> <li> <p>Inline Comments:</p> </li> <li> <p>Add comments directly in the Diff Editor to provide feedback or discuss changes with collaborators.</p> </li> <li> <p>Navigate Between Changes:</p> </li> <li> <p>Use navigation buttons to move between different changes and focus on specific modifications in the file.</p> </li> <li> <p>Toggle Changes Highlighting:</p> </li> <li>Toggle highlighting of changes to quickly identify modifications in the code.</li> </ol>"},{"location":"tooling/git/diff-editor/#actions-in-the-diff-editor","title":"Actions in the Diff Editor","text":""},{"location":"tooling/git/diff-editor/#1-save-changes","title":"1. Save Changes:","text":"<ul> <li>Save changes made in the Diff Editor by clicking the \"Save\" button.</li> </ul>"},{"location":"tooling/git/diff-editor/#2-revert-changes","title":"2. Revert Changes:","text":"<ul> <li>Revert changes to the original state by clicking the \"Revert\" button.</li> </ul>"},{"location":"tooling/git/diff-editor/#3-open-in-external-compare-tool","title":"3. Open in External Compare Tool:","text":"<ul> <li>Open the file in an external compare tool for a more detailed and customized comparison.</li> </ul>"},{"location":"tooling/git/diff-editor/#4-close-diff-editor","title":"4. Close Diff Editor:","text":"<ul> <li>Close the Diff Editor when you've finished reviewing or making changes by clicking the \"Close\" button.</li> </ul>"},{"location":"tooling/git/diff-editor/#5-switch-between-files","title":"5. Switch Between Files:","text":"<ul> <li>If comparing multiple files, switch between them using the file dropdown menu in the Diff Editor toolbar.</li> </ul>"},{"location":"tooling/git/diff-editor/#conclusion","title":"Conclusion","text":"<p>The \"Diff Editor\" in the Git perspective provides a comprehensive and user-friendly way to visualize and analyze changes in your codebase. Whether reviewing modifications between revisions or branches, the Diff Editor enhances your understanding of the code evolution.</p>"},{"location":"tooling/git/git-projects/","title":"Git Projects","text":"<p>The \"Git Projects\" view in the Git perspective provides a centralized interface for managing Git repositories. This view allows you to perform essential Git operations such as cloning, pulling, pushing, and sharing projects. Below is an overview of key features and actions available in the \"Git Projects\" view.</p> <p></p>"},{"location":"tooling/git/git-projects/#cloning-a-git-repository","title":"Cloning a Git Repository","text":"<ol> <li>Open the Git Projects View:</li> <li> <p>To open the Git Projects view, switch to the Git perspective by selecting it from the perspective switcher.</p> </li> <li> <p>Click on \"Clone a Git Repository\":</p> </li> <li> <p>In the Git Projects view, click on the \"Clone a Git Repository\" button in the toolbar.</p> </li> <li> <p>Enter Repository URL:</p> </li> <li> <p>Provide the URL of the Git repository you want to clone.</p> </li> <li> <p>Configure Clone Options:</p> </li> <li> <p>Configure additional cloning options such as credentials and branch.</p> </li> <li> <p>Click \"Clone\":</p> </li> <li>Click the \"Clone\" button to initiate the cloning process.</li> </ol>"},{"location":"tooling/git/git-projects/#pulling-changes-from-a-remote-repository","title":"Pulling Changes from a Remote Repository","text":"<ol> <li>Select the Project:</li> <li> <p>In the Git Projects view, select the project for which you want to pull changes.</p> </li> <li> <p>Click on \"Pull\":</p> </li> <li> <p>Click the \"Pull\" button in the toolbar to fetch and merge changes from the remote repository.</p> </li> <li> <p>Choose Pull Options:</p> </li> <li> <p>Choose pull options such as the remote branch and merge strategy.</p> </li> <li> <p>Click \"Finish\":</p> </li> <li>Click the \"Finish\" button to complete the pull operation.</li> </ol>"},{"location":"tooling/git/git-projects/#pushing-changes-to-a-remote-repository","title":"Pushing Changes to a Remote Repository","text":"<ol> <li>Select the Project:</li> <li> <p>In the Git Projects view, select the project for which you want to push changes.</p> </li> <li> <p>Click on \"Push\":</p> </li> <li> <p>Click the \"Push\" button in the toolbar to push local changes to the remote repository.</p> </li> <li> <p>Configure Push Options:</p> </li> <li> <p>Configure push options such as the remote branch.</p> </li> <li> <p>Click \"Finish\":</p> </li> <li>Click the \"Finish\" button to complete the push operation.</li> </ol>"},{"location":"tooling/git/git-projects/#sharing-a-project-as-a-git-repository","title":"Sharing a Project as a Git Repository","text":"<ol> <li>Select the Project:</li> <li> <p>In the Git Projects view, select the project you want to share as a Git repository.</p> </li> <li> <p>Click on \"Share\":</p> </li> <li> <p>Click the \"Share\" button in the toolbar.</p> </li> <li> <p>Choose Git:</p> </li> <li> <p>Choose \"Git\" as the repository type and click \"Next\".</p> </li> <li> <p>Configure Repository:</p> </li> <li>Configure the repository details and click \"Finish\" to share the project as a Git repository.</li> </ol>"},{"location":"tooling/git/git-projects/#additional-actions","title":"Additional Actions","text":"<ul> <li> <p>Refresh: Use the \"Refresh\" button to refresh the Git Projects view and see the latest repository status.</p> </li> <li> <p>Repository Properties: View additional Git repository structure and properties.</p> </li> </ul> <p>Explore the \"Git Projects\" view to seamlessly manage your Git repositories within the codbex environment.</p>"},{"location":"tooling/git/history/","title":"Git History","text":"<p>The \"History\" view in the Git perspective provides a detailed and interactive visualization of your Git repository's commit history. This section provides an overview of the key features and actions available in the \"History\" view.</p> <p></p>"},{"location":"tooling/git/history/#exploring-git-history","title":"Exploring Git History","text":"<ol> <li>Open the Git History View:</li> <li> <p>To open the Git History view, navigate to the Git perspective and select \"History\".</p> </li> <li> <p>Visualize Commit History:</p> </li> <li> <p>The Git History view displays a tabular representation of your Git repository's commit history, showing branches, merges, and commits.</p> </li> <li> <p>Interactive Graph:</p> </li> <li> <p>Interact with the table to explore commit details, branches, and the flow of changes over time.</p> </li> <li> <p>Detailed Commit Information:</p> </li> <li> <p>Click on a commit row in the table to view detailed information, including the commit message, author, timestamp, and changes made.</p> </li> <li> <p>Filter by Author, Date, or Branch:</p> </li> <li>Use the available filters to narrow down the commit history based on the author's name, date range, or specific branches.</li> </ol>"},{"location":"tooling/git/history/#actions-in-the-git-history-view","title":"Actions in the Git History View","text":""},{"location":"tooling/git/history/#1-refresh-git-history","title":"1. Refresh Git History:","text":"<ul> <li>Use the \"Refresh\" button in the Git History toolbar to update the visual representation of the commit history.</li> </ul>"},{"location":"tooling/git/history/#conclusion","title":"Conclusion","text":"<p>The \"History\" view in the Git perspective provides an intuitive and tabular representation of your Git repository's commit history. Explore the interactive table, use filters, and leverage the available actions to gain insights into the evolution of your codebase.</p>"},{"location":"tooling/git/local-branches/","title":"Local Branches","text":"<p>The \"Local Branches\" view in the Git perspective provides a centralized location to manage and interact with local branches in your Git projects. This section provides an overview of the key features and actions available in the \"Local Branches\" view.</p> <p></p>"},{"location":"tooling/git/local-branches/#managing-local-branches","title":"Managing Local Branches","text":"<ol> <li>Open the Local Branches View:</li> <li> <p>To open the Local Branches view, navigate to the Git perspective and select \"Local Branches\" from the Git toolbar.</p> </li> <li> <p>View Existing Local Branches:</p> </li> <li> <p>The Local Branches view displays a list of existing local branches in your Git repository.</p> </li> <li> <p>Create a New Local Branch:</p> </li> <li> <p>Create a new local branch by clicking on the \"Create Branch\" (\"+\") button in the toolbar.</p> </li> <li> <p>Switch Between Local Branches:</p> </li> <li> <p>Switch between existing local branches by selecting on the desired branch in the Local Branches view.</p> </li> <li> <p>Delete Local Branch:</p> </li> <li>Remove unnecessary local branches by clicking on the button \"Delete Branch\".</li> </ol>"},{"location":"tooling/git/local-branches/#actions-in-the-local-branches-view","title":"Actions in the Local Branches View","text":""},{"location":"tooling/git/local-branches/#1-refresh-branch-list","title":"1. Refresh Branch List:","text":"<ul> <li>Use the \"Refresh\" button in the Local Branches toolbar to update the list of local branches.</li> </ul>"},{"location":"tooling/git/local-branches/#2-search-and-filter","title":"2. Search and Filter:","text":"<ul> <li>Utilize the search and filter options to quickly locate specific local branches in the view.</li> </ul>"},{"location":"tooling/git/local-branches/#3-create-and-checkout-new-branch","title":"3. Create and Checkout New Branch:","text":"<ul> <li>Click the \"Create Branch\" button to create a new branch and switch to it in one step.</li> </ul>"},{"location":"tooling/git/local-branches/#conclusion","title":"Conclusion","text":"<p>The \"Local Branches\" view in the Git perspective provides a convenient way to manage and interact with local branches in your Git projects. Familiarize yourself with the available actions and branch management features to streamline your Git workflow.</p>"},{"location":"tooling/git/remote-branches/","title":"Remote Branches","text":"<p>The \"Remote Branches\" view in the Git perspective provides a centralized location to manage and interact with remote branches in your Git projects. This section provides an overview of the key features and actions available in the \"Remote Branches\" view.</p> <p></p>"},{"location":"tooling/git/remote-branches/#managing-remote-branches","title":"Managing Remote Branches","text":"<ol> <li>Open the Remote Branches View:</li> <li> <p>To open the Remote Branches view, navigate to the Git perspective and select \"Remote Branches\".</p> </li> <li> <p>View Existing Remote Branches:</p> </li> <li> <p>The Remote Branches view displays a list of existing remote branches in your Git repository.</p> </li> <li> <p>Fetch Remote Branches:</p> </li> <li> <p>Click on the project in the Git Projects, to retrieve updates from remote repositories and update the list of remote branches.</p> </li> <li> <p>Create a New Local Branch from Remote:</p> </li> <li> <p>Create a new local branch based on a remote branch by clicking on the remote branch.</p> </li> <li> <p>Delete Remote Branch:</p> </li> <li>Remove unnecessary remote branches by clicking on the branch and then selecting \"Delete Branch\" button.</li> </ol>"},{"location":"tooling/git/remote-branches/#actions-in-the-remote-branches-view","title":"Actions in the Remote Branches View","text":""},{"location":"tooling/git/remote-branches/#1-refresh-branch-list","title":"1. Refresh Branch List:","text":"<ul> <li>Use the \"Refresh\" button in the Remote Branches toolbar to update the list of remote branches.</li> </ul>"},{"location":"tooling/git/remote-branches/#2-search-and-filter","title":"2. Search and Filter:","text":"<ul> <li>Utilize the search and filter options to quickly locate specific remote branches in the view.</li> </ul>"},{"location":"tooling/git/remote-branches/#conclusion","title":"Conclusion","text":"<p>The \"Remote Branches\" view in the Git perspective provides a convenient way to manage and interact with remote branches in your Git projects. Familiarize yourself with the available actions and remote branch management features to enhance your Git workflow.</p>"},{"location":"tooling/git/staging/","title":"Git Staging","text":"<p>The \"Staging\" view in the Git perspective provides a centralized location to stage and commit changes to your Git repository. This section provides an overview of the key features and actions available in the \"Staging\" view.</p> <p></p>"},{"location":"tooling/git/staging/#staging-changes","title":"Staging Changes","text":"<ol> <li>Open the Git Staging View:</li> <li> <p>To open the Git Staging view, navigate to the Git perspective and select \"Staging\" tab.</p> </li> <li> <p>View Unstaged and Staged Changes:</p> </li> <li> <p>The Git Staging view displays a list of changes in your working directory categorized as \"Unstaged Changes\" and \"Staged Changes\".</p> </li> <li> <p>Stage Changes:</p> </li> <li> <p>Stage specific changes for commit by selecting them and clicking the \"Add to Index\" button.</p> </li> <li> <p>Unstage Changes:</p> </li> <li> <p>Unstage changes that were previously staged by selecting them and clicking the \"Remove from Index\" button.</p> </li> <li> <p>View Diffs:</p> </li> <li>View the differences between the working directory, staged changes, and the last commit by selecting files and clicking the \"Show Difference\" button.</li> </ol>"},{"location":"tooling/git/staging/#actions-in-the-git-staging-view","title":"Actions in the Git Staging View","text":""},{"location":"tooling/git/staging/#1-refresh-staging-area","title":"1. Refresh Staging Area:","text":"<ul> <li>Use the \"Refresh\" button in the Git Staging toolbar to update the list of changes and their staging status.</li> </ul>"},{"location":"tooling/git/staging/#2-commit-staged-changes","title":"2. Commit Staged Changes:","text":"<ul> <li>Commit the staged changes by entering a commit message and clicking the \"Commit\" button in the Git Staging toolbar.</li> </ul>"},{"location":"tooling/git/staging/#3-push-committed-changes","title":"3. Push Committed Changes:","text":"<ul> <li>Push the committed changes by clicking the \"Push\" button in the Git Staging toolbar.</li> </ul>"},{"location":"tooling/git/staging/#4-commit-and-push-staged-changes","title":"4. Commit and Push Staged Changes:","text":"<ul> <li>Commit and Push the staged changes by entering a commit message and clicking the \"Commit &amp; Push\" button in the Git Staging toolbar.</li> </ul>"},{"location":"tooling/git/staging/#5-revert-to-last-commit","title":"5. Revert to Last Commit:","text":"<ul> <li>Use the \"Revert to Last Commit\" button in the Git Staging toolbar to revert to the state of the last commit.</li> </ul>"},{"location":"tooling/git/staging/#conclusion","title":"Conclusion","text":"<p>The \"Staging\" view in the Git perspective provides a streamlined workflow for staging and committing changes to your Git repository. Familiarize yourself with the available actions and staging features to efficiently manage your version control.</p>"},{"location":"tooling/integrations/","title":"Integrations","text":""},{"location":"tooling/integrations/#overview","title":"Overview","text":"<p>The Integrations Editor in the platform, powered by Apache Karavan, provides a visual environment for modeling integration flows. This powerful tool enables developers to design, configure, and manage integration processes seamlessly. The underlying Apache Camel-based Integration Engine processes the defined flows, facilitating the creation of robust and scalable integration solutions.</p> <p></p>"},{"location":"tooling/integrations/#key-features","title":"Key Features","text":""},{"location":"tooling/integrations/#1-visual-modeling","title":"1. Visual Modeling","text":"<ul> <li>The editor offers a visual modeling interface, allowing developers to design integration flows using a drag-and-drop approach. This visual representation enhances understanding and collaboration among team members. Routes Modeller tool allows users to design, configure, and deploy ETL (Extract, Transform, Load) routes using a visual interface. The Routes Modeller enables users to define data integration workflows, specify data sources and destinations, and configure data transformation and routing rules. Users can visually map data fields, apply business logic, and define error handling strategies within their ETL routes.</li> </ul>"},{"location":"tooling/integrations/#2-apache-camel-integration-engine","title":"2. Apache Camel Integration Engine","text":"<ul> <li>Integration flows modeled in the editor are processed by the built-in Apache Camel Integration Engine. Apache Camel provides a powerful and extensible framework for implementing Enterprise Integration Patterns (EIP), ensuring reliable and efficient integration execution. The integration engine supports a wide range of integration patterns, protocols, and data formats, enabling seamless communication and data exchange between disparate systems, applications, and services. Users can leverage Camel's extensive library of components and connectors to integrate with various data sources, APIs, databases, and cloud services.</li> </ul>"},{"location":"tooling/integrations/#3-component-palette","title":"3. Component Palette","text":"<ul> <li>A rich component palette is available, featuring a variety of pre-built connectors, processors, and endpoints. These components simplify the integration process by providing ready-made building blocks for common integration tasks. These connectors cover a wide range of technologies and platforms, including databases (SQL, NoSQL), enterprise applications (ERP, CRM), cloud services (AWS, Azure, Google Cloud), messaging systems (MQ, Kafka), file formats (CSV, XML), and web services (REST, SOAP). Users can easily configure and deploy these connectors to streamline data integration and migration tasks.</li> </ul>"},{"location":"tooling/integrations/#4-data-transformation-and-enrichment","title":"4. Data Transformation and Enrichment","text":"<ul> <li>The editor supports data transformation and enrichment through the use of Camel's Data Format and Content Enricher components. Developers can define how data is transformed and enriched as it flows through the integration process.</li> </ul>"},{"location":"tooling/integrations/#5-error-handling","title":"5. Error Handling","text":"<ul> <li>Robust error handling capabilities are integrated into the editor. Developers can define error handling strategies, such as redelivery policies and error queues, to ensure the reliability of integration processes.</li> </ul>"},{"location":"tooling/integrations/#6-integration-testing","title":"6. Integration Testing","text":"<ul> <li>The Integrations Editor facilitates integration testing by providing tools to simulate and test integration flows within the development environment. This ensures that integration processes behave as expected before deployment.</li> </ul>"},{"location":"tooling/integrations/#7-comprehensive-admin-user-interface","title":"7. Comprehensive Admin User Interface","text":"<ul> <li>The platform provides a comprehensive administrative user interface for managing ETL routes, connectors, data transformations, and integration workflows. The admin interface offers intuitive tools for configuring route parameters, monitoring route performance, troubleshooting integration issues, and managing data flows. Administrators can monitor data throughput, latency, and error rates, and take proactive actions to optimize ETL processes and ensure data quality and integrity.</li> </ul>"},{"location":"tooling/integrations/#workflow","title":"Workflow","text":"<ol> <li>Flow Design:</li> <li> <p>Developers use the visual modeling interface to design integration flows, dragging and dropping components from the palette onto the canvas.</p> </li> <li> <p>Configuration:</p> </li> <li> <p>Each component in the flow is configured through a user-friendly interface. Developers set parameters, define data transformation rules, and specify endpoint details.</p> </li> <li> <p>Apache Camel Processing:</p> </li> <li> <p>Once the integration flow is defined, it is processed by the Apache Camel Integration Engine. Camel executes the flow according to the specified configuration.</p> </li> <li> <p>Monitoring and Debugging:</p> </li> <li>The editor provides tools for monitoring and debugging integration flows. Developers can inspect message exchanges, view log outputs, and identify issues in real-time.</li> </ol>"},{"location":"tooling/integrations/#benefits","title":"Benefits","text":"<ul> <li>Accelerated Development:</li> <li> <p>The visual modeling approach accelerates development by simplifying the creation of complex integration flows.</p> </li> <li> <p>Reuse of Components:</p> </li> <li> <p>The component palette promotes the reuse of pre-built connectors and processors, reducing development effort and ensuring consistency.</p> </li> <li> <p>Scalability:</p> </li> <li> <p>Apache Camel's inherent scalability ensures that integration processes can handle varying workloads and scale horizontally.</p> </li> <li> <p>Reliability:</p> </li> <li> <p>Robust error handling features enhance the reliability of integration processes, ensuring smooth operation in production environments.</p> </li> <li> <p>Extensibility:</p> </li> <li>Developers can extend the functionality of integration flows by leveraging the wide range of Camel components and incorporating custom components as needed.</li> </ul>"},{"location":"tooling/integrations/#conclusion","title":"Conclusion","text":"<p>The Integrations Editor based on Apache Karavan is a powerful tool for designing and managing integration flows within the platform. By leveraging the capabilities of the Apache Camel Integration Engine, developers can create scalable, reliable, and extensible integration solutions seamlessly.</p>"},{"location":"tooling/modeling/","title":"Modeling","text":""},{"location":"tooling/modeling/#model-driven-architecture-mda-and-model-driven-development-mdd","title":"Model-Driven Architecture (MDA) and Model-Driven Development (MDD)","text":""},{"location":"tooling/modeling/#definition","title":"Definition","text":"<p>Model-Driven Architecture (MDA) is a software design and development approach that focuses on creating and utilizing models to represent different aspects of a system. It is an initiative by the Object Management Group (OMG) to promote a standardized way of developing software systems using models as primary artifacts.</p>"},{"location":"tooling/modeling/#key-features","title":"Key Features","text":"<ul> <li>Entity Data Modeler: codbex provides a powerful Entity Data Modeler tool that allows users to visually design data models for their applications. Users can define entities, attributes, relationships, and constraints using an intuitive graphical interface. The Entity Data Modeler simplifies the process of designing and managing complex data structures, enabling developers to focus on higher-level application logic.</li> </ul> <ul> <li>Form Designer in the codbex platform, users have access to a versatile and user-friendly solution for crafting input forms. This empowers them to effortlessly create visually captivating and functionally robust forms tailored to their applications. Whether they're developing straightforward data entry forms or intricate multi-step workflows, the Form Designer equips users with the necessary tools and functionalities to build engaging and intuitive interfaces suitable for various business scenarios.</li> </ul> <ul> <li> <p>Generation and Application Templates: codbex offers built-in generation capabilities and a library of application templates to accelerate development. Users can generate application code, including database schema, backend logic, and frontend components, based on predefined templates and configurations. This reduces the time and effort required to build new applications, ensuring consistency and quality across projects.</p> </li> <li> <p>Predefined Reference and Master Data Modules: The codbex platform includes a repository of predefined reference and master data modules that cover common business domains and industries. These modules contain standard data structures, rules, and workflows that can be easily integrated into applications. By leveraging these predefined modules, developers can expedite development and ensure compliance with industry standards and best practices.</p> </li> <li> <p>Application Building Blocks Modules: codbex provides a library of reusable application building blocks, such as authentication, authorization, user management, and reporting modules. These building blocks encapsulate common functionality and business logic, allowing developers to quickly assemble custom applications from pre-existing components. This modular approach promotes code reuse, simplifies maintenance, and accelerates time-to-market for new applications.</p> </li> </ul>"},{"location":"tooling/modeling/#key-concepts","title":"Key Concepts","text":"<ol> <li>Platform-Independent Model (PIM):</li> <li> <p>A PIM represents the system's functionality independently of any specific technology or platform. It is a high-level abstraction that captures the essential aspects of the system.</p> </li> <li> <p>Platform-Specific Model (PSM):</p> </li> <li> <p>A PSM represents the system's functionality in terms of a specific technology or platform. It serves as a bridge between the high-level abstraction of the PIM and the concrete implementation details.</p> </li> <li> <p>Transformation:</p> </li> <li> <p>Transformation processes are used to convert models from a higher abstraction level (PIM) to a lower one (PSM). This process involves applying rules and templates to generate code or artifacts for a particular platform.</p> </li> <li> <p>Code Generation:</p> </li> <li> <p>Automated code generation is a key aspect of MDA. It involves transforming models into executable code for a specific technology stack. This can significantly reduce the manual coding effort and improve consistency.</p> </li> <li> <p>Reusability:</p> </li> <li>MDA encourages the reuse of models and transformations across projects, promoting consistency and efficiency in software development.</li> </ol>"},{"location":"tooling/modeling/#benefits","title":"Benefits","text":"<ul> <li>Efficiency:</li> <li> <p>EDM accelerates the development process by providing a visual and centralized way to design the data model.</p> </li> <li> <p>Consistency:</p> </li> <li> <p>Models and generated code remain consistent, reducing the likelihood of errors caused by manual changes.</p> </li> <li> <p>Adaptability:</p> </li> <li> <p>Developers can adapt the generated code to meet specific project requirements while leveraging predefined templates.</p> </li> <li> <p>Collaboration:</p> </li> <li>Teams can collaborate more effectively by working with a common visual representation of the data model.</li> </ul> <p>In conclusion, the Entity Data Modeler within the Model-Driven Architecture framework empowers developers to design robust data models visually and efficiently generate code based on those models. This approach enhances consistency, maintainability, and collaboration in software development projects.</p>"},{"location":"tooling/modeling/edm/","title":"Entity Data Modeler (EDM)","text":""},{"location":"tooling/modeling/edm/#overview","title":"Overview","text":"<p>The Entity Data Modeler (EDM) is a component within the MDA framework that focuses on designing the data model of an application. It allows developers to graphically create, visualize, and modify domain objects (entities) and their relationships.</p> <p></p>"},{"location":"tooling/modeling/edm/#key-features","title":"Key Features","text":"<ol> <li>Graphical Modeling:</li> <li> <p>EDM provides a visual environment for creating domain objects and defining their attributes. Developers can design the data model by dragging and dropping entities, specifying properties, and establishing relationships.</p> </li> <li> <p>Properties for Various Aspects:</p> </li> <li> <p>Developers can assign properties to entities for different purposes, such as defining database-related settings (e.g., table names, constraints), user interface attributes, security configurations, and other relevant metadata.</p> </li> <li> <p>Relationships and Dependencies:</p> </li> <li> <p>EDM allows users to model relationships between entities, specifying associations, cardinalities, and dependencies. This ensures a clear representation of how different parts of the system are connected.</p> </li> <li> <p>Code Generation Templates:</p> </li> <li> <p>Predefined templates and rules for code generation are associated with the EDM. These templates guide the transformation process, automatically generating code based on the graphical models created by developers.</p> </li> <li> <p>Consistency and Maintainability:</p> </li> <li> <p>By centralizing the data model in a visual environment, EDM promotes consistency and maintainability. Changes made to the model are reflected in the generated code, reducing the chances of inconsistencies.</p> </li> <li> <p>Template Customization:</p> </li> <li>Advanced users can customize code generation templates to tailor the generated code to specific project requirements. This flexibility allows developers to adapt the generated artifacts to the unique needs of their applications.</li> </ol>"},{"location":"tooling/modeling/form/","title":"Form Designer","text":"<p>The codbex platform provides a powerful Form Designer tool that empowers users to create interactive and user-friendly input forms effortlessly. With a rich set of user interface widgets and intuitive design capabilities, the Form Designer simplifies the process of modeling and customizing input forms for various business applications.</p> <p></p>"},{"location":"tooling/modeling/form/#key-features","title":"Key Features","text":"<ol> <li> <p>Visual Modeling: The Form Designer offers a visual interface for designing input forms, allowing users to drag and drop UI widgets onto the canvas and arrange them as needed. Users can easily add text fields, dropdown lists, checkboxes, radio buttons, date pickers, and other input controls to create customized forms tailored to their specific requirements.</p> </li> <li> <p>Rich Set of Widgets: codbex platform provides a comprehensive library of UI widgets and components that users can use to build dynamic and interactive input forms. These widgets include standard form controls such as text inputs, buttons, labels, and containers, as well as advanced components like file uploaders, image galleries, rich text editors, and charting libraries. Users can choose from a variety of widgets to enhance the functionality and usability of their forms.</p> </li> <li> <p>Customizable Templates: Form Designer offers customizable templates and themes that users can leverage to quickly create professional-looking input forms with consistent branding and styling. Users can choose from a selection of pre-designed templates or create their own custom templates to match their organization's branding guidelines and design preferences.</p> </li> <li> <p>Data Binding and Validation: The Form Designer supports data binding and validation features, allowing users to bind form fields to data models and define validation rules to ensure data integrity and accuracy. Users can specify required fields, input formats, and validation constraints to enforce data validation rules and provide real-time feedback to users when input errors occur.</p> </li> <li> <p>Responsive Design: Form Designer enables users to create responsive input forms that adapt seamlessly to different screen sizes and devices. Users can define layout configurations, breakpoints, and responsive behaviors to optimize the form's appearance and usability across desktops, tablets, and mobile devices.</p> </li> </ol>"},{"location":"tooling/operations/","title":"Operations","text":"<p>The Operations perspective provides tools and views for inspecting and managing the runtime aspects of deployed application content in the system registry. It offers insights into various operational aspects such as published application content, configurations, loggers, extension points, extensions, deployed artefacts, and their state.</p>"},{"location":"tooling/operations/#views-and-functionality","title":"Views and Functionality","text":""},{"location":"tooling/operations/#1-published-application-content","title":"1. Published Application Content","text":"<p>The Registry view displays a list of currently published application content in the system registry. It provides information about the published content name, version, deployment status, and other relevant details. Users can inspect the published content and perform operations such as starting, stopping, or redeploying applications.</p>"},{"location":"tooling/operations/#2-configurations","title":"2. Configurations","text":"<p>The Configurations view allows users to view and manage configurations for deployed application content. It provides a centralized location to inspect configuration settings, properties, and values. Users can modify configurations as needed and apply changes to the runtime environment.</p>"},{"location":"tooling/operations/#3-loggers-configurations","title":"3. Loggers Configurations","text":"<p>The Loggers Configurations view enables users to manage logging configurations for deployed application content. It allows users to specify logging levels, appenders, and other logging settings for different loggers within the application. Users can dynamically adjust logging configurations to control the verbosity and output of log messages.</p>"},{"location":"tooling/operations/#4-extension-points-and-extensions","title":"4. Extension Points and Extensions","text":"<p>The Extension Points and Extensions view provides insights into the extension points defined in the system and their associated extensions. Users can explore available extension points, view registered extensions, and manage extension configurations. This view facilitates extensibility and customization of the system by allowing users to add or remove extensions as needed.</p>"},{"location":"tooling/operations/#5-deployed-artefacts-and-state","title":"5. Deployed Artefacts and State","text":"<p>The Deployed Artefacts and State view offers visibility into the artefacts deployed in the system and their current state. It lists deployed artefacts such as tables, views, jobs, listeners, templates, configurations, and other resources, along with their deployment status and health indicators. Users can monitor the status of deployed artefacts and take corrective actions if needed.</p>"},{"location":"tooling/operations/#benefits","title":"Benefits","text":"<ul> <li> <p>Visibility: Provides a comprehensive overview of the operational aspects of deployed application content and configurations.</p> </li> <li> <p>Control: Enables users to inspect, manage, and control various runtime aspects of the system, such as logging configurations and deployed artefacts.</p> </li> <li> <p>Troubleshooting: Facilitates troubleshooting and diagnostics by offering insights into the state and health of deployed application content and artefacts.</p> </li> </ul>"},{"location":"tooling/operations/#conclusion","title":"Conclusion","text":"<p>The Operations perspective serves as a central hub for monitoring and managing the runtime aspects of deployed application content in the system registry. It empowers users to maintain system health, optimize performance, and ensure smooth operation of the platform.</p>"},{"location":"tooling/processes/","title":"Processes Workspace","text":"<p>The Processes Workspace perspective in the codbex platform a comprehensive set of tools for designing, managing, and monitoring BPMN (Business Process Model and Notation) based runtime processes. This perspective brings together various views and features to streamline the entire lifecycle of business processes within the platform.</p>"},{"location":"tooling/processes/#key-features","title":"Key Features","text":"<ul> <li> <p>BPMN Modeller: codbex provides a powerful BPMN Modeller tool that enables users to design, visualize, and simulate business processes using the BPMN (Business Process Model and Notation) standard. The BPMN Modeller offers a user-friendly interface for creating process diagrams, defining activities, events, gateways, and transitions, and specifying process logic and data flows.</p> </li> <li> <p>Built-in Process Engine: The codbex platform includes a robust and scalable process engine that executes BPMN workflows and orchestrates business processes in real-time. The built-in process engine supports advanced process execution features such as parallel execution, event-based triggers, task assignments, timers, and error handling. It ensures reliable and consistent execution of business processes across the organization.</p> </li> <li> <p>Process Inbox: codbex offers a dedicated process inbox interface for users to manage their assigned tasks and process activities. The process inbox provides a centralized view of pending tasks, notifications, deadlines, and priority items, allowing users to efficiently prioritize, execute, and track their work items. Users can access the process inbox from any device or platform, ensuring seamless task management and collaboration.</p> </li> <li> <p>Comprehensive Admin User Interface: codbex provides a comprehensive administrative user interface for managing process definitions, instances, process context, history, and other BPM-related artifacts. The admin interface offers advanced capabilities for configuring process parameters, monitoring process performance, analyzing process data, and optimizing process workflows. Administrators can customize dashboards, reports, and alerts to meet their specific monitoring and analysis requirements.</p> </li> </ul>"},{"location":"tooling/processes/#1-process-definitions","title":"1. Process Definitions","text":"<p>The Process Definitions View provides an organized listing of BPMN process definitions, allowing users to explore and manage the overall structure of their business processes.</p>"},{"location":"tooling/processes/#2-process-instances","title":"2. Process Instances","text":"<p>The Process Instances View offers insights into individual instances of BPMN processes, including details such as instance ID, start time, and current status.</p>"},{"location":"tooling/processes/#3-process-context","title":"3. Process Context","text":"<p>The Process Context View allows users to inspect and manage the contextual data associated with active BPMN process instances. This includes variables, data objects, and other relevant information.</p>"},{"location":"tooling/processes/#4-process-viewer","title":"4. Process Viewer","text":"<p>The Process Viewer is a graphical tool based on the Oryx Editor project, providing a visual representation of BPMN process definitions and instances. It highlights the current step of the process for better understanding.</p>"},{"location":"tooling/processes/#5-process-inbox","title":"5. Process Inbox","text":"<p>The Process Inbox centralizes user tasks from various BPMN processes, offering efficient task management, prioritization, and status tracking.</p>"},{"location":"tooling/processes/#6-dead-letter-jobs","title":"6. Dead-Letter Jobs","text":"<p>The Dead-Letter Jobs View provides insights into failed or unprocessed jobs, allowing users to investigate and resolve issues impacting BPMN processes.</p>"},{"location":"tooling/processes/#7-bpmn-modeler","title":"7. BPMN Modeler","text":"<p>The BPMN Modeler is a feature-rich tool based on the Oryx Editor project, enabling the creation, editing, and visualization of BPMN diagrams. It seamlessly integrates with the codbex platform and supports real-time collaboration.</p> <p>The Processes Workspace perspective in the codbex platform consolidates a suite of tools and views for effective BPMN process management. Whether designing process definitions, monitoring instances, or collaborating on user tasks, this perspective enhances the overall BPMN experience within the platform.</p>"},{"location":"tooling/processes/context/","title":"Process Context","text":"<p>The \"Processes Workspace\" perspective in the platform provides a dedicated environment for managing and monitoring BPMN (Business Process Model and Notation) based runtime processes. This perspective offers tools to visualize, analyze, and control business processes efficiently. This section covers the \"Process Context\" view, a key component that allows users to inspect and manage the contextual data associated with individual BPMN process instances.</p>"},{"location":"tooling/processes/context/#accessing-the-processes-workspace-perspective","title":"Accessing the Processes Workspace Perspective","text":"<ol> <li>Navigate to the Processes Workspace Perspective:</li> <li> <p>Access the Processes Workspace Perspective in the platform.</p> </li> <li> <p>Open the Process Context View:</p> </li> <li>Within the Processes Workspace Perspective, open the \"Process Context\" view. This view displays the contextual data associated with active BPMN process instances.</li> </ol>"},{"location":"tooling/processes/context/#process-context-view","title":"Process Context View","text":""},{"location":"tooling/processes/context/#1-instance-context-information","title":"1. Instance Context Information:","text":"<ul> <li>The Process Context view provides detailed information about the context of each active BPMN process instance. This includes variables, data objects, and other contextual information associated with the running instance.</li> </ul>"},{"location":"tooling/processes/context/#2-variable-listing","title":"2. Variable Listing:","text":"<ul> <li>View a list of variables and their current values within the selected process instance. This information is crucial for understanding the state and progression of the process.</li> </ul>"},{"location":"tooling/processes/context/#3-data-object-inspection","title":"3. Data Object Inspection:","text":"<ul> <li>Inspect data objects associated with the process instance. The view allows users to explore the content and structure of data objects, aiding in debugging and analysis.</li> </ul>"},{"location":"tooling/processes/context/#4-contextual-metadata","title":"4. Contextual Metadata:","text":"<ul> <li>Access metadata information related to the context of a process instance. This may include details such as the creation time, author, and other relevant information.</li> </ul>"},{"location":"tooling/processes/context/#advanced-functionality","title":"Advanced Functionality","text":"<ol> <li>Context Modification:</li> <li> <p>Modify variables and data objects within the context of a running process instance. This functionality enables users to update and manipulate contextual data during the execution of a process.</p> </li> <li> <p>Real-time Context Updates:</p> </li> <li> <p>Experience real-time updates to the process context view as variables and data objects change during the execution of the BPMN process. This feature provides a dynamic and interactive view of the process state.</p> </li> <li> <p>Integration with BPMN Editor:</p> </li> <li>Seamlessly transition from the Process Context view to an integrated BPMN editor for direct editing and modification of BPMN process definitions based on the observed context.</li> </ol>"},{"location":"tooling/processes/context/#conclusion","title":"Conclusion","text":"<p>The \"Processes Workspace\" perspective in the platform, with the \"Process Context\" view, offers a powerful toolset for inspecting and managing the contextual data associated with active BPMN process instances. Whether analyzing variables, inspecting data objects, or modifying the context in real-time, this view enhances the understanding and control of process execution.</p>"},{"location":"tooling/processes/dead-letter-jobs/","title":"Dead-Letter Jobs","text":"<p>The \"Processes Workspace\" perspective in the platform provides a dedicated environment for managing and monitoring BPMN (Business Process Model and Notation) based runtime processes. This section focuses on the \"Dead-Letter Jobs\" view, a tool designed for handling and managing jobs that have encountered errors and are in a \"dead-letter\" state.</p>"},{"location":"tooling/processes/dead-letter-jobs/#accessing-the-processes-workspace-perspective","title":"Accessing the Processes Workspace Perspective","text":"<ol> <li>Navigate to the Processes Workspace Perspective:</li> <li> <p>Access the Processes Workspace Perspective in the platform.</p> </li> <li> <p>Open the Dead-Letter Jobs View:</p> </li> <li>Within the Processes Workspace perspective, open the \"Dead-Letter Jobs\" view. This view displays jobs that have encountered errors and are currently in a \"dead-letter\" state.</li> </ol>"},{"location":"tooling/processes/dead-letter-jobs/#dead-letter-jobs-view","title":"Dead-Letter Jobs View","text":""},{"location":"tooling/processes/dead-letter-jobs/#1-job-listing","title":"1. Job Listing:","text":"<ul> <li>The Dead-Letter Jobs view provides a list of jobs that have encountered errors during execution. Each entry includes details such as job ID, process instance ID, error message, and relevant metadata.</li> </ul>"},{"location":"tooling/processes/dead-letter-jobs/#2-error-details","title":"2. Error Details:","text":"<ul> <li>Access detailed information about the errors encountered by each job. This includes error messages, stack traces, and other information to aid in diagnosing and resolving the issues.</li> </ul>"},{"location":"tooling/processes/dead-letter-jobs/#3-job-resubmission","title":"3. Job Resubmission:","text":"<ul> <li>The Dead-Letter Jobs view allows users to resubmit dead-letter jobs for re-execution. This functionality is useful for addressing errors and allowing the affected jobs to proceed through the BPMN process.</li> </ul>"},{"location":"tooling/processes/dead-letter-jobs/#4-job-status-tracking","title":"4. Job Status Tracking:","text":"<ul> <li>Track the status of each dead-letter job within the view. Visual indicators help users quickly identify pending, completed, or failed job resubmissions.</li> </ul>"},{"location":"tooling/processes/dead-letter-jobs/#advanced-functionality","title":"Advanced Functionality","text":"<ol> <li>Integration with BPMN Editor:</li> <li> <p>Seamlessly transition from the Dead-Letter Jobs view to an integrated BPMN editor for direct editing and modification of BPMN process definitions related to the encountered errors.</p> </li> <li> <p>Real-time Updates:</p> </li> <li> <p>Experience real-time updates to the Dead-Letter Jobs view as dead-letter jobs are resubmitted and progress through different steps of the associated BPMN processes. This feature provides a dynamic and interactive view of job recovery.</p> </li> <li> <p>Error Analysis and Resolution:</p> </li> <li>Utilize the information provided in the Dead-Letter Jobs view for detailed analysis and resolution of encountered errors. Access logs, stack traces, and related data to diagnose and fix issues.</li> </ol>"},{"location":"tooling/processes/dead-letter-jobs/#conclusion","title":"Conclusion","text":"<p>The \"Processes Workspace\" perspective in the codbex platform, with the \"Dead-Letter Jobs\" view, offers a specialized tool for handling and managing jobs that have encountered errors during execution. Whether resubmitting jobs, tracking status, or analyzing errors, this view streamlines the process of recovering from dead-letter states.</p>"},{"location":"tooling/processes/definitions/","title":"Process Definitions","text":"<p>The \"Processes Workspace\" perspective in the codbex platform offers a dedicated environment for managing and monitoring BPMN (Business Process Model and Notation) based runtime processes. This perspective provides a set of tools to visualize, analyze, and control business processes efficiently. This section covers the \"Process Definitions\" view, a key component of the Processes Workspace perspective.</p>"},{"location":"tooling/processes/definitions/#accessing-the-processes-workspace-perspective","title":"Accessing the Processes Workspace Perspective","text":"<ol> <li>Navigate to the Processes Workspace Perspective:</li> <li> <p>Access the Processes Workspace perspective in the platform.</p> </li> <li> <p>Open the Process Definitions View:</p> </li> <li>Within the Processes Workspace Perspective, open the \"Process Definitions\" view. This view displays a list of available BPMN process definitions.</li> </ol>"},{"location":"tooling/processes/definitions/#features","title":"Features","text":""},{"location":"tooling/processes/definitions/#1-process-definition-listing","title":"1. Process Definition Listing:","text":"<ul> <li>The Process Definitions View presents a list of available BPMN process definitions within the connected runtime environment. Each entry includes details such as process name, version, and key identifiers.</li> </ul>"},{"location":"tooling/processes/definitions/#2-version-management","title":"2. Version Management:","text":"<ul> <li>Easily manage different versions of BPMN process definitions. The view allows users to track, compare, and analyze changes between various versions of a process.</li> </ul>"},{"location":"tooling/processes/definitions/#3-visual-representation","title":"3. Visual Representation:","text":"<ul> <li>Gain insights into the structure of BPMN process definitions through visual representations. The view may include BPMN diagrams or graphical representations of process flows.</li> </ul>"},{"location":"tooling/processes/definitions/#4-process-details","title":"4. Process Details:","text":"<ul> <li>Access detailed information about each process definition, including its key, version, author, and relevant metadata. This information aids in understanding the characteristics and history of a process.</li> </ul>"},{"location":"tooling/processes/definitions/#5-process-versioning","title":"5. Process Versioning:","text":"<ul> <li>Navigate between different versions of a process definition. The view provides tools for selecting and exploring specific versions of a process.</li> </ul>"},{"location":"tooling/processes/definitions/#advanced-functionality","title":"Advanced Functionality","text":"<ol> <li>Integrated BPMN Editor:</li> <li> <p>Seamlessly transition from the Process Definitions View to an integrated BPMN editor for detailed editing and modification of process definitions.</p> </li> <li> <p>Process Metrics and Analytics:</p> </li> <li> <p>Access real-time metrics and analytics related to each process definition. Monitor key performance indicators (KPIs) and other relevant data to assess process efficiency.</p> </li> <li> <p>Process Deployment:</p> </li> <li>Deploy and manage the deployment of BPMN process definitions to the runtime environment directly from the Processes Workspace Perspective.</li> </ol>"},{"location":"tooling/processes/definitions/#conclusion","title":"Conclusion","text":"<p>The \"Processes Workspace\" perspective in the platform, with the \"Process Definitions\" view, provides a comprehensive toolset for managing BPMN-based runtime processes. Whether exploring process details, analyzing versions, or deploying changes, this perspective streamlines BPMN process management workflows.</p>"},{"location":"tooling/processes/inbox/","title":"Process Inbox","text":"<p>The \"Processes Workspace\" perspective in the codbex platform provides a dedicated environment for managing and monitoring BPMN (Business Process Model and Notation) based runtime processes. This section focuses on the \"Process Inbox\", a tool designed for managing user tasks within BPMN processes.</p>"},{"location":"tooling/processes/inbox/#accessing-the-processes-workspace-perspective","title":"Accessing the Processes Workspace Perspective","text":"<ol> <li>Navigate to the Processes Workspace Perspective:</li> <li> <p>Access the Processes Workspace Perspective in the platform.</p> </li> <li> <p>Open the Process Inbox:</p> </li> <li>Within the Processes Workspace perspective, open the \"Process Inbox\". This tool centralizes user tasks from various BPMN processes for efficient task management.</li> </ol>"},{"location":"tooling/processes/inbox/#process-inbox_1","title":"Process Inbox","text":""},{"location":"tooling/processes/inbox/#1-task-listing","title":"1. Task Listing:","text":"<ul> <li>The Process Inbox displays a list of user tasks associated with BPMN processes. Each entry includes task details such as task name, description, assigned user, and due date.</li> </ul>"},{"location":"tooling/processes/inbox/#2-task-prioritization","title":"2. Task Prioritization:","text":"<ul> <li>Prioritize tasks based on urgency or importance. The Process Inbox allows users to categorize and sort tasks to ensure that critical activities are addressed promptly.</li> </ul>"},{"location":"tooling/processes/inbox/#3-task-status-tracking","title":"3. Task Status Tracking:","text":"<ul> <li>Track the status of each user task within the Process Inbox. Visual indicators help users quickly identify pending, completed, or overdue tasks.</li> </ul>"},{"location":"tooling/processes/inbox/#4-task-details","title":"4. Task Details:","text":"<ul> <li>Access detailed information about each user task, including task instructions, associated process instance, and relevant metadata. This information aids in understanding the context and requirements of each task.</li> </ul>"},{"location":"tooling/processes/inbox/#advanced-functionality","title":"Advanced Functionality","text":"<ol> <li>Task Assignment and Reassignment:</li> <li> <p>Assign user tasks to specific individuals or teams directly from the Process Inbox. Users can also reassign tasks based on workload or expertise.</p> </li> <li> <p>Integration with BPMN Editor:</p> </li> <li> <p>Seamlessly transition from the Process Inbox to an integrated BPMN editor for direct editing and modification of BPMN process definitions related to specific user tasks.</p> </li> <li> <p>Real-time Task Updates:</p> </li> <li>Experience real-time updates to the Process Inbox as user tasks progress through different steps of associated BPMN processes. This feature provides a dynamic and interactive view of task completion.</li> </ol>"},{"location":"tooling/processes/inbox/#conclusion","title":"Conclusion","text":"<p>The \"Processes Workspace\" perspective in the platform, with the \"Process Inbox,\" centralizes user tasks for efficient management within BPMN processes. Whether prioritizing tasks, tracking status, or reassigning assignments, this tool streamlines the user task management process.</p>"},{"location":"tooling/processes/instances/","title":"Process Instances","text":"<p>Continuing with the \"Processes Workspace\" perspective in the codbex platform, the \"Process Instances\" view offers insights into the runtime execution of BPMN (Business Process Model and Notation) processes. This view provides real-time monitoring tools to track and analyze active process instances. Let's explore the key features of the \"Process Instances\" view.</p>"},{"location":"tooling/processes/instances/#accessing-the-processes-workspace-perspective","title":"Accessing the Processes Workspace Perspective","text":"<ol> <li>Navigate to the Processes Workspace Perspective:</li> <li> <p>Access the Processes Workspace Perspective in the platform.</p> </li> <li> <p>Open the Process Instances View:</p> </li> <li>Within the Processes Workspace Perspective, open the \"Process Instances\" view. This view displays a list of currently active BPMN process instances.</li> </ol>"},{"location":"tooling/processes/instances/#features","title":"Features","text":""},{"location":"tooling/processes/instances/#1-real-time-process-instance-monitoring","title":"1. Real-Time Process Instance Monitoring:","text":"<ul> <li>The Process Instances View provides a real-time overview of active BPMN process instances. Track the progress, status, and key details of each running instance.</li> </ul>"},{"location":"tooling/processes/instances/#2-instance-status-indicators","title":"2. Instance Status Indicators:","text":"<ul> <li>Each process instance entry is accompanied by status indicators, providing quick insights into whether the instance is running, completed, or in an error state.</li> </ul>"},{"location":"tooling/processes/instances/#3-process-instance-details","title":"3. Process Instance Details:","text":"<ul> <li>Access detailed information about each process instance, including instance ID, start time, end time (if completed), and relevant metadata. This information aids in understanding the lifecycle of each instance.</li> </ul>"},{"location":"tooling/processes/instances/#4-user-and-system-task-tracking","title":"4. User and System Task Tracking:","text":"<ul> <li>Monitor user and system tasks associated with each process instance. Track the progression of tasks and identify any bottlenecks or delays in the process flow.</li> </ul>"},{"location":"tooling/processes/instances/#5-instance-filtering-and-sorting","title":"5. Instance Filtering and Sorting:","text":"<ul> <li>Utilize filtering and sorting options to focus on specific subsets of process instances. Filter by process definition, status, or other criteria to streamline monitoring.</li> </ul>"},{"location":"tooling/processes/instances/#retry-functionality","title":"Retry Functionality","text":""},{"location":"tooling/processes/instances/#1-retry-process-instances","title":"1. Retry Process Instances:","text":"<ul> <li>The \"Retry\" functionality allows users to initiate a retry for a failed or terminated process instance. This is particularly useful for addressing issues or errors encountered during the initial execution.</li> </ul>"},{"location":"tooling/processes/instances/#2-configurable-retry-options","title":"2. Configurable Retry Options:","text":"<ul> <li>Users can configure retry options, including the number of retry attempts, delay between retries, and other relevant parameters. This flexibility enhances the control over the retry process.</li> </ul>"},{"location":"tooling/processes/instances/#3-monitoring-retried-instances","title":"3. Monitoring Retried Instances:","text":"<ul> <li>Track and monitor instances that have undergone the retry process. Gain insights into the success or failure of retried instances, facilitating continuous improvement in process execution.</li> </ul>"},{"location":"tooling/processes/instances/#skip-functionality","title":"Skip Functionality","text":""},{"location":"tooling/processes/instances/#1-skip-process-instances","title":"1. Skip Process Instances:","text":"<ul> <li>The \"Skip\" functionality allows users to skip specific tasks or steps within a running process instance. This is useful for bypassing errors or addressing situations where manual intervention is not required.</li> </ul>"},{"location":"tooling/processes/instances/#2-selective-skipping","title":"2. Selective Skipping:","text":"<ul> <li>Users can selectively choose which tasks or steps to skip within a process instance. This fine-grained control ensures that only the necessary elements are skipped, preserving the integrity of the process.</li> </ul>"},{"location":"tooling/processes/instances/#3-audit-trail-for-skipped-steps","title":"3. Audit Trail for Skipped Steps:","text":"<ul> <li>Maintain an audit trail for skipped steps, documenting the decisions and actions taken during the skipping process. This information aids in transparency and accountability.</li> </ul>"},{"location":"tooling/processes/instances/#advanced-functionality","title":"Advanced Functionality","text":"<ol> <li>Interactive Process Instance Visualization:</li> <li> <p>Visualize the flow and status of a specific process instance through an integrated BPMN diagram. This provides a graphical representation of the active process.</p> </li> <li> <p>Task Details and Interaction:</p> </li> <li> <p>Drill down into the details of individual tasks within a process instance. View task details, such as assignees and due dates, and interact with tasks directly from the Process Instances View.</p> </li> <li> <p>Instance Termination and Suspension:</p> </li> <li>Take control of process instances by suspending or terminating them directly from the view. This allows for proactive management and intervention in case of issues or changes in requirements.</li> </ol>"},{"location":"tooling/processes/instances/#conclusion","title":"Conclusion","text":"<p>The \"Process Instances\" view in the platform enhances the monitoring capabilities of BPMN-based processes by providing real-time insights into active instances. Whether tracking instance status, analyzing task progression, or interacting with running instances, this view empowers users to manage and optimize process execution.</p>"},{"location":"tooling/processes/modeler/","title":"BPMN Modeler","text":"<p>The BPMN Modeler in the codbex platform is a powerful visual tool based on the Oryx Editor project, used for creating, editing, and visualizing BPMN (Business Process Model and Notation) diagrams. This modeler is seamlessly integrated into the platform, providing a collaborative environment for designing business processes.</p> <p></p>"},{"location":"tooling/processes/modeler/#features","title":"Features","text":""},{"location":"tooling/processes/modeler/#1-intuitive-drag-and-drop-interface","title":"1. Intuitive Drag-and-Drop Interface:","text":"<ul> <li>The BPMN Modeler offers an intuitive drag-and-drop interface, allowing users to easily add and arrange BPMN elements on the canvas. This simplicity enhances the modeling experience for both beginners and experienced users.</li> </ul>"},{"location":"tooling/processes/modeler/#2-comprehensive-bpmn-element-palette","title":"2. Comprehensive BPMN Element Palette:","text":"<ul> <li>Access a comprehensive palette of BPMN elements, including tasks, gateways, events, and connectors. The BPMN Modeler supports the full BPMN 2.0 specification, ensuring that users can accurately represent their business processes.</li> </ul>"},{"location":"tooling/processes/modeler/#3-interactive-canvas","title":"3. Interactive Canvas:","text":"<ul> <li>Interact with the BPMN diagram canvas to create and modify process flows. The interactive canvas supports zooming, panning, and alignment tools for precise control over the diagram layout.</li> </ul>"},{"location":"tooling/processes/modeler/#4-real-time-collaboration","title":"4. Real-time Collaboration:","text":"<ul> <li>Leverage the real-time collaboration features of the BPMN Modeler. Multiple users can work on the same BPMN diagram simultaneously, enabling collaborative modeling sessions.</li> </ul>"},{"location":"tooling/processes/modeler/#5-version-control-integration","title":"5. Version Control Integration:","text":"<ul> <li>Seamlessly integrate with version control systems to manage revisions and track changes to BPMN diagrams. This integration enhances traceability and supports collaborative development practices.</li> </ul>"},{"location":"tooling/processes/modeler/#6-validation-and-error-highlighting","title":"6. Validation and Error Highlighting:","text":"<ul> <li>Benefit from built-in validation checks that highlight errors or inconsistencies in the BPMN diagram. The BPMN Modeler provides instant feedback to users, ensuring that diagrams adhere to BPMN standards.</li> </ul>"},{"location":"tooling/processes/modeler/#7-export-and-import-functionality","title":"7. Export and Import Functionality:","text":"<ul> <li>Export BPMN diagrams in standard BPMN XML format for compatibility with other tools and platforms. Import existing BPMN files into the BPMN Modeler to continue modeling or analyzing processes.</li> </ul>"},{"location":"tooling/processes/modeler/#8-integration-with-platform-features","title":"8. Integration with Platform Features:","text":"<ul> <li>Seamlessly integrate the BPMN Modeler with other platform features. For example, transition from modeling to process deployment or view real-time process metrics directly within the platform.</li> </ul>"},{"location":"tooling/processes/modeler/#advanced-functionality","title":"Advanced Functionality","text":"<ol> <li>Execution Simulation:</li> <li> <p>Simulate the execution of BPMN processes directly within the BPMN Modeler. This feature provides insights into process behavior and allows users to identify potential bottlenecks or issues.</p> </li> <li> <p>Flowable Integration:</p> </li> <li> <p>The BPMN Modeler is based on the Oryx Editor project and is compatible with the Flowable BPM platform. This ensures consistency and interoperability between the modeling tool and the execution runtime.</p> </li> <li> <p>Custom Extensions and Plugins:</p> </li> <li>Extend the functionality of the BPMN Modeler by developing custom extensions or plugins. This extensibility allows organizations to tailor the modeling experience to their specific requirements.</li> </ol>"},{"location":"tooling/processes/modeler/#getting-started","title":"Getting Started","text":"<p>To start using the BPMN Modeler in the platform, follow these steps:</p> <ol> <li>Navigate to the BPMN Modeler:</li> <li> <p>Access the BPMN Modeler within the platform. The modeler is available within the BPMN-related perspectives and views.</p> </li> <li> <p>Create or Open a BPMN Diagram:</p> </li> <li> <p>Create a new BPMN diagram or open an existing one. Use the intuitive interface to design and refine the process flow.</p> </li> <li> <p>Collaborate and Validate:</p> </li> <li> <p>Collaborate with team members in real-time and validate the BPMN diagram using built-in error checking features. Ensure that the diagram adheres to BPMN standards and best practices.</p> </li> <li> <p>Save and Deploy:</p> </li> <li>Save the BPMN diagram in BPMN XML format and deploy it to the execution runtime, such as the Flowable BPM platform, for execution.</li> </ol>"},{"location":"tooling/processes/modeler/#conclusion","title":"Conclusion","text":"<p>The BPMN Modeler in the codbex platform, based on the Oryx Editor project and integrated with Flowable, provides a robust and user-friendly environment for BPMN modeling. Whether designing new processes, collaborating with team members, or simulating process execution, this modeler streamlines the BPMN lifecycle within the platform.</p>"},{"location":"tooling/processes/viewer/","title":"Process Viewer","text":"<p>The \"Processes Workspace\" perspective in the codbex platform provides a dedicated environment for managing and monitoring BPMN (Business Process Model and Notation) based runtime processes. This perspective offers tools to visualize, analyze, and control business processes efficiently. This section covers the \"Process Viewer\", an essential component that allows users to graphically view BPMN process definitions and instances, highlighting the current step of the process.</p>"},{"location":"tooling/processes/viewer/#accessing-the-processes-workspace-perspective","title":"Accessing the Processes Workspace Perspective","text":"<ol> <li>Navigate to the Processes Workspace Perspective:</li> <li> <p>Access the Processes Workspace Perspective in the platform.</p> </li> <li> <p>Open the Process Viewer:</p> </li> <li>Within the Processes Workspace perspective, open the \"Process Viewer\". This graphical representation provides an overview of BPMN process definitions and instances.</li> </ol>"},{"location":"tooling/processes/viewer/#process-viewer_1","title":"Process Viewer","text":""},{"location":"tooling/processes/viewer/#1-graphical-representation-of-process-definitions","title":"1. Graphical Representation of Process Definitions:","text":"<ul> <li>The Process Viewer displays BPMN process definitions graphically, allowing users to visualize the structure and flow of each defined process. This representation includes elements such as tasks, gateways, events, and connections.</li> </ul>"},{"location":"tooling/processes/viewer/#2-dynamic-highlighting-of-current-step","title":"2. Dynamic Highlighting of Current Step:","text":"<ul> <li>Experience dynamic highlighting of the current step or active node within running BPMN process instances. This feature provides real-time visibility into the progress of each instance.</li> </ul>"},{"location":"tooling/processes/viewer/#3-process-instance-overview","title":"3. Process Instance Overview:","text":"<ul> <li>View a comprehensive overview of all active BPMN process instances. Each instance is represented graphically, allowing users to quickly identify the stage of execution and the active tasks within the process.</li> </ul>"},{"location":"tooling/processes/viewer/#4-detailed-process-information","title":"4. Detailed Process Information:","text":"<ul> <li>Access detailed information about each process definition, including key identifiers, version information, and contextual metadata. This information is valuable for understanding the characteristics of each defined process.</li> </ul>"},{"location":"tooling/processes/viewer/#advanced-functionality","title":"Advanced Functionality","text":"<ol> <li>Interactive Process Exploration:</li> <li> <p>Interact with the Process Viewer to explore different aspects of BPMN process definitions and instances. Zoom in, zoom out, and pan through the graphical representation for a detailed view.</p> </li> <li> <p>Integration with Process Instances View:</p> </li> <li> <p>Seamlessly transition between the Process Viewer and the Process Instances View for a holistic understanding of both process definitions and active instances. This integration enhances the monitoring capabilities.</p> </li> <li> <p>Real-time Updates:</p> </li> <li>Experience real-time updates to the graphical representation as process instances progress. Dynamic updates ensure that the displayed information accurately reflects the current state of each instance.</li> </ol>"},{"location":"tooling/processes/viewer/#conclusion","title":"Conclusion","text":"<p>The \"Processes Workspace\" perspective in the platform, with the \"Process Viewer\", provides a powerful tool for graphically visualizing BPMN process definitions and instances. Whether exploring process structures, monitoring active instances, or dynamically highlighting the progress of execution, this feature enhances the overall understanding and control of business processes.</p>"},{"location":"tooling/terminal/","title":"Terminal","text":"<p>The \"Terminal\" perspective in the codbex platform provides a powerful command-line interface (CLI) experience within the integrated development environment. Powered by the xterm.js terminal emulator, this perspective allows developers to interact with the system, execute commands, and perform various tasks through a command-line interface.</p>"},{"location":"tooling/terminal/#accessing-the-terminal-perspective","title":"Accessing the Terminal Perspective","text":"<ol> <li>Navigate to the Terminal Perspective:</li> <li> <p>Access the Terminal Perspective in the platform.</p> </li> <li> <p>Open the Terminal Emulator:</p> </li> <li>Within the Terminal perspective, launch the terminal emulator. This provides a fully functional command-line interface for interacting with the system.</li> </ol>"},{"location":"tooling/terminal/#features","title":"Features","text":""},{"location":"tooling/terminal/#1-interactive-command-line","title":"1. Interactive Command Line:","text":"<ul> <li>The Terminal perspective offers an interactive command-line interface powered by the xterm.js terminal emulator. Execute commands, navigate directories, and perform various tasks using the familiar command-line syntax.</li> </ul>"},{"location":"tooling/terminal/#2-xtermjs-emulator","title":"2. xterm.js Emulator:","text":"<ul> <li>Benefit from the capabilities of the xterm.js terminal emulator, providing a feature-rich and extensible terminal experience. Enjoy support for terminal styling, colors, and interactive input/output.</li> </ul>"},{"location":"tooling/terminal/#3-command-execution","title":"3. Command Execution:","text":"<ul> <li>Execute system commands directly from the terminal. The Terminal perspective allows developers to perform tasks such as file manipulation, script execution, and system configuration through the command line.</li> </ul>"},{"location":"tooling/terminal/#4-scripting-support","title":"4. Scripting Support:","text":"<ul> <li>Leverage scripting capabilities within the terminal. Write and execute shell scripts, batch commands, or any other supported scripting languages directly from the command line.</li> </ul>"},{"location":"tooling/terminal/#advanced-functionality","title":"Advanced Functionality","text":"<ol> <li>Customization and Theming:</li> <li> <p>Customize the appearance and behavior of the xterm.js terminal emulator. Adjust themes, fonts, and colors to suit your preferences for an optimized developer experience.</p> </li> <li> <p>Integration with System Commands:</p> </li> <li> <p>Integrate the terminal with system commands and utilities. Access system resources, view logs, and interact with the underlying platform seamlessly.</p> </li> <li> <p>Clipboard Integration:</p> </li> <li>Effortlessly copy and paste content between the terminal and other parts of the IDE. The xterm.js terminal emulator supports clipboard integration for enhanced productivity.</li> </ol>"},{"location":"tooling/terminal/#conclusion","title":"Conclusion","text":"<p>The \"Terminal\" erspective in the platform, powered by the xterm.js terminal emulator, brings the flexibility and power of the command line directly to the integrated development environment. Whether executing system commands, running scripts, or managing terminal sessions, this perspective provides a robust CLI experience for developers.</p>"},{"location":"tooling/workbench/","title":"Workbench","text":"<p>Welcome to the \"Workbench\", your central hub for developing and managing projects, artifacts, and processes. This index provides an overview of key views and functionalities available in the Workbench.</p> <p></p>"},{"location":"tooling/workbench/#1-projects","title":"1. Projects","text":"<p>The \"Projects\" area is where you manage your development projects. Create, import, and organize projects to structure your work efficiently.</p> <p></p>"},{"location":"tooling/workbench/#2-import","title":"2. Import","text":"<p>The \"Import\" area allows you to bring external projects and artifacts into your development environment. Import local file systems, or other platform instances.</p> <p></p>"},{"location":"tooling/workbench/#3-search","title":"3. Search","text":"<p>Efficiently locate projects and files within the Workbench using the \"Search\" feature. Search for specific content, projects, or artifacts with advanced filtering options.</p> <p></p>"},{"location":"tooling/workbench/#4-properties","title":"4. Properties","text":"<p>Explore the properties of projects and artifacts using the \"Properties\" area. Customize settings such as project nature, dependencies, and validation rules.</p> <p></p>"},{"location":"tooling/workbench/#5-console","title":"5. Console","text":"<p>The \"Console\" view provides real-time feedback, logs, and outputs from various processes, scripts, and debugging activities. Access scripting, debug, and build consoles for streamlined development.</p> <p></p>"},{"location":"tooling/workbench/#6-code-editor","title":"6. Code Editor","text":"<p>Powered by the Monaco editor, the \"Code Editor\" provides a feature-rich environment for writing, editing, and managing your code. Enjoy syntax highlighting, code completion, and integrated terminal support.</p> <p></p>"},{"location":"tooling/workbench/#7-preview","title":"7. Preview","text":"<p>The \"Preview\" view allows you to preview and interact with various document types, including HTML, Markdown, and more. Toggle views, zoom in/out, and utilize other features for a comprehensive preview experience.</p>"},{"location":"tooling/workbench/#8-logs","title":"8. Logs","text":"<p>The \"Logs\" view centralizes logs generated by scripts, system events, and debugging activities. Clear, filter, and analyze logs to streamline troubleshooting and monitoring.</p>"},{"location":"tooling/workbench/#9-loggers","title":"9. Loggers","text":"<p>The \"Loggers\" view enables you to configure and manage logging levels for different components and modules. Add, remove, and reset loggers to control the logging behavior of your application.</p> <p>Explore these views and functionalities to enhance your development experience.</p>"},{"location":"tooling/workbench/code-editor/","title":"Code Editor","text":"<p>The \"Code Editor\" in the \"Workbench\" is powered by the \"Monaco\" editor, which is the same editor used in \"Visual Studio Code\" (VSCode). This powerful and feature-rich editor provides a comfortable environment for writing, editing, and managing your code. This section provides an overview of the key features and actions available in the \"Code Editor\".</p> <p></p>"},{"location":"tooling/workbench/code-editor/#key-features","title":"Key Features","text":""},{"location":"tooling/workbench/code-editor/#1-syntax-highlighting","title":"1. Syntax Highlighting","text":"<ul> <li>The Code Editor provides syntax highlighting for various programming languages, making it easy to visually distinguish between different code elements.</li> </ul>"},{"location":"tooling/workbench/code-editor/#2-code-completion","title":"2. Code Completion","text":"<ul> <li>Enjoy intelligent code completion suggestions as you type, helping you write code more efficiently and accurately.</li> </ul>"},{"location":"tooling/workbench/code-editor/#3-code-navigation","title":"3. Code Navigation","text":"<ul> <li>Navigate through your code effortlessly with features like Go to Definition, Find References, and more.</li> </ul>"},{"location":"tooling/workbench/code-editor/#4-code-folding","title":"4. Code Folding","text":"<ul> <li>Collapse and expand code sections to focus on specific parts of your code and improve readability.</li> </ul>"},{"location":"tooling/workbench/code-editor/#5-code-formatting","title":"5. Code Formatting","text":"<ul> <li>Use automatic code formatting or format selected code to adhere to coding standards.</li> </ul>"},{"location":"tooling/workbench/code-editor/#6-multiple-tabs","title":"6. Multiple Tabs","text":"<ul> <li>Open multiple files simultaneously with tabs, allowing you to switch between files seamlessly.</li> </ul>"},{"location":"tooling/workbench/code-editor/#7-themes-and-color-schemes","title":"7. Themes and Color Schemes","text":"<ul> <li>Customize the appearance of the Code Editor with various themes and color schemes.</li> </ul>"},{"location":"tooling/workbench/code-editor/#actions-in-the-code-editor","title":"Actions in the Code Editor","text":""},{"location":"tooling/workbench/code-editor/#1-save-changes","title":"1. Save Changes","text":"<ul> <li>Save your code changes by clicking the \"Save\" button or using the keyboard shortcut (\"Ctrl + S\" or \"Cmd + S\").</li> </ul>"},{"location":"tooling/workbench/code-editor/#2-undo-and-redo","title":"2. Undo and Redo","text":"<ul> <li>Undo or redo your actions with the \"Undo\" and \"Redo\" buttons or keyboard shortcuts (\"Ctrl + Z\" or \"Cmd + Z\", \"Ctrl + Y\" or \"Cmd + Y\").</li> </ul>"},{"location":"tooling/workbench/code-editor/#3-find-and-replace","title":"3. Find and Replace","text":"<ul> <li>Use the \"Find\" and \"Replace\" functionalities to search for specific text and replace it with ease.</li> </ul>"},{"location":"tooling/workbench/code-editor/#4-toggle-word-wrap","title":"4. Toggle Word Wrap","text":"<ul> <li>Toggle word wrap to control how long lines of code are displayed in the editor.</li> </ul>"},{"location":"tooling/workbench/code-editor/#5-zoom-in-and-out","title":"5. Zoom In and Out","text":"<ul> <li>Adjust the font size with the \"Zoom In\" and \"Zoom Out\" options for better readability.</li> </ul>"},{"location":"tooling/workbench/code-editor/#6-toggle-sidebar","title":"6. Toggle Sidebar","text":"<ul> <li>Toggle the visibility of the sidebar to show or hide file explorer and other navigation options.</li> </ul>"},{"location":"tooling/workbench/code-editor/#7-toggle-full-screen","title":"7. Toggle Full Screen","text":"<ul> <li>Make the \"Code Editor\" full screen for a distraction-free coding experience.</li> </ul>"},{"location":"tooling/workbench/code-editor/#conclusion","title":"Conclusion","text":"<p>The \"Code Editor\" in the Workbench, powered by the Monaco editor, provides a sophisticated and feature-rich environment for coding. Explore the various features and actions to enhance your coding productivity and efficiency.</p>"},{"location":"tooling/workbench/console/","title":"Console","text":"<p>The \"Console\" view in the Workbench provides real-time feedback, logs, and outputs from various processes, enabling developers to monitor and troubleshoot their applications. This section provides an overview of the key features and actions available in the \"Console\" view.</p> <p></p>"},{"location":"tooling/workbench/console/#use-cases","title":"Use Cases","text":"<ul> <li> <p>The \"Console\" displays the output of server-side scripts executed in the platform.</p> </li> <li> <p>View real-time logs, errors, and outputs generated by server-side script executions.</p> </li> <li> <p>The \"Console\" is used during the debugging of server-side scripts, providing insights into the execution flow, variables, and breakpoints.</p> </li> <li> <p>Examine debugging information, breakpoints status, and step through script executions.</p> </li> <li> <p>The \"Console\" displays information related to the build and compilation processes.</p> </li> <li> <p>Monitor build progress, errors, and other build-related information.</p> </li> </ul>"},{"location":"tooling/workbench/console/#actions","title":"Actions","text":""},{"location":"tooling/workbench/console/#1-clear-console","title":"1. Clear Console","text":"<ul> <li> <p>Use the \"Clear Console\" button in the \"Console\" toolbar to clear the contents of the currently active console.</p> </li> <li> <p>This action helps maintain a clean and focused console view.</p> </li> </ul>"},{"location":"tooling/workbench/console/#2-search-console-output","title":"2. Search Console Output","text":"<ul> <li> <p>Utilize the \"Search\" options to narrow down the console output based on specific keywords, log levels, or other criteria.</p> </li> <li> <p>The search input is available in the \"Console\" toolbar.</p> </li> </ul>"},{"location":"tooling/workbench/console/#3-copy-and-paste","title":"3. Copy and Paste","text":"<ul> <li> <p>Copy and paste content from the console view for sharing, documentation, or analysis.</p> </li> <li> <p>Right-click on the console output to access copy and paste options.</p> </li> </ul>"},{"location":"tooling/workbench/console/#conclusion","title":"Conclusion","text":"<p>The \"Console\" view in the \"Workbench\" is a valuable tool for developers to monitor, debug, and analyze various processes and script executions. Familiarize yourself with the different console types and utilize the available actions for an efficient development experience.</p>"},{"location":"tooling/workbench/import/","title":"Import","text":"<p>The \"Import\" feature in the \"Workbench\" allows you to bring external projects and artifacts into your development environment. This section provides a guide on how to use the \"Import\" functionality efficiently.</p> <p></p>"},{"location":"tooling/workbench/import/#importing-a-project","title":"Importing a Project","text":"<p>To import an existing project into the Workbench, follow these steps:</p> <ol> <li> <p>Click on the \"Import\" tab in the \"Workbench\".</p> </li> <li> <p>Drag&amp;drop a project zip file the \"Import\" drop area.</p> </li> <li> <p>Click \"Add\" to complete the import process.</p> </li> </ol>"},{"location":"tooling/workbench/import/#importing-artifacts","title":"Importing Artifacts","text":"<p>You can also import specific artifacts into your project, such as tables, views, scripts, and more:</p> <ol> <li> <p>Click on the \"Projects\" tab in the Workbench.</p> </li> <li> <p>Click the \"Import\" button on the toolbar.</p> </li> <li> <p>Choose the type of artifact you want to import (e.g., Database Table, Script).</p> </li> <li> <p>Follow the wizard to select the source and configure import options.</p> </li> <li> <p>Click \"Finish\" to complete the import of the artifact.</p> </li> </ol>"},{"location":"tooling/workbench/import/#configuring-import-options","title":"Configuring Import Options","text":"<p>During the import process, you may encounter configuration options specific to the type of import. These options allow you to customize how the import should be handled, such as project name, source location, and more.</p>"},{"location":"tooling/workbench/import/#conclusion","title":"Conclusion","text":"<p>The \"Import\" feature in the \"Workbench\" simplifies the process of bringing external projects and artifacts into your development environment. Utilize the flexibility of import sources and options to seamlessly integrate external content with your projects.</p>"},{"location":"tooling/workbench/loggers/","title":"Loggers","text":"<p>The \"Loggers\" view in the \"Workbench\" provides a centralized location to configure and manage logging levels for different components and modules. This section provides an overview of the key features and actions available in the \"Loggers\" view.</p>"},{"location":"tooling/workbench/loggers/#configuring-log-levels","title":"Configuring Log Levels","text":"<ol> <li>Open the Loggers View:</li> <li> <p>To open the \"Loggers\" view, click on the \"Loggers\" tab at the bottom of the \"Workbench\".</p> </li> <li> <p>View Existing Loggers:</p> </li> <li> <p>The \"Loggers\" view displays a list of existing loggers along with their current log levels.</p> </li> <li> <p>Change Log Levels:</p> </li> <li> <p>Modify the log levels for specific loggers by selecting the logger and adjusting the log level using the available options.</p> </li> <li> <p>Root Logger:</p> </li> <li> <p>The root logger represents the default log level for all loggers. Changing the root logger's level affects all loggers unless overridden by specific logger configurations.</p> </li> <li> <p>Logger Hierarchy:</p> </li> <li>Loggers can be organized in a hierarchy, allowing for more granular control over logging levels. Adjusting the log level of a parent logger can impact all its child loggers.</li> </ol>"},{"location":"tooling/workbench/loggers/#actions-in-the-loggers-view","title":"Actions in the Loggers View","text":""},{"location":"tooling/workbench/loggers/#1-set-log-level","title":"1. Set Log Level:","text":"<ul> <li>Use the \"Trace\", \"Debug\", \"Info\", \"Warn\", \"Error\" buttona in the \"Loggers\" toolbar to set logger severity with a specific log level.</li> </ul>"},{"location":"tooling/workbench/loggers/#2-filter","title":"2. Filter:","text":"<ul> <li>Utilize the filter options to quickly locate specific loggers in the view.</li> </ul>"},{"location":"tooling/workbench/loggers/#conclusion","title":"Conclusion","text":"<p>The \"Loggers\" view in the \"Workbench\" provides a convenient way to configure and manage logging levels for different components and modules in the platform. Familiarize yourself with the available actions and log level configurations to effectively control the logging behavior of your application.</p>"},{"location":"tooling/workbench/logs/","title":"Logs","text":"<p>The \"Logs\" view in the \"Workbench\" provides a central location to monitor and analyze logs generated by various processes, scripts, and system events. This section provides an overview of the key features and actions available in the \"Logs\" view.</p>"},{"location":"tooling/workbench/logs/#types-of-logs","title":"Types of Logs","text":""},{"location":"tooling/workbench/logs/#1-scripting-logs","title":"1. Scripting Logs","text":"<ul> <li> <p>The Scripting Logs capture logs generated by server-side scripts executed in the platform.</p> </li> <li> <p>View real-time logs, errors, and outputs generated by server-side script executions.</p> </li> </ul>"},{"location":"tooling/workbench/logs/#2-system-logs","title":"2. System Logs","text":"<ul> <li> <p>The System Logs capture logs related to system-level events and processes.</p> </li> <li> <p>Monitor system-level logs, errors, and events.</p> </li> </ul>"},{"location":"tooling/workbench/logs/#3-debug-logs","title":"3. Debug Logs","text":"<ul> <li> <p>The Debug Logs capture logs generated during the debugging of server-side scripts.</p> </li> <li> <p>Examine debugging information, breakpoints status, and step through script executions.</p> </li> </ul>"},{"location":"tooling/workbench/logs/#actions-in-the-logs-view","title":"Actions in the Logs View","text":""},{"location":"tooling/workbench/logs/#1-filter-logs","title":"1. Filter Logs","text":"<ul> <li> <p>Utilize the filter options to narrow down the logs based on specific criteria.</p> </li> <li> <p>The filter input is available in the Logs toolbar.</p> </li> </ul>"},{"location":"tooling/workbench/logs/#2-copy-and-paste","title":"2. Copy and Paste","text":"<ul> <li> <p>Copy and paste log entries for sharing, documentation, or analysis.</p> </li> <li> <p>Right-click on the log entry to access copy and paste options.</p> </li> </ul>"},{"location":"tooling/workbench/logs/#conclusion","title":"Conclusion","text":"<p>The \"Logs\" view in the \"Workbench\" provides a centralized tool for monitoring and analyzing logs generated by various processes in the codbex platform. Familiarize yourself with the different log types and utilize the available actions for efficient log management.</p>"},{"location":"tooling/workbench/preview/","title":"Preview","text":"<p>The \"Preview\" view in the Workbench allows you to preview and interact with various types of content, such as HTML, Markdown, and other document formats. This section provides an overview of the key features and actions available in the \"Preview\" view.</p>"},{"location":"tooling/workbench/preview/#previewing-documents","title":"Previewing Documents","text":"<ol> <li>Open a Document:</li> <li> <p>To open a document in the Preview view, select the file in the \"Workbench\".</p> </li> <li> <p>Real-time Rendering:</p> </li> <li> <p>The \"Preview\" view renders documents in real-time, allowing you to see the changes as you edit the source document.</p> </li> <li> <p>Toggle Views:</p> </li> <li> <p>Toggle between different documents, such as HTML, Markdown, or other supported formats, to see how the document is presented in various contexts.</p> </li> <li> <p>Interactive Elements:</p> </li> <li>If the document contains interactive elements (e.g., hyperlinks), you can interact with them directly in the \"Preview\" view.</li> </ol>"},{"location":"tooling/workbench/preview/#actions-in-the-preview-view","title":"Actions in the Preview View","text":"<ol> <li>Refresh Preview:</li> <li> <p>Use the \"Refresh\" button to force a refresh of the preview, updating it with the latest changes from the source document.</p> </li> <li> <p>Zoom In and Out:</p> </li> <li> <p>Adjust the zoom level for better readability using the \"Zoom In\" and \"Zoom Out\" options.</p> </li> <li> <p>Toggle Full Screen:</p> </li> <li> <p>Maximize the Preview view to full screen for a focused and distraction-free preview experience.</p> </li> <li> <p>Open in External Browser:</p> </li> <li> <p>Open the previewed document in an external web browser for a more comprehensive view.</p> </li> <li> <p>Copy Content:</p> </li> <li> <p>Copy the content of the previewed document to the clipboard for external use or documentation.</p> </li> <li> <p>Navigate Back and Forward:</p> </li> <li>Navigate backward and forward through the preview history, similar to a web browser.</li> </ol>"},{"location":"tooling/workbench/preview/#supported-document-types","title":"Supported Document Types","text":"<p>The \"Preview\" view supports various document types, including but not limited to:</p> <ul> <li>HTML</li> <li>Markdown</li> <li>Text</li> <li>Images</li> </ul>"},{"location":"tooling/workbench/preview/#conclusion","title":"Conclusion","text":"<p>The \"Preview\" view in the Workbench provides a convenient way to preview and interact with different document types. Explore the available features and actions to enhance your document preview experience.</p>"},{"location":"tooling/workbench/problems/","title":"Problems","text":"<p>The \"Problems\" view in the Workbench provides a centralized location to monitor and address issues, errors, and warnings in your projects. This section provides an overview of the key features and actions available in the \"Problems\" view.</p>"},{"location":"tooling/workbench/problems/#key-features","title":"Key Features","text":""},{"location":"tooling/workbench/problems/#1-issue-types","title":"1. Issue Types","text":"<ul> <li>The \"Problems\" view categorizes issues into different types, such as errors, warnings, and informational messages.</li> </ul>"},{"location":"tooling/workbench/problems/#2-filtering-options","title":"2. Filtering Options","text":"<ul> <li>Use filtering options to focus on specific types of issues or prioritize by severity.</li> </ul>"},{"location":"tooling/workbench/problems/#3-navigation","title":"3. Navigation","text":"<ul> <li>Click on an issue in the \"Problems\" view to navigate directly to the corresponding file and line of code.</li> </ul>"},{"location":"tooling/workbench/problems/#4-quick-fixes","title":"4. Quick Fixes","text":"<ul> <li>For certain issues, the \"Problems\" view may provide quick-fix suggestions to address problems efficiently.</li> </ul>"},{"location":"tooling/workbench/problems/#5-grouping-and-sorting","title":"5. Grouping and Sorting","text":"<ul> <li>Group and sort issues based on various criteria to organize and prioritize problem resolution.</li> </ul>"},{"location":"tooling/workbench/problems/#6-automatic-updates","title":"6. Automatic Updates","text":"<ul> <li>The \"Problems\" view is automatically updated as you make changes to your code, ensuring real-time feedback.</li> </ul>"},{"location":"tooling/workbench/problems/#actions-in-the-problems-view","title":"Actions in the Problems View","text":""},{"location":"tooling/workbench/problems/#1-resolve-issues","title":"1. Resolve Issues","text":"<ul> <li>Address issues directly from the \"Problems\" view by fixing code or applying suggested quick fixes.</li> </ul>"},{"location":"tooling/workbench/problems/#2-clear-markers","title":"2. Clear Markers","text":"<ul> <li>Clear selected markers or all markers in the \"Problems\" view.</li> </ul>"},{"location":"tooling/workbench/problems/#3-filtering","title":"3. Filtering","text":"<ul> <li>Use filtering options to show or hide specific types of issues based on severity, type, or other criteria.</li> </ul>"},{"location":"tooling/workbench/problems/#4-group-by","title":"4. Group By","text":"<ul> <li>Group issues based on criteria such as type, file, or severity for better organization.</li> </ul>"},{"location":"tooling/workbench/problems/#5-configure-contents","title":"5. Configure Contents","text":"<ul> <li>Customize the contents of the \"Problems\" view to display only the information relevant to your current context.</li> </ul>"},{"location":"tooling/workbench/problems/#conclusion","title":"Conclusion","text":"<p>The \"Problems\" view in the Workbench is a valuable tool for identifying, managing, and resolving issues in your projects. Regularly check the \"Problems\" view to ensure your codebase is free of errors and warnings.</p>"},{"location":"tooling/workbench/projects/","title":"Projects","text":"<p>The \"Projects\" area in the \"Workbench\" serves as a central hub for managing and organizing your development projects. This section provides an overview of the key features and actions available in the \"Projects\" area.</p> <p></p>"},{"location":"tooling/workbench/projects/#create-a-new-project","title":"Create a New Project","text":"<p>To create a new project, follow these steps:</p> <p></p> <ol> <li> <p>Click on the \"...\" button or right-click in the \"Projects\" tab in the Workbench.</p> </li> <li> <p>Click the \"Create Project\" button.</p> </li> <li> <p>Enter a \"name\" for your project and choose a project template if applicable.</p> </li> <li> <p>Click \"Create\" to initialize the new project.</p> </li> </ol>"},{"location":"tooling/workbench/projects/#project-structure","title":"Project Structure","text":"<p>Once a project is created, it follows a standard structure:</p> <ul> <li> <p>\"/project.json\": Optional artifact for custom actions and dependencies.</p> </li> <li> <p>\"/lib\": External libraries and dependencies (optional).</p> </li> <li> <p>\"/scripts\": Project-specific server-side scripts (optional).</p> </li> <li> <p>\"/web\": Web content and resources (optional).</p> </li> </ul>"},{"location":"tooling/workbench/projects/#manage-project-dependencies","title":"Manage Project Dependencies","text":"<p>You can manage project dependencies in the \"Projects\" area:</p> <ol> <li> <p>Double-click on the \"project.json\" file.</p> </li> <li> <p>Open the file in the \"Editor\".</p> </li> <li> <p>Navigate to the \"dependencies\" element.</p> </li> <li> <p>Add or remove dependencies as needed.</p> </li> </ol> <p></p>"},{"location":"tooling/workbench/projects/#import-and-export-projects","title":"Import and Export Projects","text":"<p>To import an existing project or export a project:</p> <ol> <li> <p>Right-click on the \"Project\" element from the tree.</p> </li> <li> <p>Select \"Import\" or \"Export\" on the toolbar.</p> </li> <li> <p>Follow the wizard to select projects or specify the export destination.</p> </li> </ol>"},{"location":"tooling/workbench/projects/#version-control-integration","title":"Version Control Integration","text":"<p>The platform supports version control integration for projects. If your project is under version control (e.g., Git), you can inspect version control statuses directly from the \"Projects\" area.</p>"},{"location":"tooling/workbench/projects/#conclusion","title":"Conclusion","text":"<p>The \"Projects\" area in the \"Workbench\" provides a centralized workspace for managing your development projects efficiently. Use the available features to create, organize, and configure your projects seamlessly.</p>"},{"location":"tooling/workbench/properties/","title":"Properties","text":"<p>The \"Properties\" area in the \"Workbench\" provides a centralized location to inspect the properties of projects and artifacts. This section provides an overview of the key features and actions available in the \"Properties\" area.</p> <p></p>"},{"location":"tooling/workbench/properties/#project-properties","title":"Project Properties","text":"<p>To access and configure properties for a project, follow these steps:</p> <ol> <li> <p>Click on the project artefact in the \"Projects\" area of the \"Workbench\".</p> </li> <li> <p>Navigate through the various lines to inspect artefact-specific settings:</p> </li> <li> <p>Name: Name of the artefact.</p> </li> <li> <p>Path: Location of the artefact.</p> </li> <li> <p>ContentType: The content type of the artefact.</p> </li> <li> <p>Workspace: The workspace where the artefact is located.</p> </li> <li> <p>More artefact specific properties.</p> </li> </ol>"},{"location":"tooling/workbench/properties/#conclusion","title":"Conclusion","text":"<p>The \"Properties\" area in the \"Workbench\" serves as a comprehensive tool for inspecting the properties of projects and artifacts. Utilize the available tabs and settings tailored your development environment according to your specific requirements.</p>"},{"location":"tooling/workbench/search/","title":"Search","text":"<p>The \"Search\" feature in the \"Workbench\" allows you to efficiently search for projects, files, and content within your development environment. This section provides a guide on how to use the \"Search\" functionality effectively.</p> <p></p>"},{"location":"tooling/workbench/search/#search-for-projects","title":"Search for Projects","text":"<p>To search for projects within the Workbench, follow these steps:</p> <ol> <li> <p>Click on the \"Search\" tab in the \"Workbench\".</p> </li> <li> <p>Enter the project name or keywords in the search bar.</p> </li> <li> <p>Press \"Enter\" or click the search icon.</p> </li> <li> <p>Review the search results for matching projects.</p> </li> <li> <p>Click on a project artefact to navigate directly to it.</p> </li> </ol>"},{"location":"tooling/workbench/search/#search-for-files","title":"Search for Files","text":"<p>To search for specific files within the \"Workbench\", follow these steps:</p> <ol> <li> <p>Click on the \"Search\" tab in the Workbench.</p> </li> <li> <p>Enter the file name or keywords in the search bar.</p> </li> <li> <p>Press \"Enter\" or click the search icon.</p> </li> <li> <p>Review the search results for matching files.</p> </li> <li> <p>Click on a file to open it or perform additional actions.</p> </li> </ol>"},{"location":"tooling/workbench/search/#quick-navigation","title":"Quick Navigation","text":"<p>The search results provide a quick and convenient way to navigate to the desired project or file. Use the keyboard arrows to navigate through the results, and press \"Enter\" to open the selected item.</p>"},{"location":"tooling/workbench/search/#conclusion","title":"Conclusion","text":"<p>The \"Search\" feature in the \"Workbench\" enhances your productivity by providing a quick and efficient way to locate projects and files. Experiment with different search queries and options to streamline your development workflow.</p>"}]}